data
align 4
LABELV numBaseTrailSystems
byte 4 0
align 4
LABELV numBaseTrailBeams
byte 4 0
code
proc CG_CalculateBeamNodeProperties 664 8
file "..\..\..\..\src/cgame/cg_trails.c"
line 44
;1:/*
;2:===========================================================================
;3:Copyright (C) 2000-2006 Tim Angus
;4:
;5:This file is part of Tremulous.
;6:
;7:Tremulous is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Tremulous is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Tremulous; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22:
;23:// cg_trails.c -- the trail system
;24:
;25:
;26:#include "cg_local.h"
;27:
;28:static baseTrailSystem_t  baseTrailSystems[ MAX_BASETRAIL_SYSTEMS ];
;29:static baseTrailBeam_t    baseTrailBeams[ MAX_BASETRAIL_BEAMS ];
;30:static int                numBaseTrailSystems = 0;
;31:static int                numBaseTrailBeams = 0;
;32:
;33:static trailSystem_t      trailSystems[ MAX_TRAIL_SYSTEMS ];
;34:static trailBeam_t        trailBeams[ MAX_TRAIL_BEAMS ];
;35:
;36:/*
;37:===============
;38:CG_CalculateBeamNodeProperties
;39:
;40:Fills in trailBeamNode_t.textureCoord
;41:===============
;42:*/
;43:static void CG_CalculateBeamNodeProperties( trailBeam_t *tb )
;44:{
line 45
;45:  trailBeamNode_t *i = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 49
;46:  trailSystem_t   *ts;
;47:  baseTrailBeam_t *btb;
;48:  float           nodeDistances[ MAX_TRAIL_BEAM_NODES ];
;49:  float           totalDistance = 0.0f, position = 0.0f;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 4
CNSTF4 0
ASGNF4
line 50
;50:  int             j, numNodes = 0;
ADDRLP4 540
CNSTI4 0
ASGNI4
line 53
;51:  float           TCRange, widthRange, alphaRange;
;52:  vec3_t          colorRange;
;53:  float           fadeAlpha = 1.0f;
ADDRLP4 544
CNSTF4 1065353216
ASGNF4
line 55
;54:
;55:  if( !tb || !tb->nodes )
ADDRLP4 568
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 572
CNSTU4 0
ASGNU4
ADDRLP4 568
INDIRP4
CVPU4 4
ADDRLP4 572
INDIRU4
EQU4 $102
ADDRLP4 568
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 572
INDIRU4
NEU4 $100
LABELV $102
line 56
;56:    return;
ADDRGP4 $99
JUMPV
LABELV $100
line 58
;57:
;58:  ts = tb->parent;
ADDRLP4 560
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 59
;59:  btb = tb->class;
ADDRLP4 564
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 61
;60:
;61:  if( ts->destroyTime > 0 && btb->fadeOutTime )
ADDRLP4 576
CNSTI4 0
ASGNI4
ADDRLP4 560
INDIRP4
CNSTI4 2764
ADDP4
INDIRI4
ADDRLP4 576
INDIRI4
LEI4 $103
ADDRLP4 564
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRLP4 576
INDIRI4
EQI4 $103
line 62
;62:  {
line 63
;63:    fadeAlpha -= ( cg.time - ts->destroyTime ) / btb->fadeOutTime;
ADDRLP4 544
ADDRLP4 544
INDIRF4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 560
INDIRP4
CNSTI4 2764
ADDP4
INDIRI4
SUBI4
ADDRLP4 564
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
DIVI4
CVIF4 4
SUBF4
ASGNF4
line 65
;64:
;65:    if( fadeAlpha < 0.0f )
ADDRLP4 544
INDIRF4
CNSTF4 0
GEF4 $106
line 66
;66:      fadeAlpha = 0.0f;
ADDRLP4 544
CNSTF4 0
ASGNF4
LABELV $106
line 67
;67:  }
LABELV $103
line 69
;68:
;69:  TCRange = tb->class->backTextureCoord -
ADDRLP4 580
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 556
ADDRLP4 580
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 580
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
SUBF4
ASGNF4
line 71
;70:    tb->class->frontTextureCoord;
;71:  widthRange = tb->class->backWidth -
ADDRLP4 584
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 548
ADDRLP4 584
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 584
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 73
;72:    tb->class->frontWidth;
;73:  alphaRange = tb->class->backAlpha -
ADDRLP4 588
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 552
ADDRLP4 588
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 588
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
SUBF4
ASGNF4
line 75
;74:    tb->class->frontAlpha;
;75:  VectorSubtract( tb->class->backColor,
ADDRLP4 592
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 596
ADDRLP4 592
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 596
INDIRP4
CNSTI4 23
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 596
INDIRP4
CNSTI4 20
ADDP4
INDIRU1
CVUI4 1
SUBI4
CVIF4 4
ASGNF4
ADDRLP4 600
ADDRLP4 592
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 16+4
ADDRLP4 600
INDIRP4
CNSTI4 24
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 600
INDIRP4
CNSTI4 21
ADDP4
INDIRU1
CVUI4 1
SUBI4
CVIF4 4
ASGNF4
ADDRLP4 604
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 16+8
ADDRLP4 604
INDIRP4
CNSTI4 25
ADDP4
INDIRU1
CVUI4 1
ADDRLP4 604
INDIRP4
CNSTI4 22
ADDP4
INDIRU1
CVUI4 1
SUBI4
CVIF4 4
ASGNF4
line 78
;76:      tb->class->frontColor, colorRange );
;77:
;78:  for( i = tb->nodes; i && i->next; i = i->next )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $113
JUMPV
LABELV $110
line 79
;79:  {
line 80
;80:    nodeDistances[ numNodes++ ] =
ADDRLP4 608
ADDRLP4 540
INDIRI4
ASGNI4
ADDRLP4 540
ADDRLP4 608
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 616
CNSTI4 12
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 616
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ADDRLP4 616
INDIRI4
ADDP4
ARGP4
ADDRLP4 620
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 608
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
ADDRLP4 620
INDIRF4
ASGNF4
line 82
;81:      Distance( i->position, i->next->position );
;82:  }
LABELV $111
line 78
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $113
ADDRLP4 612
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 612
INDIRU4
EQU4 $114
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 612
INDIRU4
NEU4 $110
LABELV $114
line 84
;83:
;84:  for( j = 0; j < numNodes; j++ )
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $118
JUMPV
LABELV $115
line 85
;85:    totalDistance += nodeDistances[ j ];
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
LABELV $116
line 84
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $118
ADDRLP4 12
INDIRI4
ADDRLP4 540
INDIRI4
LTI4 $115
line 87
;86:
;87:  for( j = 0, i = tb->nodes; i; i = i->next, j++ )
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $122
JUMPV
LABELV $119
line 88
;88:  {
line 89
;89:    if( tb->class->textureType == TBTT_STRETCH )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 0
NEI4 $123
line 90
;90:    {
line 91
;91:      i->textureCoord = tb->class->frontTextureCoord +
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ADDRLP4 556
INDIRF4
MULF4
ADDF4
ASGNF4
line 93
;92:        ( ( position / totalDistance ) * TCRange );
;93:    }
ADDRGP4 $124
JUMPV
LABELV $123
line 94
;94:    else if( tb->class->textureType == TBTT_REPEAT )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 1
NEI4 $125
line 95
;95:    {
line 96
;96:      if( tb->class->clampToBack )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 0
EQI4 $127
line 97
;97:        i->textureCoord = ( totalDistance - position ) /
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 8
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
DIVF4
ASGNF4
ADDRGP4 $128
JUMPV
LABELV $127
line 100
;98:          tb->class->repeatLength;
;99:      else
;100:        i->textureCoord = position / tb->class->repeatLength;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
DIVF4
ASGNF4
LABELV $128
line 101
;101:    }
LABELV $125
LABELV $124
line 103
;102:
;103:    i->halfWidth = ( tb->class->frontWidth +
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ADDRLP4 548
INDIRF4
MULF4
ADDF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 105
;104:      ( ( position / totalDistance ) * widthRange ) ) / 2.0f;
;105:    i->alpha = (byte)( (float)0xFF * ( tb->class->frontAlpha +
ADDRLP4 620
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ADDRLP4 552
INDIRF4
MULF4
ADDF4
MULF4
ADDRLP4 544
INDIRF4
MULF4
ASGNF4
ADDRLP4 624
CNSTF4 1325400064
ASGNF4
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
LTF4 $130
ADDRLP4 616
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $131
JUMPV
LABELV $130
ADDRLP4 616
ADDRLP4 620
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $131
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 616
INDIRU4
CVUU1 4
ASGNU1
line 107
;106:      ( ( position / totalDistance ) * alphaRange ) ) * fadeAlpha );
;107:    VectorMA( tb->class->frontColor, ( position / totalDistance ),
ADDRLP4 640
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRU1
CVUI4 1
CVIF4 4
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
MULF4
ADDF4
ASGNF4
ADDRLP4 644
CNSTF4 1325400064
ASGNF4
ADDRLP4 640
INDIRF4
ADDRLP4 644
INDIRF4
LTF4 $137
ADDRLP4 628
ADDRLP4 640
INDIRF4
ADDRLP4 644
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $138
JUMPV
LABELV $137
ADDRLP4 628
ADDRLP4 640
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $138
ADDRLP4 0
INDIRP4
CNSTI4 37
ADDP4
ADDRLP4 628
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 648
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 21
ADDP4
INDIRU1
CVUI4 1
CVIF4 4
ADDRLP4 16+4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
MULF4
ADDF4
ASGNF4
ADDRLP4 652
CNSTF4 1325400064
ASGNF4
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
LTF4 $139
ADDRLP4 632
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $140
JUMPV
LABELV $139
ADDRLP4 632
ADDRLP4 648
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $140
ADDRLP4 0
INDIRP4
CNSTI4 38
ADDP4
ADDRLP4 632
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 656
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 22
ADDP4
INDIRU1
CVUI4 1
CVIF4 4
ADDRLP4 16+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
MULF4
ADDF4
ASGNF4
ADDRLP4 660
CNSTF4 1325400064
ASGNF4
ADDRLP4 656
INDIRF4
ADDRLP4 660
INDIRF4
LTF4 $141
ADDRLP4 636
ADDRLP4 656
INDIRF4
ADDRLP4 660
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $142
JUMPV
LABELV $141
ADDRLP4 636
ADDRLP4 656
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $142
ADDRLP4 0
INDIRP4
CNSTI4 39
ADDP4
ADDRLP4 636
INDIRU4
CVUU1 4
ASGNU1
line 110
;108:        colorRange, i->color );
;109:
;110:    position += nodeDistances[ j ];
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
line 111
;111:  }
LABELV $120
line 87
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $122
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $119
line 112
;112:}
LABELV $99
endproc CG_CalculateBeamNodeProperties 664 8
proc CG_LightVertex 44 16
ADDRFP4 4
ADDRFP4 4
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 122
;113:
;114:/*
;115:===============
;116:CG_LightVertex
;117:
;118:Lights a particular vertex
;119:===============
;120:*/
;121:static void CG_LightVertex( vec3_t point, byte alpha, byte *rgba )
;122:{
line 126
;123:  int     i;
;124:  vec3_t  alight, dlight, lightdir;
;125:
;126:  trap_R_LightForPoint( point, alight, dlight, lightdir );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 trap_R_LightForPoint
CALLI4
pop
line 127
;127:  for( i = 0; i <= 2; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $144
line 128
;128:    rgba[ i ] = (int)alight[ i ];
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
CVFI4 4
CVIU4 4
CVUU1 4
ASGNU1
LABELV $145
line 127
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LEI4 $144
line 130
;129:
;130:  rgba[ 3 ] = alpha;
ADDRFP4 8
INDIRP4
CNSTI4 3
ADDP4
ADDRFP4 4
INDIRU1
ASGNU1
line 131
;131:}
LABELV $143
endproc CG_LightVertex 44 16
proc CG_RenderBeam 12292 16
line 141
;132:
;133:/*
;134:===============
;135:CG_RenderBeam
;136:
;137:Renders a beam
;138:===============
;139:*/
;140:static void CG_RenderBeam( trailBeam_t *tb )
;141:{
line 142
;142:  trailBeamNode_t   *i = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 143
;143:  trailBeamNode_t   *prev = NULL;
ADDRLP4 12216
CNSTP4 0
ASGNP4
line 144
;144:  trailBeamNode_t   *next = NULL;
ADDRLP4 12212
CNSTP4 0
ASGNP4
line 147
;145:  vec3_t            up;
;146:  polyVert_t        verts[ ( MAX_TRAIL_BEAM_NODES - 1 ) * 4 ];
;147:  int               numVerts = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 152
;148:  baseTrailBeam_t   *btb;
;149:  trailSystem_t     *ts;
;150:  baseTrailSystem_t *bts;
;151:
;152:  if( !tb || !tb->nodes )
ADDRLP4 12232
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12236
CNSTU4 0
ASGNU4
ADDRLP4 12232
INDIRP4
CVPU4 4
ADDRLP4 12236
INDIRU4
EQU4 $151
ADDRLP4 12232
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 12236
INDIRU4
NEU4 $149
LABELV $151
line 153
;153:    return;
ADDRGP4 $148
JUMPV
LABELV $149
line 155
;154:
;155:  btb = tb->class;
ADDRLP4 12220
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 156
;156:  ts = tb->parent;
ADDRLP4 12224
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 157
;157:  bts = ts->class;
ADDRLP4 12228
ADDRLP4 12224
INDIRP4
INDIRP4
ASGNP4
line 159
;158:
;159:  if( bts->thirdPersonOnly &&
ADDRLP4 12228
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
EQI4 $152
ADDRLP4 12224
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 12240
ADDRGP4 CG_AttachmentCentNum
CALLI4
ASGNI4
ADDRLP4 12240
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
EQI4 $157
ADDRLP4 12224
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 12244
ADDRGP4 CG_AttachmentCentNum
CALLI4
ASGNI4
ADDRLP4 12244
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $152
LABELV $157
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $152
line 163
;160:      ( CG_AttachmentCentNum( &ts->frontAttachment ) == cg.snap->ps.clientNum ||
;161:        CG_AttachmentCentNum( &ts->backAttachment ) == cg.snap->ps.clientNum ) &&
;162:      !cg.renderingThirdPerson )
;163:    return;
ADDRGP4 $148
JUMPV
LABELV $152
line 165
;164:
;165:  CG_CalculateBeamNodeProperties( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CalculateBeamNodeProperties
CALLV
pop
line 167
;166:
;167:  i = tb->nodes;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
LABELV $158
line 170
;168:
;169:  do
;170:  {
line 171
;171:    prev = i->prev;
ADDRLP4 12216
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ASGNP4
line 172
;172:    next = i->next;
ADDRLP4 12212
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 174
;173:
;174:    if( prev && next )
ADDRLP4 12248
CNSTU4 0
ASGNU4
ADDRLP4 12216
INDIRP4
CVPU4 4
ADDRLP4 12248
INDIRU4
EQU4 $161
ADDRLP4 12212
INDIRP4
CVPU4 4
ADDRLP4 12248
INDIRU4
EQU4 $161
line 175
;175:    {
line 177
;176:      //this node has two neighbours
;177:      GetPerpendicularViewVector( cg.refdef.vieworg, next->position, prev->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 12252
CNSTI4 12
ASGNI4
ADDRLP4 12212
INDIRP4
ADDRLP4 12252
INDIRI4
ADDP4
ARGP4
ADDRLP4 12216
INDIRP4
ADDRLP4 12252
INDIRI4
ADDP4
ARGP4
ADDRLP4 12200
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 178
;178:    }
ADDRGP4 $162
JUMPV
LABELV $161
line 179
;179:    else if( !prev && next )
ADDRLP4 12252
CNSTU4 0
ASGNU4
ADDRLP4 12216
INDIRP4
CVPU4 4
ADDRLP4 12252
INDIRU4
NEU4 $165
ADDRLP4 12212
INDIRP4
CVPU4 4
ADDRLP4 12252
INDIRU4
EQU4 $165
line 180
;180:    {
line 182
;181:      //this is the front
;182:      GetPerpendicularViewVector( cg.refdef.vieworg, next->position, i->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 12256
CNSTI4 12
ASGNI4
ADDRLP4 12212
INDIRP4
ADDRLP4 12256
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 12256
INDIRI4
ADDP4
ARGP4
ADDRLP4 12200
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 183
;183:    }
ADDRGP4 $166
JUMPV
LABELV $165
line 184
;184:    else if( prev && !next )
ADDRLP4 12256
CNSTU4 0
ASGNU4
ADDRLP4 12216
INDIRP4
CVPU4 4
ADDRLP4 12256
INDIRU4
EQU4 $160
ADDRLP4 12212
INDIRP4
CVPU4 4
ADDRLP4 12256
INDIRU4
NEU4 $160
line 185
;185:    {
line 187
;186:      //this is the back
;187:      GetPerpendicularViewVector( cg.refdef.vieworg, i->position, prev->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 12260
CNSTI4 12
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 12260
INDIRI4
ADDP4
ARGP4
ADDRLP4 12216
INDIRP4
ADDRLP4 12260
INDIRI4
ADDP4
ARGP4
ADDRLP4 12200
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 188
;188:    }
line 190
;189:    else
;190:      break;
LABELV $170
LABELV $166
LABELV $162
line 192
;191:
;192:    if( prev )
ADDRLP4 12216
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $173
line 193
;193:    {
line 194
;194:      VectorMA( i->position, i->halfWidth, up, verts[ numVerts ].xyz );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12200
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12200+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 12200+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 195
;195:      verts[ numVerts ].st[ 0 ] = i->textureCoord;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 196
;196:      verts[ numVerts ].st[ 1 ] = 1.0f;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12+4
ADDP4
CNSTF4 1065353216
ASGNF4
line 198
;197:
;198:      if( btb->realLight )
ADDRLP4 12220
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $182
line 199
;199:        CG_LightVertex( verts[ numVerts ].xyz, i->alpha, verts[ numVerts ].modulate );
ADDRLP4 12272
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 12272
INDIRI4
ADDRLP4 8
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 12272
INDIRI4
ADDRLP4 8+20
ADDP4
ARGP4
ADDRGP4 CG_LightVertex
CALLV
pop
ADDRGP4 $183
JUMPV
LABELV $182
line 201
;200:      else
;201:      {
line 202
;202:        VectorCopy( i->color, verts[ numVerts ].modulate );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 37
ADDP4
INDIRB
ASGNB 12
line 203
;203:        verts[ numVerts ].modulate[ 3 ] = i->alpha;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20+3
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
ASGNU1
line 204
;204:      }
LABELV $183
line 206
;205:
;206:      numVerts++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 208
;207:
;208:      VectorMA( i->position, -i->halfWidth, up, verts[ numVerts ].xyz );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12200
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12200+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 12200+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 209
;209:      verts[ numVerts ].st[ 0 ] = i->textureCoord;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 210
;210:      verts[ numVerts ].st[ 1 ] = 0.0f;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12+4
ADDP4
CNSTF4 0
ASGNF4
line 212
;211:
;212:      if( btb->realLight )
ADDRLP4 12220
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $195
line 213
;213:        CG_LightVertex( verts[ numVerts ].xyz, i->alpha, verts[ numVerts ].modulate );
ADDRLP4 12288
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 12288
INDIRI4
ADDRLP4 8
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 12288
INDIRI4
ADDRLP4 8+20
ADDP4
ARGP4
ADDRGP4 CG_LightVertex
CALLV
pop
ADDRGP4 $196
JUMPV
LABELV $195
line 215
;214:      else
;215:      {
line 216
;216:        VectorCopy( i->color, verts[ numVerts ].modulate );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 37
ADDP4
INDIRB
ASGNB 12
line 217
;217:        verts[ numVerts ].modulate[ 3 ] = i->alpha;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20+3
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
ASGNU1
line 218
;218:      }
LABELV $196
line 220
;219:
;220:      numVerts++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 221
;221:    }
LABELV $173
line 223
;222:
;223:    if( next )
ADDRLP4 12212
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $201
line 224
;224:    {
line 225
;225:      VectorMA( i->position, -i->halfWidth, up, verts[ numVerts ].xyz );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12200
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12200+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 12200+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 226
;226:      verts[ numVerts ].st[ 0 ] = i->textureCoord;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 227
;227:      verts[ numVerts ].st[ 1 ] = 0.0f;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12+4
ADDP4
CNSTF4 0
ASGNF4
line 229
;228:
;229:      if( btb->realLight )
ADDRLP4 12220
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $210
line 230
;230:        CG_LightVertex( verts[ numVerts ].xyz, i->alpha, verts[ numVerts ].modulate );
ADDRLP4 12272
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 12272
INDIRI4
ADDRLP4 8
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 12272
INDIRI4
ADDRLP4 8+20
ADDP4
ARGP4
ADDRGP4 CG_LightVertex
CALLV
pop
ADDRGP4 $211
JUMPV
LABELV $210
line 232
;231:      else
;232:      {
line 233
;233:        VectorCopy( i->color, verts[ numVerts ].modulate );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 37
ADDP4
INDIRB
ASGNB 12
line 234
;234:        verts[ numVerts ].modulate[ 3 ] = i->alpha;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20+3
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
ASGNU1
line 235
;235:      }
LABELV $211
line 237
;236:
;237:      numVerts++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 239
;238:
;239:      VectorMA( i->position, i->halfWidth, up, verts[ numVerts ].xyz );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12200
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12200+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+8
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 12200+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 240
;240:      verts[ numVerts ].st[ 0 ] = i->textureCoord;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 241
;241:      verts[ numVerts ].st[ 1 ] = 1.0f;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+12+4
ADDP4
CNSTF4 1065353216
ASGNF4
line 243
;242:
;243:      if( btb->realLight )
ADDRLP4 12220
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $223
line 244
;244:        CG_LightVertex( verts[ numVerts ].xyz, i->alpha, verts[ numVerts ].modulate );
ADDRLP4 12288
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 12288
INDIRI4
ADDRLP4 8
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 12288
INDIRI4
ADDRLP4 8+20
ADDP4
ARGP4
ADDRGP4 CG_LightVertex
CALLV
pop
ADDRGP4 $224
JUMPV
LABELV $223
line 246
;245:      else
;246:      {
line 247
;247:        VectorCopy( i->color, verts[ numVerts ].modulate );
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 37
ADDP4
INDIRB
ASGNB 12
line 248
;248:        verts[ numVerts ].modulate[ 3 ] = i->alpha;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8+20+3
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRU1
ASGNU1
line 249
;249:      }
LABELV $224
line 251
;250:
;251:      numVerts++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 252
;252:    }
LABELV $201
line 254
;253:
;254:    i = i->next;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 255
;255:  } while( i );
LABELV $159
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $158
LABELV $160
line 257
;256:
;257:  trap_R_AddPolysToScene( tb->class->shader, 4, &verts[ 0 ], numVerts / 4 );
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 12248
CNSTI4 4
ASGNI4
ADDRLP4 12248
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRI4
ADDRLP4 12248
INDIRI4
DIVI4
ARGI4
ADDRGP4 trap_R_AddPolysToScene
CALLV
pop
line 258
;258:}
LABELV $148
endproc CG_RenderBeam 12292 16
proc CG_AllocateBeamNode 12 0
line 268
;259:
;260:/*
;261:===============
;262:CG_AllocateBeamNode
;263:
;264:Allocates a trailBeamNode_t from a trailBeam_t's nodePool
;265:===============
;266:*/
;267:static trailBeamNode_t *CG_AllocateBeamNode( trailBeam_t *tb )
;268:{
line 269
;269:  baseTrailBeam_t *btb = tb->class;
ADDRLP4 8
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 273
;270:  int             i;
;271:  trailBeamNode_t *tbn;
;272:
;273:  for( i = 0; i < MAX_TRAIL_BEAM_NODES; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $230
line 274
;274:  {
line 275
;275:    tbn = &tb->nodePool[ i ];
ADDRLP4 0
CNSTI4 84
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDP4
ASGNP4
line 276
;276:    if( !tbn->used )
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $234
line 277
;277:    {
line 278
;278:      tbn->timeLeft = btb->segmentTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 279
;279:      tbn->prev = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTP4 0
ASGNP4
line 280
;280:      tbn->next = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTP4 0
ASGNP4
line 281
;281:      tbn->used = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 1
ASGNI4
line 282
;282:      return tbn;
ADDRLP4 0
INDIRP4
RETP4
ADDRGP4 $229
JUMPV
LABELV $234
line 284
;283:    }
;284:  }
LABELV $231
line 273
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 128
LTI4 $230
line 287
;285:
;286:  // no space left
;287:  return NULL;
CNSTP4 0
RETP4
LABELV $229
endproc CG_AllocateBeamNode 12 0
proc CG_DestroyBeamNode 20 0
line 299
;288:}
;289:
;290:/*
;291:===============
;292:CG_DestroyBeamNode
;293:
;294:Removes a node from a beam
;295:Returns the new head
;296:===============
;297:*/
;298:static trailBeamNode_t *CG_DestroyBeamNode( trailBeamNode_t *tbn )
;299:{
line 300
;300:  trailBeamNode_t *newHead = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 302
;301:
;302:  if( tbn->prev )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $237
line 303
;303:  {
line 304
;304:    if( tbn->next )
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $239
line 305
;305:    {
line 307
;306:      // node is in the middle
;307:      tbn->prev->next = tbn->next;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 76
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 308
;308:      tbn->next->prev = tbn->prev;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 72
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 309
;309:    }
ADDRGP4 $240
JUMPV
LABELV $239
line 311
;310:    else // node is at the back
;311:      tbn->prev->next = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CNSTI4 76
ADDP4
CNSTP4 0
ASGNP4
LABELV $240
line 314
;312:
;313:    // find the new head (shouldn't have changed)
;314:    newHead = tbn->prev;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $242
JUMPV
LABELV $241
line 317
;315:
;316:    while( newHead->prev )
;317:      newHead = newHead->prev;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ASGNP4
LABELV $242
line 316
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $241
line 318
;318:  }
ADDRGP4 $238
JUMPV
LABELV $237
line 319
;319:  else if( tbn->next )
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $244
line 320
;320:  {
line 322
;321:    //node is at the front
;322:    tbn->next->prev = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CNSTI4 72
ADDP4
CNSTP4 0
ASGNP4
line 323
;323:    newHead = tbn->next;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 324
;324:  }
LABELV $244
LABELV $238
line 326
;325:
;326:  tbn->prev = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTP4 0
ASGNP4
line 327
;327:  tbn->next = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTP4 0
ASGNP4
line 328
;328:  tbn->used = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 0
ASGNI4
line 330
;329:
;330:  return newHead;
ADDRLP4 0
INDIRP4
RETP4
LABELV $236
endproc CG_DestroyBeamNode 20 0
proc CG_FindLastBeamNode 12 0
line 341
;331:}
;332:
;333:/*
;334:===============
;335:CG_FindLastBeamNode
;336:
;337:Returns the last beam node in a beam
;338:===============
;339:*/
;340:static trailBeamNode_t *CG_FindLastBeamNode( trailBeam_t *tb )
;341:{
line 342
;342:  trailBeamNode_t *i = tb->nodes;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $248
JUMPV
LABELV $247
line 345
;343:
;344:  while( i && i->next )
;345:    i = i->next;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $248
line 344
ADDRLP4 8
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
EQU4 $250
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
NEU4 $247
LABELV $250
line 347
;346:
;347:  return i;
ADDRLP4 0
INDIRP4
RETP4
LABELV $246
endproc CG_FindLastBeamNode 12 0
proc CG_CountBeamNodes 8 0
line 358
;348:}
;349:
;350:/*
;351:===============
;352:CG_CountBeamNodes
;353:
;354:Returns the number of nodes in a beam
;355:===============
;356:*/
;357:static int CG_CountBeamNodes( trailBeam_t *tb )
;358:{
line 359
;359:  trailBeamNode_t *i = tb->nodes;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
line 360
;360:  int             numNodes = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $253
JUMPV
LABELV $252
line 363
;361:
;362:  while( i )
;363:  {
line 364
;364:    numNodes++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 365
;365:    i = i->next;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 366
;366:  }
LABELV $253
line 362
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $252
line 368
;367:
;368:  return numNodes;
ADDRLP4 4
INDIRI4
RETI4
LABELV $251
endproc CG_CountBeamNodes 8 0
proc CG_PrependBeamNode 8 4
line 380
;369:}
;370:
;371:/*
;372:===============
;373:CG_PrependBeamNode
;374:
;375:Prepend a new beam node to the front of a beam
;376:Returns the new node
;377:===============
;378:*/
;379:static trailBeamNode_t *CG_PrependBeamNode( trailBeam_t *tb )
;380:{
line 383
;381:  trailBeamNode_t *i;
;382:
;383:  if( tb->nodes )
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $256
line 384
;384:  {
line 386
;385:    // prepend another node
;386:    i = CG_AllocateBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_AllocateBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 388
;387:
;388:    if( i )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $257
line 389
;389:    {
line 390
;390:      i->next = tb->nodes;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
line 391
;391:      tb->nodes->prev = i;
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 392
;392:      tb->nodes = i;
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 393
;393:    }
line 394
;394:  }
ADDRGP4 $257
JUMPV
LABELV $256
line 396
;395:  else //add first node
;396:  {
line 397
;397:    i = CG_AllocateBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_AllocateBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 399
;398:
;399:    if( i )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $260
line 400
;400:      tb->nodes = i;
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
LABELV $260
line 401
;401:  }
LABELV $257
line 403
;402:
;403:  return i;
ADDRLP4 0
INDIRP4
RETP4
LABELV $255
endproc CG_PrependBeamNode 8 4
proc CG_AppendBeamNode 16 4
line 415
;404:}
;405:
;406:/*
;407:===============
;408:CG_AppendBeamNode
;409:
;410:Append a new beam node to the back of a beam
;411:Returns the new node
;412:===============
;413:*/
;414:static trailBeamNode_t *CG_AppendBeamNode( trailBeam_t *tb )
;415:{
line 418
;416:  trailBeamNode_t *last, *i;
;417:
;418:  if( tb->nodes )
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $263
line 419
;419:  {
line 421
;420:    // append another node
;421:    last = CG_FindLastBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 CG_FindLastBeamNode
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 422
;422:    i = CG_AllocateBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 CG_AllocateBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 424
;423:
;424:    if( i )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $264
line 425
;425:    {
line 426
;426:      last->next = i;
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 427
;427:      i->prev = last;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 428
;428:      i->next = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTP4 0
ASGNP4
line 429
;429:    }
line 430
;430:  }
ADDRGP4 $264
JUMPV
LABELV $263
line 432
;431:  else //add first node
;432:  {
line 433
;433:    i = CG_AllocateBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 CG_AllocateBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 435
;434:
;435:    if( i )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $267
line 436
;436:      tb->nodes = i;
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
LABELV $267
line 437
;437:  }
LABELV $264
line 439
;438:
;439:  return i;
ADDRLP4 0
INDIRP4
RETP4
LABELV $262
endproc CG_AppendBeamNode 16 4
proc CG_ApplyJitters 124 16
line 448
;440:}
;441:
;442:/*
;443:===============
;444:CG_ApplyJitters
;445:===============
;446:*/
;447:static void CG_ApplyJitters( trailBeam_t *tb )
;448:{
line 449
;449:  trailBeamNode_t *i = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 456
;450:  int             j;
;451:  baseTrailBeam_t *btb;
;452:  trailSystem_t   *ts;
;453:  trailBeamNode_t *start;
;454:  trailBeamNode_t *end;
;455:
;456:  if( !tb || !tb->nodes )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
CNSTU4 0
ASGNU4
ADDRLP4 24
INDIRP4
CVPU4 4
ADDRLP4 28
INDIRU4
EQU4 $272
ADDRLP4 24
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 28
INDIRU4
NEU4 $270
LABELV $272
line 457
;457:    return;
ADDRGP4 $269
JUMPV
LABELV $270
line 459
;458:
;459:  btb = tb->class;
ADDRLP4 8
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 460
;460:  ts = tb->parent;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 462
;461:
;462:  for( j = 0; j < btb->numJitters; j++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $276
JUMPV
LABELV $273
line 463
;463:  {
line 464
;464:    if( tb->nextJitterTimes[ j ] <= cg.time )
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 10772
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GTI4 $277
line 465
;465:    {
line 466
;466:      for( i = tb->nodes; i; i = i->next )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $283
JUMPV
LABELV $280
line 467
;467:      {
line 468
;468:        i->jitters[ j ][ 0 ] = ( crandom( ) * btb->jitters[ j ].magnitude );
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
ADDP4
INDIRF4
MULF4
ASGNF4
line 469
;469:        i->jitters[ j ][ 1 ] = ( crandom( ) * btb->jitters[ j ].magnitude );
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 4
ADDP4
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
ADDP4
INDIRF4
MULF4
ASGNF4
line 470
;470:      }
LABELV $281
line 466
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $283
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $280
line 472
;471:
;472:      tb->nextJitterTimes[ j ] = cg.time + btb->jitters[ j ].period;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 10772
ADDP4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 473
;473:    }
LABELV $277
line 474
;474:  }
LABELV $274
line 462
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $276
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
LTI4 $273
line 476
;475:
;476:  start = tb->nodes;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
line 477
;477:  end = CG_FindLastBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_FindLastBeamNode
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
ASGNP4
line 479
;478:
;479:  if( !btb->jitterAttachments )
ADDRLP4 8
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 0
NEI4 $285
line 480
;480:  {
line 481
;481:    if( CG_Attached( &ts->frontAttachment ) && start->next )
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $287
ADDRLP4 16
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $287
line 482
;482:      start = start->next;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $287
line 484
;483:
;484:    if( CG_Attached( &ts->backAttachment ) && end->prev )
ADDRLP4 20
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $289
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $289
line 485
;485:      end = end->prev;
ADDRLP4 12
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ASGNP4
LABELV $289
line 486
;486:  }
LABELV $285
line 488
;487:
;488:  for( i = start; i; i = i->next )
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
ADDRGP4 $294
JUMPV
LABELV $291
line 489
;489:  {
line 493
;490:    vec3_t          forward, right, up;
;491:    trailBeamNode_t *prev;
;492:    trailBeamNode_t *next;
;493:    float           upJitter = 0.0f, rightJitter = 0.0f;
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 40
CNSTF4 0
ASGNF4
line 495
;494:
;495:    prev = i->prev;
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ASGNP4
line 496
;496:    next = i->next;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 498
;497:
;498:    if( prev && next )
ADDRLP4 88
CNSTU4 0
ASGNU4
ADDRLP4 48
INDIRP4
CVPU4 4
ADDRLP4 88
INDIRU4
EQU4 $295
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRLP4 88
INDIRU4
EQU4 $295
line 499
;499:    {
line 501
;500:      //this node has two neighbours
;501:      GetPerpendicularViewVector( cg.refdef.vieworg, next->position, prev->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 92
CNSTI4 12
ASGNI4
ADDRLP4 44
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ARGP4
ADDRLP4 48
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 502
;502:      VectorSubtract( next->position, prev->position, forward );
ADDRLP4 100
CNSTI4 12
ASGNI4
ADDRLP4 76
ADDRLP4 44
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108
CNSTI4 16
ASGNI4
ADDRLP4 76+4
ADDRLP4 44
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 112
CNSTI4 20
ASGNI4
ADDRLP4 76+8
ADDRLP4 44
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 503
;503:    }
ADDRGP4 $296
JUMPV
LABELV $295
line 504
;504:    else if( !prev && next )
ADDRLP4 92
CNSTU4 0
ASGNU4
ADDRLP4 48
INDIRP4
CVPU4 4
ADDRLP4 92
INDIRU4
NEU4 $301
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRLP4 92
INDIRU4
EQU4 $301
line 505
;505:    {
line 507
;506:      //this is the front
;507:      GetPerpendicularViewVector( cg.refdef.vieworg, next->position, i->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 96
CNSTI4 12
ASGNI4
ADDRLP4 44
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 508
;508:      VectorSubtract( next->position, i->position, forward );
ADDRLP4 104
CNSTI4 12
ASGNI4
ADDRLP4 76
ADDRLP4 44
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 112
CNSTI4 16
ASGNI4
ADDRLP4 76+4
ADDRLP4 44
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 116
CNSTI4 20
ASGNI4
ADDRLP4 76+8
ADDRLP4 44
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 509
;509:    }
ADDRGP4 $302
JUMPV
LABELV $301
line 510
;510:    else if( prev && !next )
ADDRLP4 96
CNSTU4 0
ASGNU4
ADDRLP4 48
INDIRP4
CVPU4 4
ADDRLP4 96
INDIRU4
EQU4 $307
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRLP4 96
INDIRU4
NEU4 $307
line 511
;511:    {
line 513
;512:      //this is the back
;513:      GetPerpendicularViewVector( cg.refdef.vieworg, i->position, prev->position, up );
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 100
CNSTI4 12
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
ARGP4
ADDRLP4 48
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 GetPerpendicularViewVector
CALLV
pop
line 514
;514:      VectorSubtract( i->position, prev->position, forward );
ADDRLP4 108
CNSTI4 12
ASGNI4
ADDRLP4 76
ADDRLP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 116
CNSTI4 16
ASGNI4
ADDRLP4 76+4
ADDRLP4 0
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 120
CNSTI4 20
ASGNI4
ADDRLP4 76+8
ADDRLP4 0
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 515
;515:    }
LABELV $307
LABELV $302
LABELV $296
line 517
;516:
;517:    VectorNormalize( forward );
ADDRLP4 76
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 518
;518:    CrossProduct( forward, up, right );
ADDRLP4 76
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 519
;519:    VectorNormalize( right );
ADDRLP4 52
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 521
;520:
;521:    for( j = 0; j < btb->numJitters; j++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $316
JUMPV
LABELV $313
line 522
;522:    {
line 523
;523:      upJitter += i->jitters[ j ][ 0 ];
ADDRLP4 36
ADDRLP4 36
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 524
;524:      rightJitter += i->jitters[ j ][ 1 ];
ADDRLP4 40
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 525
;525:    }
LABELV $314
line 521
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $316
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
LTI4 $313
line 527
;526:
;527:    VectorMA( i->position, upJitter, up, i->position );
ADDRLP4 100
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 64
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 64+4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 64+8
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
ASGNF4
line 528
;528:    VectorMA( i->position, rightJitter, right, i->position );
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ADDF4
ASGNF4
line 530
;529:
;530:    if( i == end )
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 12
INDIRP4
CVPU4 4
NEU4 $321
line 531
;531:      break;
ADDRGP4 $293
JUMPV
LABELV $321
line 532
;532:  }
LABELV $292
line 488
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $294
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $291
LABELV $293
line 533
;533:}
LABELV $269
endproc CG_ApplyJitters 124 16
proc CG_UpdateBeam 116 8
line 543
;534:
;535:/*
;536:===============
;537:CG_UpdateBeam
;538:
;539:Updates a beam
;540:===============
;541:*/
;542:static void CG_UpdateBeam( trailBeam_t *tb )
;543:{
line 552
;544:  baseTrailBeam_t *btb;
;545:  trailSystem_t   *ts;
;546:  trailBeamNode_t *i;
;547:  int             deltaTime;
;548:  int             nodesToAdd;
;549:  int             j;
;550:  int             numNodes;
;551:
;552:  if( !tb )
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $324
line 553
;553:    return;
ADDRGP4 $323
JUMPV
LABELV $324
line 555
;554:
;555:  btb = tb->class;
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 556
;556:  ts = tb->parent;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 558
;557:
;558:  deltaTime = cg.time - tb->lastEvalTime;
ADDRLP4 24
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 10764
ADDP4
INDIRI4
SUBI4
ASGNI4
line 559
;559:  tb->lastEvalTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 10764
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 562
;560:
;561:  // first make sure this beam has enough nodes
;562:  if( ts->destroyTime <= 0 )
ADDRLP4 4
INDIRP4
CNSTI4 2764
ADDP4
INDIRI4
CNSTI4 0
GTI4 $328
line 563
;563:  {
line 564
;564:    nodesToAdd = btb->numSegments - CG_CountBeamNodes( tb ) + 1;
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 CG_CountBeamNodes
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRP4
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $331
JUMPV
LABELV $330
line 567
;565:
;566:    while( nodesToAdd-- )
;567:    {
line 568
;568:      i = CG_AppendBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_AppendBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
line 570
;569:
;570:      if( !tb->nodes->next && CG_Attached( &ts->frontAttachment ) )
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $333
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $333
line 571
;571:      {
line 573
;572:        // this is the first node to be added
;573:        if( !CG_AttachmentPoint( &ts->frontAttachment, i->refPosition ) )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_AttachmentPoint
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $334
line 574
;574:          CG_DestroyTrailSystem( &ts );
ADDRLP4 4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
line 575
;575:      }
ADDRGP4 $334
JUMPV
LABELV $333
line 577
;576:      else
;577:        VectorCopy( i->prev->refPosition, i->refPosition );
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
INDIRB
ASGNB 12
LABELV $334
line 578
;578:    }
LABELV $331
line 566
ADDRLP4 32
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 32
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $330
line 579
;579:  }
LABELV $328
line 581
;580:
;581:  numNodes = CG_CountBeamNodes( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 CG_CountBeamNodes
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 583
;582:
;583:  for( i = tb->nodes; i; i = i->next )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $340
JUMPV
LABELV $337
line 584
;584:    VectorCopy( i->refPosition, i->position );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
INDIRB
ASGNB 12
LABELV $338
line 583
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
LABELV $340
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $337
line 586
;585:
;586:  if( CG_Attached( &ts->frontAttachment ) && CG_Attached( &ts->backAttachment ) )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $341
ADDRLP4 4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $341
line 587
;587:  {
line 591
;588:    // beam between two attachments
;589:    vec3_t dir, front, back;
;590:
;591:    if( ts->destroyTime > 0 && ( cg.time - ts->destroyTime ) >= btb->fadeOutTime )
ADDRLP4 80
ADDRLP4 4
INDIRP4
CNSTI4 2764
ADDP4
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
LEI4 $343
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 80
INDIRI4
SUBI4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
LTI4 $343
line 592
;592:    {
line 593
;593:      tb->valid = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 10768
ADDP4
CNSTI4 0
ASGNI4
line 594
;594:      return;
ADDRGP4 $323
JUMPV
LABELV $343
line 597
;595:    }
;596:
;597:    if( !CG_AttachmentPoint( &ts->frontAttachment, front ) )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 44
ARGP4
ADDRLP4 84
ADDRGP4 CG_AttachmentPoint
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $346
line 598
;598:      CG_DestroyTrailSystem( &ts );
ADDRLP4 4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $346
line 600
;599:
;600:    if( !CG_AttachmentPoint( &ts->backAttachment, back ) )
ADDRLP4 4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 88
ADDRGP4 CG_AttachmentPoint
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $348
line 601
;601:      CG_DestroyTrailSystem( &ts );
ADDRLP4 4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $348
line 603
;602:
;603:    VectorSubtract( back, front, dir );
ADDRLP4 56
ADDRLP4 68
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 68+4
INDIRF4
ADDRLP4 44+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 68+8
INDIRF4
ADDRLP4 44+8
INDIRF4
SUBF4
ASGNF4
line 605
;604:
;605:    for( j = 0, i = tb->nodes; i; i = i->next, j++ )
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $359
JUMPV
LABELV $356
line 606
;606:    {
line 607
;607:      float scale = (float)j / (float)( numNodes - 1 );
ADDRLP4 92
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRI4
CNSTI4 1
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 609
;608:
;609:      VectorMA( front, scale, dir, i->position );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 44
INDIRF4
ADDRLP4 56
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 44+4
INDIRF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 44+8
INDIRF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
line 610
;610:    }
LABELV $357
line 605
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $359
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $356
line 611
;611:  }
ADDRGP4 $342
JUMPV
LABELV $341
line 612
;612:  else if( CG_Attached( &ts->frontAttachment ) )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $364
line 613
;613:  {
line 617
;614:    // beam from one attachment
;615:
;616:    // cull the trail tail
;617:    i = CG_FindLastBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 CG_FindLastBeamNode
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ASGNP4
line 619
;618:
;619:    if( i && i->timeLeft >= 0 )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $366
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
LTI4 $366
line 620
;620:    {
line 621
;621:      i->timeLeft -= deltaTime;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ASGNI4
line 623
;622:
;623:      if( i->timeLeft < 0 )
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
GEI4 $368
line 624
;624:      {
line 625
;625:        tb->nodes = CG_DestroyBeamNode( i );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 CG_DestroyBeamNode
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
ADDRLP4 60
INDIRP4
ASGNP4
line 627
;626:
;627:        if( !tb->nodes )
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $370
line 628
;628:        {
line 629
;629:          tb->valid = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 10768
ADDP4
CNSTI4 0
ASGNI4
line 630
;630:          return;
ADDRGP4 $323
JUMPV
LABELV $370
line 634
;631:        }
;632:
;633:        // if the ts has been destroyed, stop creating new nodes
;634:        if( ts->destroyTime <= 0 )
ADDRLP4 4
INDIRP4
CNSTI4 2764
ADDP4
INDIRI4
CNSTI4 0
GTI4 $369
line 635
;635:          CG_PrependBeamNode( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PrependBeamNode
CALLP4
pop
line 636
;636:      }
ADDRGP4 $369
JUMPV
LABELV $368
line 637
;637:      else if( i->timeLeft >= 0 && i->prev )
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
LTI4 $374
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $374
line 638
;638:      {
line 642
;639:        vec3_t  dir;
;640:        float   length;
;641:
;642:        VectorSubtract( i->refPosition, i->prev->refPosition, dir );
ADDRLP4 84
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 64
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 84
INDIRP4
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 64+4
ADDRLP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96
CNSTI4 8
ASGNI4
ADDRLP4 64+8
ADDRLP4 0
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 643
;643:        length = VectorNormalize( dir ) *
ADDRLP4 64
ARGP4
ADDRLP4 100
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 76
ADDRLP4 100
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
DIVF4
MULF4
ASGNF4
line 646
;644:          ( (float)i->timeLeft / (float)tb->class->segmentTime );
;645:
;646:        VectorMA( i->prev->refPosition, length, dir, i->position );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
INDIRF4
ADDRLP4 64
INDIRF4
ADDRLP4 76
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 64+4
INDIRF4
ADDRLP4 76
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 64+8
INDIRF4
ADDRLP4 76
INDIRF4
MULF4
ADDF4
ASGNF4
line 647
;647:      }
LABELV $374
LABELV $369
line 648
;648:    }
LABELV $366
line 650
;649:
;650:    if( tb->nodes )
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $380
line 651
;651:    {
line 652
;652:      if( !CG_AttachmentPoint( &ts->frontAttachment, tb->nodes->refPosition ) )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 CG_AttachmentPoint
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $382
line 653
;653:        CG_DestroyTrailSystem( &ts );
ADDRLP4 4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $382
line 655
;654:
;655:      VectorCopy( tb->nodes->refPosition, tb->nodes->position );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 10760
ADDP4
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 60
INDIRP4
INDIRB
ASGNB 12
line 656
;656:    }
LABELV $380
line 657
;657:  }
LABELV $364
LABELV $342
line 659
;658:
;659:  CG_ApplyJitters( tb );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_ApplyJitters
CALLV
pop
line 660
;660:}
LABELV $323
endproc CG_UpdateBeam 116 8
proc CG_ParseTrailBeamColor 20 8
line 668
;661:
;662:/*
;663:===============
;664:CG_ParseTrailBeamColor
;665:===============
;666:*/
;667:static qboolean CG_ParseTrailBeamColor( byte *c, char **text_p )
;668:{
line 672
;669:  char  *token;
;670:  int   i;
;671:
;672:  for( i = 0; i <= 2; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $385
line 673
;673:  {
line 674
;674:    token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 676
;675:
;676:    if( !Q_stricmp( token, "" ) )
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $389
line 677
;677:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $384
JUMPV
LABELV $389
line 679
;678:
;679:    c[ i ] = (int)( (float)0xFF * atof_neg( token, qfalse ) );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTF4 1132396544
ADDRLP4 16
INDIRF4
MULF4
CVFI4 4
CVIU4 4
CVUU1 4
ASGNU1
line 680
;680:  }
LABELV $386
line 672
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LEI4 $385
line 682
;681:
;682:  return qtrue;
CNSTI4 1
RETI4
LABELV $384
endproc CG_ParseTrailBeamColor 20 8
proc CG_ParseTrailBeam 88 12
line 693
;683:}
;684:
;685:/*
;686:===============
;687:CG_ParseTrailBeam
;688:
;689:Parse a trail beam
;690:===============
;691:*/
;692:static qboolean CG_ParseTrailBeam( baseTrailBeam_t *btb, char **text_p )
;693:{
ADDRGP4 $394
JUMPV
LABELV $393
line 698
;694:  char  *token;
;695:
;696:  // read optional parameters
;697:  while( 1 )
;698:  {
line 699
;699:    token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 701
;700:
;701:    if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $396
line 702
;702:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $392
JUMPV
LABELV $396
line 704
;703:
;704:    if( !Q_stricmp( token, "segments" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $400
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $398
line 705
;705:    {
line 706
;706:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 707
;707:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $401
line 708
;708:        break;
ADDRGP4 $395
JUMPV
LABELV $401
line 710
;709:
;710:      btb->numSegments = atoi_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 atoi_neg
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ASGNI4
line 712
;711:
;712:      if( btb->numSegments >= MAX_TRAIL_BEAM_NODES )
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 128
LTI4 $394
line 713
;713:      {
line 714
;714:        btb->numSegments = MAX_TRAIL_BEAM_NODES - 1;
ADDRFP4 0
INDIRP4
CNSTI4 127
ASGNI4
line 715
;715:        CG_Printf( S_COLOR_YELLOW "WARNING: too many segments in trail beam\n" );
ADDRGP4 $405
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 716
;716:      }
line 717
;717:      continue;
ADDRGP4 $394
JUMPV
LABELV $398
line 719
;718:    }
;719:    else if( !Q_stricmp( token, "width" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $408
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $406
line 720
;720:    {
line 721
;721:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 722
;722:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $409
line 723
;723:        break;
ADDRGP4 $395
JUMPV
LABELV $409
line 725
;724:
;725:      btb->frontWidth = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 727
;726:
;727:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
line 728
;728:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $411
line 729
;729:        break;
ADDRGP4 $395
JUMPV
LABELV $411
line 731
;730:
;731:      if( !Q_stricmp( token, "-" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $415
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $413
line 732
;732:        btb->backWidth = btb->frontWidth;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $394
JUMPV
LABELV $413
line 734
;733:      else
;734:        btb->backWidth = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 48
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 735
;735:      continue;
ADDRGP4 $394
JUMPV
LABELV $406
line 737
;736:    }
;737:    else if( !Q_stricmp( token, "alpha" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $418
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $416
line 738
;738:    {
line 739
;739:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
ASGNP4
line 740
;740:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $419
line 741
;741:        break;
ADDRGP4 $395
JUMPV
LABELV $419
line 743
;742:
;743:      btb->frontAlpha = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 32
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 745
;744:
;745:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ASGNP4
line 746
;746:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $421
line 747
;747:        break;
ADDRGP4 $395
JUMPV
LABELV $421
line 749
;748:
;749:      if( !Q_stricmp( token, "-" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $415
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $423
line 750
;750:        btb->backAlpha = btb->frontAlpha;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $394
JUMPV
LABELV $423
line 752
;751:      else
;752:        btb->backAlpha = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 52
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 52
INDIRF4
ASGNF4
line 753
;753:      continue;
ADDRGP4 $394
JUMPV
LABELV $416
line 755
;754:    }
;755:    else if( !Q_stricmp( token, "color" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $427
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $425
line 756
;756:    {
line 757
;757:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 758
;758:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $428
line 759
;759:        break;
ADDRGP4 $395
JUMPV
LABELV $428
line 761
;760:
;761:      if( !Q_stricmp( token, "{" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $432
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $430
line 762
;762:      {
line 763
;763:        if( !CG_ParseTrailBeamColor( btb->frontColor, text_p ) )
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_ParseTrailBeamColor
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $433
line 764
;764:          break;
ADDRGP4 $395
JUMPV
LABELV $433
line 766
;765:
;766:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 767
;767:        if( Q_stricmp( token, "}" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $437
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $435
line 768
;768:        {
line 769
;769:          CG_Printf( S_COLOR_RED "ERROR: missing '}'\n" );
ADDRGP4 $438
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 770
;770:          break;
ADDRGP4 $395
JUMPV
LABELV $435
line 773
;771:        }
;772:
;773:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 52
INDIRP4
ASGNP4
line 774
;774:        if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $439
line 775
;775:          break;
ADDRGP4 $395
JUMPV
LABELV $439
line 777
;776:
;777:        if( !Q_stricmp( token, "-" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $415
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $441
line 778
;778:        {
line 779
;779:          btb->backColor[ 0 ] = btb->frontColor[ 0 ];
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 23
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
INDIRU1
ASGNU1
line 780
;780:          btb->backColor[ 1 ] = btb->frontColor[ 1 ];
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 21
ADDP4
INDIRU1
ASGNU1
line 781
;781:          btb->backColor[ 2 ] = btb->frontColor[ 2 ];
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 25
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 22
ADDP4
INDIRU1
ASGNU1
line 782
;782:        }
ADDRGP4 $394
JUMPV
LABELV $441
line 783
;783:        else if( !Q_stricmp( token, "{" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $432
ARGP4
ADDRLP4 64
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $443
line 784
;784:        {
line 785
;785:          if( !CG_ParseTrailBeamColor( btb->backColor, text_p ) )
ADDRFP4 0
INDIRP4
CNSTI4 23
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 CG_ParseTrailBeamColor
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $445
line 786
;786:            break;
ADDRGP4 $395
JUMPV
LABELV $445
line 788
;787:
;788:          token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
ASGNP4
line 789
;789:          if( Q_stricmp( token, "}" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $437
ARGP4
ADDRLP4 76
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $394
line 790
;790:          {
line 791
;791:            CG_Printf( S_COLOR_RED "ERROR: missing '}'\n" );
ADDRGP4 $438
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 792
;792:            break;
ADDRGP4 $395
JUMPV
line 794
;793:          }
;794:        }
LABELV $443
line 796
;795:        else
;796:        {
line 797
;797:          CG_Printf( S_COLOR_RED "ERROR: missing '{'\n" );
ADDRGP4 $449
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 798
;798:          break;
ADDRGP4 $395
JUMPV
line 800
;799:        }
;800:      }
LABELV $430
line 802
;801:      else
;802:      {
line 803
;803:        CG_Printf( S_COLOR_RED "ERROR: missing '{'\n" );
ADDRGP4 $449
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 804
;804:        break;
ADDRGP4 $395
JUMPV
line 807
;805:      }
;806:
;807:      continue;
LABELV $425
line 809
;808:    }
;809:    else if( !Q_stricmp( token, "segmentTime" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $452
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $450
line 810
;810:    {
line 811
;811:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
line 812
;812:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $453
line 813
;813:        break;
ADDRGP4 $395
JUMPV
LABELV $453
line 815
;814:
;815:      btb->segmentTime = atoi_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 atoi_neg
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 816
;816:      continue;
ADDRGP4 $394
JUMPV
LABELV $450
line 818
;817:    }
;818:    else if( !Q_stricmp( token, "fadeOutTime" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $457
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $455
line 819
;819:    {
line 820
;820:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ASGNP4
line 821
;821:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $458
line 822
;822:        break;
ADDRGP4 $395
JUMPV
LABELV $458
line 824
;823:
;824:      btb->fadeOutTime = atoi_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 atoi_neg
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 825
;825:      continue;
ADDRGP4 $394
JUMPV
LABELV $455
line 827
;826:    }
;827:    else if( !Q_stricmp( token, "shader" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $462
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $460
line 828
;828:    {
line 829
;829:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 830
;830:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $463
line 831
;831:        break;
ADDRGP4 $395
JUMPV
LABELV $463
line 833
;832:
;833:      Q_strncpyz( btb->shaderName, token, MAX_QPATH );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 835
;834:
;835:      continue;
ADDRGP4 $394
JUMPV
LABELV $460
line 837
;836:    }
;837:    else if( !Q_stricmp( token, "textureType" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $467
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $465
line 838
;838:    {
line 839
;839:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 840
;840:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $468
line 841
;841:        break;
ADDRGP4 $395
JUMPV
LABELV $468
line 843
;842:
;843:      if( !Q_stricmp( token, "stretch" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $470
line 844
;844:      {
line 845
;845:        btb->textureType = TBTT_STRETCH;
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 0
ASGNI4
line 847
;846:
;847:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
ASGNP4
line 848
;848:        if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $473
line 849
;849:          break;
ADDRGP4 $395
JUMPV
LABELV $473
line 851
;850:
;851:        btb->frontTextureCoord = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 64
INDIRF4
ASGNF4
line 853
;852:
;853:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 854
;854:        if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 72
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $475
line 855
;855:          break;
ADDRGP4 $395
JUMPV
LABELV $475
line 857
;856:
;857:        btb->backTextureCoord = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 76
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 76
INDIRF4
ASGNF4
line 858
;858:      }
ADDRGP4 $394
JUMPV
LABELV $470
line 859
;859:      else if( !Q_stricmp( token, "repeat" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $479
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $477
line 860
;860:      {
line 861
;861:        btb->textureType = TBTT_REPEAT;
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 863
;862:
;863:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 60
INDIRP4
ASGNP4
line 864
;864:        if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 64
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $480
line 865
;865:          break;
ADDRGP4 $395
JUMPV
LABELV $480
line 867
;866:
;867:        if( !Q_stricmp( token, "front" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $484
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $482
line 868
;868:          btb->clampToBack = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $483
JUMPV
LABELV $482
line 869
;869:        else if( !Q_stricmp( token, "back" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $487
ARGP4
ADDRLP4 72
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $485
line 870
;870:          btb->clampToBack = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $486
JUMPV
LABELV $485
line 872
;871:        else
;872:        {
line 873
;873:          CG_Printf( S_COLOR_RED "ERROR: unknown textureType clamp \"%s\"\n", token );
ADDRGP4 $488
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 874
;874:          break;
ADDRGP4 $395
JUMPV
LABELV $486
LABELV $483
line 877
;875:        }
;876:
;877:        token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 76
INDIRP4
ASGNP4
line 878
;878:        if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $489
line 879
;879:          break;
ADDRGP4 $395
JUMPV
LABELV $489
line 881
;880:
;881:        btb->repeatLength = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 84
INDIRF4
ASGNF4
line 882
;882:      }
ADDRGP4 $394
JUMPV
LABELV $477
line 884
;883:      else
;884:      {
line 885
;885:        CG_Printf( S_COLOR_RED "ERROR: unknown textureType \"%s\"\n", token );
ADDRGP4 $491
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 886
;886:        break;
ADDRGP4 $395
JUMPV
line 889
;887:      }
;888:
;889:      continue;
LABELV $465
line 891
;890:    }
;891:    else if( !Q_stricmp( token, "realLight" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $494
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $492
line 892
;892:    {
line 893
;893:      btb->realLight = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTI4 1
ASGNI4
line 895
;894:
;895:      continue;
ADDRGP4 $394
JUMPV
LABELV $492
line 897
;896:    }
;897:    else if( !Q_stricmp( token, "jitter" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $497
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $495
line 898
;898:    {
line 899
;899:      if( btb->numJitters == MAX_TRAIL_BEAM_JITTERS )
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 4
NEI4 $498
line 900
;900:      {
line 901
;901:        CG_Printf( S_COLOR_RED "ERROR: too many jitters\n", token );
ADDRGP4 $500
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 902
;902:        break;
ADDRGP4 $395
JUMPV
LABELV $498
line 905
;903:      }
;904:
;905:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 52
INDIRP4
ASGNP4
line 906
;906:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $501
line 907
;907:        break;
ADDRGP4 $395
JUMPV
LABELV $501
line 909
;908:
;909:      btb->jitters[ btb->numJitters ].magnitude = atof_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 60
ADDRGP4 atof_neg
CALLF4
ASGNF4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 64
INDIRP4
CNSTI4 132
ADDP4
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
line 911
;910:
;911:      token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 912
;912:      if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 72
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $503
line 913
;913:        break;
ADDRGP4 $395
JUMPV
LABELV $503
line 915
;914:
;915:      btb->jitters[ btb->numJitters ].period = atoi_neg( token, qfalse );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 76
ADDRGP4 atoi_neg
CALLI4
ASGNI4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 80
INDIRP4
CNSTI4 132
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 917
;916:
;917:      btb->numJitters++;
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 919
;918:
;919:      continue;
ADDRGP4 $394
JUMPV
LABELV $495
line 921
;920:    }
;921:    else if( !Q_stricmp( token, "jitterAttachments" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $507
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $505
line 922
;922:    {
line 923
;923:      btb->jitterAttachments = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 1
ASGNI4
line 925
;924:
;925:      continue;
ADDRGP4 $394
JUMPV
LABELV $505
line 927
;926:    }
;927:    else if( !Q_stricmp( token, "}" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $437
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $508
line 928
;928:      return qtrue; //reached the end of this trail beam
CNSTI4 1
RETI4
ADDRGP4 $392
JUMPV
LABELV $508
line 930
;929:    else
;930:    {
line 931
;931:      CG_Printf( S_COLOR_RED "ERROR: unknown token '%s' in trail beam\n", token );
ADDRGP4 $510
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 932
;932:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $392
JUMPV
LABELV $394
line 697
ADDRGP4 $393
JUMPV
LABELV $395
line 936
;933:    }
;934:  }
;935:
;936:  return qfalse;
CNSTI4 0
RETI4
LABELV $392
endproc CG_ParseTrailBeam 88 12
proc CG_InitialiseBaseTrailBeam 16 12
line 945
;937:}
;938:
;939:/*
;940:===============
;941:CG_InitialiseBaseTrailBeam
;942:===============
;943:*/
;944:static void CG_InitialiseBaseTrailBeam( baseTrailBeam_t *btb )
;945:{
line 946
;946:  memset( btb, 0, sizeof( baseTrailBeam_t ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 168
ARGI4
ADDRGP4 memset
CALLP4
pop
line 948
;947:
;948:  btb->numSegments = 1;
ADDRFP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 949
;949:  btb->frontWidth = btb->backWidth = 1.0f;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 950
;950:  btb->frontAlpha = btb->backAlpha = 1.0f;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 951
;951:  memset( btb->frontColor, 0xFF, sizeof( btb->frontColor ) );
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 255
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 memset
CALLP4
pop
line 952
;952:  memset( btb->backColor, 0xFF, sizeof( btb->backColor ) );
ADDRFP4 0
INDIRP4
CNSTI4 23
ADDP4
ARGP4
CNSTI4 255
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 memset
CALLP4
pop
line 954
;953:
;954:  btb->segmentTime = 100;
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTI4 100
ASGNI4
line 956
;955:
;956:  btb->textureType = TBTT_STRETCH;
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 0
ASGNI4
line 957
;957:  btb->frontTextureCoord = 0.0f;
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 0
ASGNF4
line 958
;958:  btb->backTextureCoord = 1.0f;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1065353216
ASGNF4
line 959
;959:}
LABELV $511
endproc CG_InitialiseBaseTrailBeam 16 12
proc CG_ParseTrailSystem 32 12
line 969
;960:
;961:/*
;962:===============
;963:CG_ParseTrailSystem
;964:
;965:Parse a trail system section
;966:===============
;967:*/
;968:static qboolean CG_ParseTrailSystem( baseTrailSystem_t *bts, char **text_p, const char *name )
;969:{
ADDRGP4 $514
JUMPV
LABELV $513
line 974
;970:  char *token;
;971:
;972:  // read optional parameters
;973:  while( 1 )
;974:  {
line 975
;975:    token = COM_Parse( text_p );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 977
;976:
;977:    if( !Q_stricmp( token, "" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $516
line 978
;978:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $512
JUMPV
LABELV $516
line 980
;979:
;980:    if( !Q_stricmp( token, "{" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $432
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $518
line 981
;981:    {
line 982
;982:      CG_InitialiseBaseTrailBeam( &baseTrailBeams[ numBaseTrailBeams ] );
CNSTI4 168
ADDRGP4 numBaseTrailBeams
INDIRI4
MULI4
ADDRGP4 baseTrailBeams
ADDP4
ARGP4
ADDRGP4 CG_InitialiseBaseTrailBeam
CALLV
pop
line 984
;983:
;984:      if( !CG_ParseTrailBeam( &baseTrailBeams[ numBaseTrailBeams ], text_p ) )
CNSTI4 168
ADDRGP4 numBaseTrailBeams
INDIRI4
MULI4
ADDRGP4 baseTrailBeams
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 CG_ParseTrailBeam
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $520
line 985
;985:      {
line 986
;986:        CG_Printf( S_COLOR_RED "ERROR: failed to parse trail beam\n" );
ADDRGP4 $522
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 987
;987:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $512
JUMPV
LABELV $520
line 990
;988:      }
;989:
;990:      if( bts->numBeams == MAX_BEAMS_PER_SYSTEM )
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 4
NEI4 $523
line 991
;991:      {
line 992
;992:        CG_Printf( S_COLOR_RED "ERROR: trail system has > %d beams\n", MAX_BEAMS_PER_SYSTEM );
ADDRGP4 $525
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 993
;993:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $512
JUMPV
LABELV $523
line 995
;994:      }
;995:      else if( numBaseTrailBeams == MAX_BASETRAIL_BEAMS )
ADDRGP4 numBaseTrailBeams
INDIRI4
CNSTI4 256
NEI4 $526
line 996
;996:      {
line 997
;997:        CG_Printf( S_COLOR_RED "ERROR: maximum number of trail beams (%d) reached\n",
ADDRGP4 $528
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 999
;998:            MAX_BASETRAIL_BEAMS );
;999:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $512
JUMPV
LABELV $526
line 1002
;1000:      }
;1001:      else
;1002:      {
line 1004
;1003:        //start parsing beams again
;1004:        bts->beams[ bts->numBeams ] = &baseTrailBeams[ numBaseTrailBeams ];
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 64
ADDP4
ADDP4
CNSTI4 168
ADDRGP4 numBaseTrailBeams
INDIRI4
MULI4
ADDRGP4 baseTrailBeams
ADDP4
ASGNP4
line 1005
;1005:        bts->numBeams++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1006
;1006:        numBaseTrailBeams++;
ADDRLP4 28
ADDRGP4 numBaseTrailBeams
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1007
;1007:      }
line 1008
;1008:      continue;
ADDRGP4 $514
JUMPV
LABELV $518
line 1010
;1009:    }
;1010:    else if( !Q_stricmp( token, "thirdPersonOnly" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $531
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $529
line 1011
;1011:      bts->thirdPersonOnly = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $530
JUMPV
LABELV $529
line 1012
;1012:    else if( !Q_stricmp( token, "beam" ) ) //acceptable text
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $534
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $532
line 1013
;1013:      continue;
ADDRGP4 $514
JUMPV
LABELV $532
line 1014
;1014:    else if( !Q_stricmp( token, "}" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $437
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $535
line 1015
;1015:    {
line 1016
;1016:      if( cg_debugTrails.integer >= 1 )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 1
LTI4 $537
line 1017
;1017:        CG_Printf( "Parsed trail system %s\n", name );
ADDRGP4 $540
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $537
line 1019
;1018:
;1019:      return qtrue; //reached the end of this trail system
CNSTI4 1
RETI4
ADDRGP4 $512
JUMPV
LABELV $535
line 1022
;1020:    }
;1021:    else
;1022:    {
line 1023
;1023:      CG_Printf( S_COLOR_RED "ERROR: unknown token '%s' in trail system %s\n", token, bts->name );
ADDRGP4 $541
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1024
;1024:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $512
JUMPV
LABELV $530
line 1026
;1025:    }
;1026:  }
LABELV $514
line 973
ADDRGP4 $513
JUMPV
line 1028
;1027:
;1028:  return qfalse;
CNSTI4 0
RETI4
LABELV $512
endproc CG_ParseTrailSystem 32 12
proc CG_ParseTrailFile 32112 12
line 1039
;1029:}
;1030:
;1031:/*
;1032:===============
;1033:CG_ParseTrailFile
;1034:
;1035:Load the trail systems from a trail file
;1036:===============
;1037:*/
;1038:static qboolean CG_ParseTrailFile( const char *fileName )
;1039:{
line 1046
;1040:  char          *text_p;
;1041:  int           i;
;1042:  int           len;
;1043:  char          *token;
;1044:  char          text[ 32000 ];
;1045:  char          tsName[ MAX_QPATH ];
;1046:  qboolean      tsNameSet = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 1050
;1047:  fileHandle_t  f;
;1048:
;1049:  // load the file
;1050:  len = trap_FS_FOpenFile( fileName, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32084
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 32088
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 32088
INDIRI4
ASGNI4
line 1051
;1051:  if( len <= 0 )
ADDRLP4 80
INDIRI4
CNSTI4 0
GTI4 $543
line 1052
;1052:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $543
line 1054
;1053:
;1054:  if( len >= sizeof( text ) - 1 )
ADDRLP4 80
INDIRI4
CVIU4 4
CNSTU4 31999
LTU4 $545
line 1055
;1055:  {
line 1056
;1056:    CG_Printf( S_COLOR_RED "ERROR: trail file %s too long\n", fileName );
ADDRGP4 $547
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1057
;1057:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $545
line 1060
;1058:  }
;1059:
;1060:  trap_FS_Read( text, len, f );
ADDRLP4 84
ARGP4
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 32084
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 1061
;1061:  text[ len ] = 0;
ADDRLP4 80
INDIRI4
ADDRLP4 84
ADDP4
CNSTI1 0
ASGNI1
line 1062
;1062:  trap_FS_FCloseFile( f );
ADDRLP4 32084
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 1065
;1063:
;1064:  // parse the text
;1065:  text_p = text;
ADDRLP4 76
ADDRLP4 84
ASGNP4
ADDRGP4 $549
JUMPV
LABELV $548
line 1069
;1066:
;1067:  // read optional parameters
;1068:  while( 1 )
;1069:  {
line 1070
;1070:    token = COM_Parse( &text_p );
ADDRLP4 76
ARGP4
ADDRLP4 32092
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 68
ADDRLP4 32092
INDIRP4
ASGNP4
line 1072
;1071:
;1072:    if( !Q_stricmp( token, "" ) )
ADDRLP4 68
INDIRP4
ARGP4
ADDRGP4 $391
ARGP4
ADDRLP4 32096
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32096
INDIRI4
CNSTI4 0
NEI4 $551
line 1073
;1073:      break;
ADDRGP4 $550
JUMPV
LABELV $551
line 1075
;1074:
;1075:    if( !Q_stricmp( token, "{" ) )
ADDRLP4 68
INDIRP4
ARGP4
ADDRGP4 $432
ARGP4
ADDRLP4 32100
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32100
INDIRI4
CNSTI4 0
NEI4 $553
line 1076
;1076:    {
line 1077
;1077:      if( tsNameSet )
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $555
line 1078
;1078:      {
line 1080
;1079:        //check for name space clashes
;1080:        for( i = 0; i < numBaseTrailSystems; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $560
JUMPV
LABELV $557
line 1081
;1081:        {
line 1082
;1082:          if( !Q_stricmp( baseTrailSystems[ i ].name, tsName ) )
CNSTI4 92
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 baseTrailSystems
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 32104
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32104
INDIRI4
CNSTI4 0
NEI4 $561
line 1083
;1083:          {
line 1084
;1084:            CG_Printf( S_COLOR_RED "ERROR: a trail system is already named %s\n", tsName );
ADDRGP4 $563
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1085
;1085:            return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $561
line 1087
;1086:          }
;1087:        }
LABELV $558
line 1080
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $560
ADDRLP4 0
INDIRI4
ADDRGP4 numBaseTrailSystems
INDIRI4
LTI4 $557
line 1089
;1088:
;1089:        Q_strncpyz( baseTrailSystems[ numBaseTrailSystems ].name, tsName, MAX_QPATH );
CNSTI4 92
ADDRGP4 numBaseTrailSystems
INDIRI4
MULI4
ADDRGP4 baseTrailSystems
ADDP4
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1091
;1090:
;1091:        if( !CG_ParseTrailSystem( &baseTrailSystems[ numBaseTrailSystems ], &text_p, tsName ) )
CNSTI4 92
ADDRGP4 numBaseTrailSystems
INDIRI4
MULI4
ADDRGP4 baseTrailSystems
ADDP4
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 32104
ADDRGP4 CG_ParseTrailSystem
CALLI4
ASGNI4
ADDRLP4 32104
INDIRI4
CNSTI4 0
NEI4 $564
line 1092
;1092:        {
line 1093
;1093:          CG_Printf( S_COLOR_RED "ERROR: %s: failed to parse trail system %s\n", fileName, tsName );
ADDRGP4 $566
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1094
;1094:          return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $564
line 1098
;1095:        }
;1096:
;1097:        //start parsing trail systems again
;1098:        tsNameSet = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 1100
;1099:
;1100:        if( numBaseTrailSystems == MAX_BASETRAIL_SYSTEMS )
ADDRGP4 numBaseTrailSystems
INDIRI4
CNSTI4 64
NEI4 $567
line 1101
;1101:        {
line 1102
;1102:          CG_Printf( S_COLOR_RED "ERROR: maximum number of trail systems (%d) reached\n",
ADDRGP4 $569
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 1104
;1103:              MAX_BASETRAIL_SYSTEMS );
;1104:          return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $567
line 1107
;1105:        }
;1106:        else
;1107:          numBaseTrailSystems++;
ADDRLP4 32108
ADDRGP4 numBaseTrailSystems
ASGNP4
ADDRLP4 32108
INDIRP4
ADDRLP4 32108
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1109
;1108:
;1109:        continue;
ADDRGP4 $549
JUMPV
LABELV $555
line 1112
;1110:      }
;1111:      else
;1112:      {
line 1113
;1113:        CG_Printf( S_COLOR_RED "ERROR: unamed trail system\n" );
ADDRGP4 $570
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1114
;1114:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $553
line 1118
;1115:      }
;1116:    }
;1117:
;1118:    if( !tsNameSet )
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $571
line 1119
;1119:    {
line 1120
;1120:      Q_strncpyz( tsName, token, sizeof( tsName ) );
ADDRLP4 4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1121
;1121:      tsNameSet = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
line 1122
;1122:    }
ADDRGP4 $572
JUMPV
LABELV $571
line 1124
;1123:    else
;1124:    {
line 1125
;1125:      CG_Printf( S_COLOR_RED "ERROR: trail system already named\n" );
ADDRGP4 $573
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1126
;1126:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $542
JUMPV
LABELV $572
line 1128
;1127:    }
;1128:  }
LABELV $549
line 1068
ADDRGP4 $548
JUMPV
LABELV $550
line 1130
;1129:
;1130:  return qtrue;
CNSTI4 1
RETI4
LABELV $542
endproc CG_ParseTrailFile 32112 12
export CG_LoadTrailSystems
proc CG_LoadTrailSystems 8280 16
line 1141
;1131:}
;1132:
;1133:/*
;1134:===============
;1135:CG_LoadTrailSystems
;1136:
;1137:Load trail system templates
;1138:===============
;1139:*/
;1140:void CG_LoadTrailSystems( void )
;1141:{
line 1148
;1142:  int   i, numFiles, fileLen;
;1143:  char  fileList[ MAX_TRAIL_FILES * MAX_QPATH ];
;1144:  char  fileName[ MAX_QPATH ];
;1145:  char  *filePtr;
;1146:
;1147:  //clear out the old
;1148:  numBaseTrailSystems = 0;
ADDRGP4 numBaseTrailSystems
CNSTI4 0
ASGNI4
line 1149
;1149:  numBaseTrailBeams = 0;
ADDRGP4 numBaseTrailBeams
CNSTI4 0
ASGNI4
line 1151
;1150:
;1151:  for( i = 0; i < MAX_BASETRAIL_SYSTEMS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $575
line 1152
;1152:  {
line 1153
;1153:    baseTrailSystem_t  *bts = &baseTrailSystems[ i ];
ADDRLP4 8272
CNSTI4 92
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 baseTrailSystems
ADDP4
ASGNP4
line 1154
;1154:    memset( bts, 0, sizeof( baseTrailSystem_t ) );
ADDRLP4 8272
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 92
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1155
;1155:  }
LABELV $576
line 1151
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $575
line 1157
;1156:
;1157:  for( i = 0; i < MAX_BASETRAIL_BEAMS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $579
line 1158
;1158:  {
line 1159
;1159:    baseTrailBeam_t  *btb = &baseTrailBeams[ i ];
ADDRLP4 8272
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 baseTrailBeams
ADDP4
ASGNP4
line 1160
;1160:    memset( btb, 0, sizeof( baseTrailBeam_t ) );
ADDRLP4 8272
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 168
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1161
;1161:  }
LABELV $580
line 1157
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 256
LTI4 $579
line 1164
;1162:
;1163:  //and bring in the new
;1164:  numFiles = trap_FS_GetFileList( "scripts", ".trail",
ADDRGP4 $583
ARGP4
ADDRGP4 $584
ARGP4
ADDRLP4 80
ARGP4
CNSTI4 8192
ARGI4
ADDRLP4 8272
ADDRGP4 trap_FS_GetFileList
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 8272
INDIRI4
ASGNI4
line 1166
;1165:      fileList, MAX_TRAIL_FILES * MAX_QPATH );
;1166:  filePtr = fileList;
ADDRLP4 68
ADDRLP4 80
ASGNP4
line 1168
;1167:
;1168:  for( i = 0; i < numFiles; i++, filePtr += fileLen + 1 )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $588
JUMPV
LABELV $585
line 1169
;1169:  {
line 1170
;1170:    fileLen = strlen( filePtr );
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 8276
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 8276
INDIRI4
ASGNI4
line 1171
;1171:    strcpy( fileName, "scripts/" );
ADDRLP4 4
ARGP4
ADDRGP4 $589
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1172
;1172:    strcat( fileName, filePtr );
ADDRLP4 4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 1173
;1173:    CG_Printf( "...loading '%s'\n", fileName );
ADDRGP4 $590
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1174
;1174:    CG_ParseTrailFile( fileName );
ADDRLP4 4
ARGP4
ADDRGP4 CG_ParseTrailFile
CALLI4
pop
line 1175
;1175:  }
LABELV $586
line 1168
ADDRLP4 8276
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 8276
INDIRI4
ADDI4
ASGNI4
ADDRLP4 68
ADDRLP4 72
INDIRI4
ADDRLP4 8276
INDIRI4
ADDI4
ADDRLP4 68
INDIRP4
ADDP4
ASGNP4
LABELV $588
ADDRLP4 0
INDIRI4
ADDRLP4 76
INDIRI4
LTI4 $585
line 1176
;1176:}
LABELV $574
endproc CG_LoadTrailSystems 8280 16
export CG_RegisterTrailSystem
proc CG_RegisterTrailSystem 28 8
line 1186
;1177:
;1178:/*
;1179:===============
;1180:CG_RegisterTrailSystem
;1181:
;1182:Load the media that a trail system needs
;1183:===============
;1184:*/
;1185:qhandle_t CG_RegisterTrailSystem( char *name )
;1186:{
line 1191
;1187:  int               i, j;
;1188:  baseTrailSystem_t *bts;
;1189:  baseTrailBeam_t   *btb;
;1190:
;1191:  for( i = 0; i < MAX_BASETRAIL_SYSTEMS; i++ )
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $592
line 1192
;1192:  {
line 1193
;1193:    bts = &baseTrailSystems[ i ];
ADDRLP4 8
CNSTI4 92
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 baseTrailSystems
ADDP4
ASGNP4
line 1195
;1194:
;1195:    if( !Q_stricmp( bts->name, name ) )
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $596
line 1196
;1196:    {
line 1198
;1197:      //already registered
;1198:      if( bts->registered )
ADDRLP4 8
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $598
line 1199
;1199:        return i + 1;
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
RETI4
ADDRGP4 $591
JUMPV
LABELV $598
line 1201
;1200:
;1201:      for( j = 0; j < bts->numBeams; j++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $603
JUMPV
LABELV $600
line 1202
;1202:      {
line 1203
;1203:        btb = bts->beams[ j ];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 64
ADDP4
ADDP4
INDIRP4
ASGNP4
line 1205
;1204:
;1205:        btb->shader = trap_R_RegisterShader( btb->shaderName );
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1206
;1206:      }
LABELV $601
line 1201
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $603
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
LTI4 $600
line 1208
;1207:
;1208:      if( cg_debugTrails.integer >= 1 )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 1
LTI4 $604
line 1209
;1209:        CG_Printf( "Registered trail system %s\n", name );
ADDRGP4 $607
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $604
line 1211
;1210:
;1211:      bts->registered = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 1214
;1212:
;1213:      //avoid returning 0
;1214:      return i + 1;
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
RETI4
ADDRGP4 $591
JUMPV
LABELV $596
line 1216
;1215:    }
;1216:  }
LABELV $593
line 1191
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 64
LTI4 $592
line 1218
;1217:
;1218:  CG_Printf( S_COLOR_RED "ERROR: failed to register trail system %s\n", name );
ADDRGP4 $608
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1219
;1219:  return 0;
CNSTI4 0
RETI4
LABELV $591
endproc CG_RegisterTrailSystem 28 8
proc CG_SpawnNewTrailBeam 12 12
line 1232
;1220:}
;1221:
;1222:
;1223:/*
;1224:===============
;1225:CG_SpawnNewTrailBeam
;1226:
;1227:Allocate a new trail beam
;1228:===============
;1229:*/
;1230:static trailBeam_t *CG_SpawnNewTrailBeam( baseTrailBeam_t *btb,
;1231:    trailSystem_t *parent )
;1232:{
line 1234
;1233:  int           i;
;1234:  trailBeam_t   *tb = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1235
;1235:  trailSystem_t *ts = parent;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
line 1237
;1236:
;1237:  for( i = 0; i < MAX_TRAIL_BEAMS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $610
line 1238
;1238:  {
line 1239
;1239:    tb = &trailBeams[ i ];
ADDRLP4 0
CNSTI4 10788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 trailBeams
ADDP4
ASGNP4
line 1241
;1240:
;1241:    if( !tb->valid )
ADDRLP4 0
INDIRP4
CNSTI4 10768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $614
line 1242
;1242:    {
line 1243
;1243:      memset( tb, 0, sizeof( trailBeam_t ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 10788
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1246
;1244:
;1245:      //found a free slot
;1246:      tb->class = btb;
ADDRLP4 0
INDIRP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1247
;1247:      tb->parent = ts;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 1249
;1248:
;1249:      tb->valid = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 10768
ADDP4
CNSTI4 1
ASGNI4
line 1251
;1250:
;1251:      if( cg_debugTrails.integer >= 1 )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 1
LTI4 $612
line 1252
;1252:        CG_Printf( "TB %s created\n", ts->class->name );
ADDRGP4 $619
ARGP4
ADDRLP4 8
INDIRP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1254
;1253:
;1254:      break;
ADDRGP4 $612
JUMPV
LABELV $614
line 1256
;1255:    }
;1256:  }
LABELV $611
line 1237
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 128
LTI4 $610
LABELV $612
line 1258
;1257:
;1258:  return tb;
ADDRLP4 0
INDIRP4
RETP4
LABELV $609
endproc CG_SpawnNewTrailBeam 12 12
export CG_SpawnNewTrailSystem
proc CG_SpawnNewTrailSystem 16 12
line 1270
;1259:}
;1260:
;1261:
;1262:/*
;1263:===============
;1264:CG_SpawnNewTrailSystem
;1265:
;1266:Spawns a new trail system
;1267:===============
;1268:*/
;1269:trailSystem_t *CG_SpawnNewTrailSystem( qhandle_t psHandle )
;1270:{
line 1272
;1271:  int               i, j;
;1272:  trailSystem_t     *ts = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1273
;1273:  baseTrailSystem_t *bts = &baseTrailSystems[ psHandle - 1 ];
ADDRLP4 4
CNSTI4 92
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 baseTrailSystems-92
ADDP4
ASGNP4
line 1275
;1274:
;1275:  if( !bts->registered )
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
NEI4 $622
line 1276
;1276:  {
line 1277
;1277:    CG_Printf( S_COLOR_RED "ERROR: a trail system has not been registered yet\n" );
ADDRGP4 $624
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1278
;1278:    return NULL;
CNSTP4 0
RETP4
ADDRGP4 $620
JUMPV
LABELV $622
line 1281
;1279:  }
;1280:
;1281:  for( i = 0; i < MAX_TRAIL_SYSTEMS; i++ )
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $625
line 1282
;1282:  {
line 1283
;1283:    ts = &trailSystems[ i ];
ADDRLP4 8
CNSTI4 2772
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 trailSystems
ADDP4
ASGNP4
line 1285
;1284:
;1285:    if( !ts->valid )
ADDRLP4 8
INDIRP4
CNSTI4 2768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $629
line 1286
;1286:    {
line 1287
;1287:      memset( ts, 0, sizeof( trailSystem_t ) );
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 2772
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1290
;1288:
;1289:      //found a free slot
;1290:      ts->class = bts;
ADDRLP4 8
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 1292
;1291:
;1292:      ts->valid = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 2768
ADDP4
CNSTI4 1
ASGNI4
line 1293
;1293:      ts->destroyTime = -1;
ADDRLP4 8
INDIRP4
CNSTI4 2764
ADDP4
CNSTI4 -1
ASGNI4
line 1295
;1294:
;1295:      for( j = 0; j < bts->numBeams; j++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $634
JUMPV
LABELV $631
line 1296
;1296:        CG_SpawnNewTrailBeam( bts->beams[ j ], ts );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 CG_SpawnNewTrailBeam
CALLP4
pop
LABELV $632
line 1295
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $634
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
LTI4 $631
line 1298
;1297:
;1298:      if( cg_debugTrails.integer >= 1 )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 1
LTI4 $627
line 1299
;1299:        CG_Printf( "TS %s created\n", bts->name );
ADDRGP4 $638
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1301
;1300:
;1301:      break;
ADDRGP4 $627
JUMPV
LABELV $629
line 1303
;1302:    }
;1303:  }
LABELV $626
line 1281
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 32
LTI4 $625
LABELV $627
line 1305
;1304:
;1305:  return ts;
ADDRLP4 8
INDIRP4
RETP4
LABELV $620
endproc CG_SpawnNewTrailSystem 16 12
export CG_DestroyTrailSystem
proc CG_DestroyTrailSystem 20 8
line 1316
;1306:}
;1307:
;1308:/*
;1309:===============
;1310:CG_DestroyTrailSystem
;1311:
;1312:Destroy a trail system
;1313:===============
;1314:*/
;1315:void CG_DestroyTrailSystem( trailSystem_t **ts )
;1316:{
line 1317
;1317:  (*ts)->destroyTime = cg.time;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 2764
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1319
;1318:
;1319:  if( CG_Attached( &(*ts)->frontAttachment ) &&
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $641
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_Attached
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $641
line 1321
;1320:      !CG_Attached( &(*ts)->backAttachment ) )
;1321:  {
line 1325
;1322:    vec3_t v;
;1323:
;1324:    // attach the trail head to a static point
;1325:    CG_AttachmentPoint( &(*ts)->frontAttachment, v );
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_AttachmentPoint
CALLI4
pop
line 1326
;1326:    CG_SetAttachmentPoint( &(*ts)->frontAttachment, v );
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_SetAttachmentPoint
CALLV
pop
line 1327
;1327:    CG_AttachToPoint( &(*ts)->frontAttachment );
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToPoint
CALLV
pop
line 1329
;1328:
;1329:    (*ts)->frontAttachment.centValid = qfalse; // a bit naughty
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 1330
;1330:  }
LABELV $641
line 1332
;1331:
;1332:  ts = NULL;
ADDRFP4 0
CNSTP4 0
ASGNP4
line 1333
;1333:}
LABELV $639
endproc CG_DestroyTrailSystem 20 8
export CG_IsTrailSystemValid
proc CG_IsTrailSystemValid 16 0
line 1343
;1334:
;1335:/*
;1336:===============
;1337:CG_IsTrailSystemValid
;1338:
;1339:Test a trail system for validity
;1340:===============
;1341:*/
;1342:qboolean CG_IsTrailSystemValid( trailSystem_t **ts )
;1343:{
line 1344
;1344:  if( *ts == NULL || ( *ts && !(*ts)->valid ) )
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
CNSTU4 0
ASGNU4
ADDRLP4 4
INDIRU4
ADDRLP4 8
INDIRU4
EQU4 $646
ADDRLP4 4
INDIRU4
ADDRLP4 8
INDIRU4
EQU4 $644
ADDRLP4 0
INDIRP4
CNSTI4 2768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $644
LABELV $646
line 1345
;1345:  {
line 1346
;1346:    if( *ts && !(*ts)->valid )
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $647
ADDRLP4 12
INDIRP4
CNSTI4 2768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $647
line 1347
;1347:      *ts = NULL;
ADDRFP4 0
INDIRP4
CNSTP4 0
ASGNP4
LABELV $647
line 1349
;1348:
;1349:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $643
JUMPV
LABELV $644
line 1352
;1350:  }
;1351:
;1352:  return qtrue;
CNSTI4 1
RETI4
LABELV $643
endproc CG_IsTrailSystemValid 16 0
proc CG_GarbageCollectTrailSystems 36 8
line 1363
;1353:}
;1354:
;1355:/*
;1356:===============
;1357:CG_GarbageCollectTrailSystems
;1358:
;1359:Destroy inactive trail systems
;1360:===============
;1361:*/
;1362:static void CG_GarbageCollectTrailSystems( void )
;1363:{
line 1369
;1364:  int           i, j, count;
;1365:  trailSystem_t *ts;
;1366:  trailBeam_t   *tb;
;1367:  int           centNum;
;1368:
;1369:  for( i = 0; i < MAX_TRAIL_SYSTEMS; i++ )
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $650
line 1370
;1370:  {
line 1371
;1371:    ts = &trailSystems[ i ];
ADDRLP4 8
CNSTI4 2772
ADDRLP4 20
INDIRI4
MULI4
ADDRGP4 trailSystems
ADDP4
ASGNP4
line 1372
;1372:    count = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1375
;1373:
;1374:    //don't bother checking already invalid systems
;1375:    if( !ts->valid )
ADDRLP4 8
INDIRP4
CNSTI4 2768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $654
line 1376
;1376:      continue;
ADDRGP4 $651
JUMPV
LABELV $654
line 1378
;1377:
;1378:    for( j = 0; j < MAX_TRAIL_BEAMS; j++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $656
line 1379
;1379:    {
line 1380
;1380:      tb = &trailBeams[ j ];
ADDRLP4 4
CNSTI4 10788
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 trailBeams
ADDP4
ASGNP4
line 1382
;1381:
;1382:      if( tb->valid && tb->parent == ts )
ADDRLP4 4
INDIRP4
CNSTI4 10768
ADDP4
INDIRI4
CNSTI4 0
EQI4 $660
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
NEU4 $660
line 1383
;1383:        count++;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $660
line 1384
;1384:    }
LABELV $657
line 1378
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 128
LTI4 $656
line 1386
;1385:
;1386:    if( !count )
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $662
line 1387
;1387:      ts->valid = qfalse;
ADDRLP4 8
INDIRP4
CNSTI4 2768
ADDP4
CNSTI4 0
ASGNI4
LABELV $662
line 1391
;1388:
;1389:    //check systems where the parent cent has left the PVS
;1390:    //( local player entity is always valid )
;1391:    if( ( centNum = CG_AttachmentCentNum( &ts->frontAttachment ) ) >= 0 &&
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 CG_AttachmentCentNum
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
LTI4 $664
ADDRLP4 16
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
EQI4 $664
line 1393
;1392:        centNum != cg.snap->ps.clientNum )
;1393:    {
line 1394
;1394:      trailSystem_t *tempTS = ts;
ADDRLP4 28
ADDRLP4 8
INDIRP4
ASGNP4
line 1396
;1395:
;1396:      if( !cg_entities[ centNum ].valid )
CNSTI4 1724
ADDRLP4 16
INDIRI4
MULI4
ADDRGP4 cg_entities+1712
ADDP4
INDIRI4
CNSTI4 0
NEI4 $667
line 1397
;1397:        CG_DestroyTrailSystem( &tempTS );
ADDRLP4 28
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $667
line 1398
;1398:    }
LABELV $664
line 1400
;1399:
;1400:    if( ( centNum = CG_AttachmentCentNum( &ts->backAttachment ) ) >= 0 &&
ADDRLP4 8
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 CG_AttachmentCentNum
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 28
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
LTI4 $670
ADDRLP4 16
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
EQI4 $670
line 1402
;1401:        centNum != cg.snap->ps.clientNum )
;1402:    {
line 1403
;1403:      trailSystem_t *tempTS = ts;
ADDRLP4 32
ADDRLP4 8
INDIRP4
ASGNP4
line 1405
;1404:
;1405:      if( !cg_entities[ centNum ].valid )
CNSTI4 1724
ADDRLP4 16
INDIRI4
MULI4
ADDRGP4 cg_entities+1712
ADDP4
INDIRI4
CNSTI4 0
NEI4 $673
line 1406
;1406:        CG_DestroyTrailSystem( &tempTS );
ADDRLP4 32
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $673
line 1407
;1407:    }
LABELV $670
line 1409
;1408:
;1409:    if( cg_debugTrails.integer >= 1 && !ts->valid )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 1
LTI4 $676
ADDRLP4 8
INDIRP4
CNSTI4 2768
ADDP4
INDIRI4
CNSTI4 0
NEI4 $676
line 1410
;1410:      CG_Printf( "TS %s garbage collected\n", ts->class->name );
ADDRGP4 $679
ARGP4
ADDRLP4 8
INDIRP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $676
line 1411
;1411:  }
LABELV $651
line 1369
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 32
LTI4 $650
line 1412
;1412:}
LABELV $649
endproc CG_GarbageCollectTrailSystems 36 8
export CG_AddTrails
proc CG_AddTrails 16 12
line 1422
;1413:
;1414:/*
;1415:===============
;1416:CG_AddTrails
;1417:
;1418:Add trails to the scene
;1419:===============
;1420:*/
;1421:void CG_AddTrails( void )
;1422:{
line 1425
;1423:  int           i;
;1424:  trailBeam_t   *tb;
;1425:  int           numTS = 0, numTB = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1428
;1426:
;1427:  //remove expired trail systems
;1428:  CG_GarbageCollectTrailSystems( );
ADDRGP4 CG_GarbageCollectTrailSystems
CALLV
pop
line 1430
;1429:
;1430:  for( i = 0; i < MAX_TRAIL_BEAMS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $681
line 1431
;1431:  {
line 1432
;1432:    tb = &trailBeams[ i ];
ADDRLP4 4
CNSTI4 10788
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 trailBeams
ADDP4
ASGNP4
line 1434
;1433:
;1434:    if( tb->valid )
ADDRLP4 4
INDIRP4
CNSTI4 10768
ADDP4
INDIRI4
CNSTI4 0
EQI4 $685
line 1435
;1435:    {
line 1436
;1436:      CG_UpdateBeam( tb );
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_UpdateBeam
CALLV
pop
line 1437
;1437:      CG_RenderBeam( tb );
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RenderBeam
CALLV
pop
line 1438
;1438:    }
LABELV $685
line 1439
;1439:  }
LABELV $682
line 1430
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 128
LTI4 $681
line 1441
;1440:
;1441:  if( cg_debugTrails.integer >= 2 )
ADDRGP4 cg_debugTrails+12
INDIRI4
CNSTI4 2
LTI4 $687
line 1442
;1442:  {
line 1443
;1443:    for( i = 0; i < MAX_TRAIL_SYSTEMS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $690
line 1444
;1444:      if( trailSystems[ i ].valid )
CNSTI4 2772
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 trailSystems+2768
ADDP4
INDIRI4
CNSTI4 0
EQI4 $694
line 1445
;1445:        numTS++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $694
LABELV $691
line 1443
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $690
line 1447
;1446:
;1447:    for( i = 0; i < MAX_TRAIL_BEAMS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $697
line 1448
;1448:      if( trailBeams[ i ].valid )
CNSTI4 10788
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 trailBeams+10768
ADDP4
INDIRI4
CNSTI4 0
EQI4 $701
line 1449
;1449:        numTB++;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $701
LABELV $698
line 1447
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 128
LTI4 $697
line 1451
;1450:
;1451:    CG_Printf( "TS: %d  TB: %d\n", numTS, numTB );
ADDRGP4 $704
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 1452
;1452:  }
LABELV $687
line 1453
;1453:}
LABELV $680
endproc CG_AddTrails 16 12
export CG_DestroyTestTS_f
proc CG_DestroyTestTS_f 4 4
line 1466
;1454:
;1455:static trailSystem_t  *testTS;
;1456:static qhandle_t      testTSHandle;
;1457:
;1458:/*
;1459:===============
;1460:CG_DestroyTestTS_f
;1461:
;1462:Destroy the test a trail system
;1463:===============
;1464:*/
;1465:void CG_DestroyTestTS_f( void )
;1466:{
line 1467
;1467:  if( CG_IsTrailSystemValid( &testTS ) )
ADDRGP4 testTS
ARGP4
ADDRLP4 0
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $706
line 1468
;1468:    CG_DestroyTrailSystem( &testTS );
ADDRGP4 testTS
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $706
line 1469
;1469:}
LABELV $705
endproc CG_DestroyTestTS_f 4 4
export CG_TestTS_f
proc CG_TestTS_f 84 12
line 1479
;1470:
;1471:/*
;1472:===============
;1473:CG_TestTS_f
;1474:
;1475:Test a trail system
;1476:===============
;1477:*/
;1478:void CG_TestTS_f( void )
;1479:{
line 1482
;1480:  char tsName[ MAX_QPATH ];
;1481:
;1482:  if( trap_Argc( ) < 2 )
ADDRLP4 64
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 2
GEI4 $709
line 1483
;1483:    return;
ADDRGP4 $708
JUMPV
LABELV $709
line 1485
;1484:
;1485:  Q_strncpyz( tsName, CG_Argv( 1 ), MAX_QPATH );
CNSTI4 1
ARGI4
ADDRLP4 68
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1486
;1486:  testTSHandle = CG_RegisterTrailSystem( tsName );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 CG_RegisterTrailSystem
CALLI4
ASGNI4
ADDRGP4 testTSHandle
ADDRLP4 72
INDIRI4
ASGNI4
line 1488
;1487:
;1488:  if( testTSHandle )
ADDRGP4 testTSHandle
INDIRI4
CNSTI4 0
EQI4 $711
line 1489
;1489:  {
line 1490
;1490:    CG_DestroyTestTS_f( );
ADDRGP4 CG_DestroyTestTS_f
CALLV
pop
line 1492
;1491:
;1492:    testTS = CG_SpawnNewTrailSystem( testTSHandle );
ADDRGP4 testTSHandle
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_SpawnNewTrailSystem
CALLP4
ASGNP4
ADDRGP4 testTS
ADDRLP4 76
INDIRP4
ASGNP4
line 1494
;1493:
;1494:    if( CG_IsTrailSystemValid( &testTS ) )
ADDRGP4 testTS
ARGP4
ADDRLP4 80
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $713
line 1495
;1495:    {
line 1496
;1496:      CG_SetAttachmentCent( &testTS->frontAttachment, &cg_entities[ 0 ] );
ADDRGP4 testTS
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 cg_entities
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 1497
;1497:      CG_AttachToCent( &testTS->frontAttachment );
ADDRGP4 testTS
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToCent
CALLV
pop
line 1498
;1498:    }
LABELV $713
line 1499
;1499:  }
LABELV $711
line 1500
;1500:}
LABELV $708
endproc CG_TestTS_f 84 12
bss
align 4
LABELV testTSHandle
skip 4
align 4
LABELV testTS
skip 4
align 4
LABELV trailBeams
skip 1380864
align 4
LABELV trailSystems
skip 88704
align 4
LABELV baseTrailBeams
skip 43008
align 4
LABELV baseTrailSystems
skip 5888
import trap_GetDemoName
import trap_GetDemoPos
import trap_GetDemoState
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBiSphereTrace
import trap_CM_BiSphereTrace
import trap_CM_TransformedCapsuleTrace
import trap_CM_CapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_LiteralArgs
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_TutorialText
import CG_WritePTRCode
import CG_ReadPTRCode
import CG_DestroyTestPS_f
import CG_TestPS_f
import CG_ParticleSystemEntity
import CG_AddParticles
import CG_SetParticleSystemNormal
import CG_IsParticleSystemValid
import CG_IsParticleSystemInfinite
import CG_DestroyParticleSystem
import CG_SpawnNewParticleSystem
import CG_RegisterParticleSystem
import CG_LoadParticleSystems
import CG_SetAttachmentOffset
import CG_SetAttachmentParticle
import CG_SetAttachmentTag
import CG_SetAttachmentCent
import CG_SetAttachmentPoint
import CG_AttachToParticle
import CG_AttachToTag
import CG_AttachToCent
import CG_AttachToPoint
import CG_Attached
import CG_AttachmentCentNum
import CG_AttachmentVelocity
import CG_AttachmentAxis
import CG_AttachmentDir
import CG_AttachmentPoint
import CG_DefragmentMemory
import CG_Free
import CG_Alloc
import CG_InitMemory
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_RequestScores
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ProcessSnapshots
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_AlienSense
import CG_Scanner
import CG_UpdateEntityPositions
import CG_DrawItemSelectText
import CG_DrawItemSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_ShotgunFire
import CG_Bullet
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterWeapon
import CG_InitWeapons
import CG_RegisterUpgrade
import CG_InitUpgrades
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_DrawBoundingBox
import CG_PainEvent
import CG_EntityEvent
import CG_CheckEvents
import CG_PredictPlayerState
import CG_BiSphereTrace
import CG_CapTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_ModelDoor
import CG_AnimMapObj
import CG_RunLerpFrame
import CG_AlienBuildableExplosion
import CG_HumanBuildableExplosion
import CG_InitBuildables
import CG_Buildable
import CG_GhostBuildable
import CG_AtHighestClass
import CG_Bleed
import CG_PlayerOnFire
import CG_PlayerDisconnect
import CG_CustomSound
import CG_PrecacheClientInfo
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Corpse
import CG_Player
import CG_ResetPainBlend
import CG_UpdateMediaFraction
import CG_DrawLoadingScreen
import CG_Text_PaintChar
import CG_GetKillerText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_RunMenuScript
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawActive
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawFadePic
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawPlane
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_addSmoothOp
import CG_AddNotifyText
import CG_RemoveNotifyLine
import CG_FileExists
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PlayerCount
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_debugRandom
import ui_humanTeamVoteActive
import ui_alienTeamVoteActive
import ui_voteActive
import ui_loading
import ui_dialog
import ui_stages
import ui_carriage
import ui_currentClass
import cg_painBlendZoom
import cg_painBlendScale
import cg_painBlendMax
import cg_painBlendDownRate
import cg_painBlendUpRate
import cg_tutorial
import cg_disableScannerPlane
import cg_disableWarningDialogs
import cg_debugPVS
import cg_debugTrails
import cg_debugParticles
import cg_lightFlare
import cg_consoleLatency
import cg_depthSortParticles
import cg_wwToggle
import cg_wwFollow
import cg_wwSmoothTime
import cg_debugAlloc
import cg_drawBBOX
import cg_drawSurfNormal
import cg_creepRes
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPersonhax
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRangehax
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_debugMove
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_teslaTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawDemoState
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_buildables
import cg_upgrades
import cg_weapons
import cg_entities
import cg
import cgs
import g_nameBind2
import g_nameBind1
import BindingFromName
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Item_Text_AutoWrapped_Paint
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Display_ExpandMacros
import Init_Display
import String_Report
import String_Init
import String_Alloc
import BG_ClientListParse
import BG_ClientListString
import BG_ClientListRemove
import BG_ClientListAdd
import BG_ClientListTest
import BG_UpgradeClassAvailable
import BG_BuildableIsAllowed
import BG_ClassIsAllowed
import BG_UpgradeIsAllowed
import BG_WeaponIsAllowed
import BG_InitAllowedGameElements
import BG_ParseCSVBuildableList
import BG_ParseCSVClassList
import BG_ParseCSVEquipmentList
import atoi_neg
import atof_neg
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_FindTeamForUpgrade
import BG_FindUsableForUpgrade
import BG_FindPurchasableForUpgrade
import BG_FindIconForUpgrade
import BG_FindHumanNameForUpgrade
import BG_FindUpgradeNumForName
import BG_FindNameForUpgrade
import BG_FindSlotsForUpgrade
import BG_FindStagesForUpgrade
import BG_FindPriceForUpgrade
import BG_FindTeamForWeapon
import BG_FindBuildDelayForWeapon
import BG_FindLongRangedForWeapon
import BG_FindPurchasableForWeapon
import BG_FindZoomFovForWeapon
import BG_WeaponCanZoom
import BG_WeaponHasThirdMode
import BG_WeaponHasAltMode
import BG_FindKnockbackScaleForWeapon
import BG_FindReloadTimeForWeapon
import BG_FindRepeatRate3ForWeapon
import BG_FindRepeatRate2ForWeapon
import BG_FindRepeatRate1ForWeapon
import BG_FindUsesEnergyForWeapon
import BG_FindInfinteAmmoForWeapon
import BG_FindAmmoForWeapon
import BG_FindCrosshairSizeForWeapon
import BG_FindCrosshairForWeapon
import BG_FindIconForWeapon
import BG_FindModelsForWeapon
import BG_FindHumanNameForWeapon
import BG_FindWeaponNumForName
import BG_FindNameForWeapon
import BG_FindSlotsForWeapon
import BG_FindStagesForWeapon
import BG_FindPriceForWeapon
import BG_InitClassOverrides
import BG_FindValueOfClass
import BG_FindCostOfClass
import BG_ClassCanEvolveFromTo
import BG_FindBuildDistForClass
import BG_FindStartWeaponForClass
import BG_ClassHasAbility
import BG_FindSteptimeForClass
import BG_FindKnockbackScaleForClass
import BG_FindJumpMagnitudeForClass
import BG_FindStopSpeedForClass
import BG_FindFrictionForClass
import BG_FindAirAccelerationForClass
import BG_FindAccelerationForClass
import BG_FindSpeedForClass
import BG_FindBobCycleForClass
import BG_FindBobForClass
import BG_FindFovForClass
import BG_FindRegenRateForClass
import BG_FindFallDamageForClass
import BG_FindHealthForClass
import BG_FindViewheightForClass
import BG_FindZOffsetForClass
import BG_FindBBoxForClass
import BG_FindSpriteHeightForClass
import BG_FindStagesForClass
import BG_FindHudNameForClass
import BG_FindShadowScaleForClass
import BG_FindSkinNameForClass
import BG_FindModelScaleForClass
import BG_FindModelNameForClass
import BG_FindHumanNameForClassNum
import BG_FindNameForClassNum
import BG_FindClassNumForName
import BG_InitBuildableOverrides
import BG_FindTransparentTestForBuildable
import BG_FindReplaceableTestForBuildable
import BG_FindUniqueTestForBuildable
import BG_FindDCCTestForBuildable
import BG_FindCreepSizeForBuildable
import BG_FindCreepTestForBuildable
import BG_FindInvertNormalForBuildable
import BG_FindMinNormalForBuildable
import BG_FindProjTypeForBuildable
import BG_FindFireSpeedForBuildable
import BG_FindRangeForBuildable
import BG_FindUsableForBuildable
import BG_FindBuildTimeForBuildable
import BG_FindNextThinkForBuildable
import BG_FindAnimForBuildable
import BG_FindBuildWeaponForBuildable
import BG_FindTeamForBuildable
import BG_FindMODForBuildable
import BG_FindSplashRadiusForBuildable
import BG_FindSplashDamageForBuildable
import BG_FindStagesForBuildable
import BG_FindBuildPointsForBuildable
import BG_FindBounceForBuildable
import BG_FindTrajectoryForBuildable
import BG_FindRegenRateForBuildable
import BG_FindHealthForBuildable
import BG_FindZOffsetForBuildable
import BG_FindBBoxForBuildable
import BG_FindModelScaleForBuildable
import BG_FindModelsForBuildable
import BG_FindEntityNameForBuildable
import BG_FindHumanNameForBuildable
import BG_FindNameForBuildable
import BG_FindBuildNumForEntityName
import BG_FindBuildNumForName
import BG_GetValueOfEquipment
import BG_GetValueOfHuman
import BG_PositionBuildableRelativeToPlayer
import BG_RotateAxis
import BG_UpgradeIsActive
import BG_DeactivateUpgrade
import BG_ActivateUpgrade
import BG_InventoryContainsUpgrade
import BG_RemoveUpgradeFromInventory
import BG_AddUpgradeToInventory
import BG_InventoryContainsWeapon
import BG_RemoveWeaponFromInventory
import BG_AddWeaponToInventory
import BG_WeaponIsFull
import BG_PackAmmoArray
import BG_UnpackAmmoArray
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isintegral
import Q_isanumber
import Q_isdigit
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Com_HexStrToInt
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import DistanceBetweenLineSegments
import DistanceBetweenLineSegmentsSquared
import VectorMaxComponent
import VectorMinComponent
import pointToLineDistance
import VectorDistance
import ProjectPointOntoVector
import GetPerpendicularViewVector
import Q_isnan
import PerpendicularVector
import AngleVectors
import VectorMatrixMultiply
import MatrixMultiply
import MakeNormalVectors
import RotateAroundAxe
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AxisToAngles
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import rint
import pow
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $704
byte 1 84
byte 1 83
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 32
byte 1 84
byte 1 66
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $679
byte 1 84
byte 1 83
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 103
byte 1 97
byte 1 114
byte 1 98
byte 1 97
byte 1 103
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 108
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $638
byte 1 84
byte 1 83
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 99
byte 1 114
byte 1 101
byte 1 97
byte 1 116
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $624
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 98
byte 1 101
byte 1 101
byte 1 110
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 121
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $619
byte 1 84
byte 1 66
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 99
byte 1 114
byte 1 101
byte 1 97
byte 1 116
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $608
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $607
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $590
byte 1 46
byte 1 46
byte 1 46
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 10
byte 1 0
align 1
LABELV $589
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 0
align 1
LABELV $584
byte 1 46
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 0
align 1
LABELV $583
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $573
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 97
byte 1 108
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $570
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 10
byte 1 0
align 1
LABELV $569
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 105
byte 1 109
byte 1 117
byte 1 109
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 32
byte 1 40
byte 1 37
byte 1 100
byte 1 41
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $566
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $563
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $547
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $541
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $540
byte 1 80
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $534
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $531
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 79
byte 1 110
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $528
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 105
byte 1 109
byte 1 117
byte 1 109
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 40
byte 1 37
byte 1 100
byte 1 41
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $525
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 62
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $522
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 0
align 1
LABELV $510
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 0
align 1
LABELV $507
byte 1 106
byte 1 105
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 65
byte 1 116
byte 1 116
byte 1 97
byte 1 99
byte 1 104
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $500
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 109
byte 1 97
byte 1 110
byte 1 121
byte 1 32
byte 1 106
byte 1 105
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $497
byte 1 106
byte 1 105
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $494
byte 1 114
byte 1 101
byte 1 97
byte 1 108
byte 1 76
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $491
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 101
byte 1 120
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $488
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 101
byte 1 120
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 99
byte 1 108
byte 1 97
byte 1 109
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $487
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $484
byte 1 102
byte 1 114
byte 1 111
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $479
byte 1 114
byte 1 101
byte 1 112
byte 1 101
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $472
byte 1 115
byte 1 116
byte 1 114
byte 1 101
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $467
byte 1 116
byte 1 101
byte 1 120
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $462
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $457
byte 1 102
byte 1 97
byte 1 100
byte 1 101
byte 1 79
byte 1 117
byte 1 116
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $452
byte 1 115
byte 1 101
byte 1 103
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $449
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 39
byte 1 123
byte 1 39
byte 1 10
byte 1 0
align 1
LABELV $438
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 39
byte 1 125
byte 1 39
byte 1 10
byte 1 0
align 1
LABELV $437
byte 1 125
byte 1 0
align 1
LABELV $432
byte 1 123
byte 1 0
align 1
LABELV $427
byte 1 99
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $418
byte 1 97
byte 1 108
byte 1 112
byte 1 104
byte 1 97
byte 1 0
align 1
LABELV $415
byte 1 45
byte 1 0
align 1
LABELV $408
byte 1 119
byte 1 105
byte 1 100
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $405
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 109
byte 1 97
byte 1 110
byte 1 121
byte 1 32
byte 1 115
byte 1 101
byte 1 103
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 10
byte 1 0
align 1
LABELV $400
byte 1 115
byte 1 101
byte 1 103
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $391
byte 1 0
