lit
align 4
LABELV $100
byte 4 1132396544
byte 4 0
byte 4 0
byte 4 1124073472
code
proc CG_DrawBoxFace 304 12
file "..\..\..\..\src/cgame/cg_ents.c"
line 38
;1:/*
;2: ===========================================================================
;3: Copyright (C) 1999-2005 Id Software, Inc.
;4: Copyright (C) 2000-2006 Tim Angus
;5:
;6: This file is part of Tremulous.
;7:
;8: Tremulous is free software; you can redistribute it
;9: and/or modify it under the terms of the GNU General Public License as
;10: published by the Free Software Foundation; either version 2 of the License,
;11: or (at your option) any later version.
;12:
;13: Tremulous is distributed in the hope that it will be
;14: useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;15: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;16: GNU General Public License for more details.
;17:
;18: You should have received a copy of the GNU General Public License
;19: along with Tremulous; if not, write to the Free Software
;20: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;21: ===========================================================================
;22: */
;23:
;24:// cg_ents.c -- present snapshot entities, happens every single frame
;25:
;26:
;27:#include "cg_local.h"
;28:
;29:/*
;30: ======================
;31: CG_DrawBoxFace
;32:
;33: Draws a bounding box face
;34: ======================
;35: */
;36:static void
;37:CG_DrawBoxFace(vec3_t a, vec3_t b, vec3_t c, vec3_t d)
;38:{
line 41
;39:  polyVert_t verts[4];
;40:  vec4_t color =
;41:  { 255.0f, 0.0f, 0.0f, 128.0f };
ADDRLP4 96
ADDRGP4 $100
INDIRB
ASGNB 16
line 43
;42:
;43:  VectorCopy( d, verts[ 0 ].xyz );
ADDRLP4 0
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 44
;44:  verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 45
;45:  verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 46
;46:  Vector4Copy( color, verts[ 0 ].modulate );
ADDRLP4 128
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 132
CNSTF4 1325400064
ASGNF4
ADDRLP4 128
INDIRF4
ADDRLP4 132
INDIRF4
LTF4 $118
ADDRLP4 112
ADDRLP4 128
INDIRF4
ADDRLP4 132
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $119
JUMPV
LABELV $118
ADDRLP4 112
ADDRLP4 128
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $119
ADDRLP4 0+20
ADDRLP4 112
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 136
ADDRLP4 96+4
INDIRF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $120
ADDRLP4 116
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $121
JUMPV
LABELV $120
ADDRLP4 116
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $121
ADDRLP4 0+20+1
ADDRLP4 116
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 144
ADDRLP4 96+8
INDIRF4
ASGNF4
ADDRLP4 148
CNSTF4 1325400064
ASGNF4
ADDRLP4 144
INDIRF4
ADDRLP4 148
INDIRF4
LTF4 $122
ADDRLP4 120
ADDRLP4 144
INDIRF4
ADDRLP4 148
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $123
JUMPV
LABELV $122
ADDRLP4 120
ADDRLP4 144
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $123
ADDRLP4 0+20+2
ADDRLP4 120
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 152
ADDRLP4 96+12
INDIRF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $124
ADDRLP4 124
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $125
JUMPV
LABELV $124
ADDRLP4 124
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $125
ADDRLP4 0+20+3
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 48
;47:
;48:  VectorCopy( c, verts[ 1 ].xyz );
ADDRLP4 0+24
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 49
;49:  verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 50
;50:  verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 51
;51:  Vector4Copy( color, verts[ 1 ].modulate );
ADDRLP4 176
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 180
CNSTF4 1325400064
ASGNF4
ADDRLP4 176
INDIRF4
ADDRLP4 180
INDIRF4
LTF4 $150
ADDRLP4 160
ADDRLP4 176
INDIRF4
ADDRLP4 180
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $151
JUMPV
LABELV $150
ADDRLP4 160
ADDRLP4 176
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $151
ADDRLP4 0+24+20
ADDRLP4 160
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 184
ADDRLP4 96+4
INDIRF4
ASGNF4
ADDRLP4 188
CNSTF4 1325400064
ASGNF4
ADDRLP4 184
INDIRF4
ADDRLP4 188
INDIRF4
LTF4 $152
ADDRLP4 164
ADDRLP4 184
INDIRF4
ADDRLP4 188
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $153
JUMPV
LABELV $152
ADDRLP4 164
ADDRLP4 184
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $153
ADDRLP4 0+24+20+1
ADDRLP4 164
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 192
ADDRLP4 96+8
INDIRF4
ASGNF4
ADDRLP4 196
CNSTF4 1325400064
ASGNF4
ADDRLP4 192
INDIRF4
ADDRLP4 196
INDIRF4
LTF4 $154
ADDRLP4 168
ADDRLP4 192
INDIRF4
ADDRLP4 196
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $155
JUMPV
LABELV $154
ADDRLP4 168
ADDRLP4 192
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $155
ADDRLP4 0+24+20+2
ADDRLP4 168
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 200
ADDRLP4 96+12
INDIRF4
ASGNF4
ADDRLP4 204
CNSTF4 1325400064
ASGNF4
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
LTF4 $156
ADDRLP4 172
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $157
JUMPV
LABELV $156
ADDRLP4 172
ADDRLP4 200
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $157
ADDRLP4 0+24+20+3
ADDRLP4 172
INDIRU4
CVUU1 4
ASGNU1
line 53
;52:
;53:  VectorCopy( b, verts[ 2 ].xyz );
ADDRLP4 0+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 54
;54:  verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 55
;55:  verts[2].st[1] = 0;
ADDRLP4 0+48+12+4
CNSTF4 0
ASGNF4
line 56
;56:  Vector4Copy( color, verts[ 2 ].modulate );
ADDRLP4 224
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 228
CNSTF4 1325400064
ASGNF4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
LTF4 $182
ADDRLP4 208
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $183
JUMPV
LABELV $182
ADDRLP4 208
ADDRLP4 224
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $183
ADDRLP4 0+48+20
ADDRLP4 208
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 232
ADDRLP4 96+4
INDIRF4
ASGNF4
ADDRLP4 236
CNSTF4 1325400064
ASGNF4
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
LTF4 $184
ADDRLP4 212
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $185
JUMPV
LABELV $184
ADDRLP4 212
ADDRLP4 232
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $185
ADDRLP4 0+48+20+1
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 240
ADDRLP4 96+8
INDIRF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $186
ADDRLP4 216
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $187
JUMPV
LABELV $186
ADDRLP4 216
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $187
ADDRLP4 0+48+20+2
ADDRLP4 216
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 248
ADDRLP4 96+12
INDIRF4
ASGNF4
ADDRLP4 252
CNSTF4 1325400064
ASGNF4
ADDRLP4 248
INDIRF4
ADDRLP4 252
INDIRF4
LTF4 $188
ADDRLP4 220
ADDRLP4 248
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $189
JUMPV
LABELV $188
ADDRLP4 220
ADDRLP4 248
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $189
ADDRLP4 0+48+20+3
ADDRLP4 220
INDIRU4
CVUU1 4
ASGNU1
line 58
;57:
;58:  VectorCopy( a, verts[ 3 ].xyz );
ADDRLP4 0+72
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 59
;59:  verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 60
;60:  verts[3].st[1] = 1;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 61
;61:  Vector4Copy( color, verts[ 3 ].modulate );
ADDRLP4 272
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 276
CNSTF4 1325400064
ASGNF4
ADDRLP4 272
INDIRF4
ADDRLP4 276
INDIRF4
LTF4 $214
ADDRLP4 256
ADDRLP4 272
INDIRF4
ADDRLP4 276
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $215
JUMPV
LABELV $214
ADDRLP4 256
ADDRLP4 272
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $215
ADDRLP4 0+72+20
ADDRLP4 256
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 280
ADDRLP4 96+4
INDIRF4
ASGNF4
ADDRLP4 284
CNSTF4 1325400064
ASGNF4
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
LTF4 $216
ADDRLP4 260
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $217
JUMPV
LABELV $216
ADDRLP4 260
ADDRLP4 280
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $217
ADDRLP4 0+72+20+1
ADDRLP4 260
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 288
ADDRLP4 96+8
INDIRF4
ASGNF4
ADDRLP4 292
CNSTF4 1325400064
ASGNF4
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
LTF4 $218
ADDRLP4 264
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $219
JUMPV
LABELV $218
ADDRLP4 264
ADDRLP4 288
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $219
ADDRLP4 0+72+20+2
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 296
ADDRLP4 96+12
INDIRF4
ASGNF4
ADDRLP4 300
CNSTF4 1325400064
ASGNF4
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
LTF4 $220
ADDRLP4 268
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $221
JUMPV
LABELV $220
ADDRLP4 268
ADDRLP4 296
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $221
ADDRLP4 0+72+20+3
ADDRLP4 268
INDIRU4
CVUU1 4
ASGNU1
line 63
;62:
;63:  trap_R_AddPolyToScene(cgs.media.outlineShader, 4, verts);
ADDRGP4 cgs+268684+8
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 64
;64:}
LABELV $99
endproc CG_DrawBoxFace 304 12
export CG_DrawBoundingBox
proc CG_DrawBoundingBox 160 16
line 75
;65:
;66:/*
;67: ======================
;68: CG_DrawBoundingBox
;69:
;70: Draws a bounding box
;71: ======================
;72: */
;73:void
;74:CG_DrawBoundingBox(vec3_t origin, vec3_t mins, vec3_t maxs)
;75:{
line 79
;76:  vec3_t ppp, mpp, mmp, pmp;
;77:  vec3_t mmm, pmm, ppm, mpm;
;78:
;79:  ppp[0] = origin[0] + maxs[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 80
;80:  ppp[1] = origin[1] + maxs[1];
ADDRLP4 96
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 81
;81:  ppp[2] = origin[2] + maxs[2];
ADDRLP4 100
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 83
;82:
;83:  mpp[0] = origin[0] + mins[0];
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 84
;84:  mpp[1] = origin[1] + maxs[1];
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 12+4
ADDRFP4 0
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 85
;85:  mpp[2] = origin[2] + maxs[2];
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 87
;86:
;87:  mmp[0] = origin[0] + mins[0];
ADDRLP4 24
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 88
;88:  mmp[1] = origin[1] + mins[1];
ADDRLP4 112
CNSTI4 4
ASGNI4
ADDRLP4 24+4
ADDRFP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 89
;89:  mmp[2] = origin[2] + maxs[2];
ADDRLP4 116
CNSTI4 8
ASGNI4
ADDRLP4 24+8
ADDRFP4 0
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 116
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 91
;90:
;91:  pmp[0] = origin[0] + maxs[0];
ADDRLP4 36
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 92
;92:  pmp[1] = origin[1] + mins[1];
ADDRLP4 120
CNSTI4 4
ASGNI4
ADDRLP4 36+4
ADDRFP4 0
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 93
;93:  pmp[2] = origin[2] + maxs[2];
ADDRLP4 124
CNSTI4 8
ASGNI4
ADDRLP4 36+8
ADDRFP4 0
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 95
;94:
;95:  ppm[0] = origin[0] + maxs[0];
ADDRLP4 72
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 96
;96:  ppm[1] = origin[1] + maxs[1];
ADDRLP4 128
CNSTI4 4
ASGNI4
ADDRLP4 72+4
ADDRFP4 0
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 97
;97:  ppm[2] = origin[2] + mins[2];
ADDRLP4 132
CNSTI4 8
ASGNI4
ADDRLP4 72+8
ADDRFP4 0
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 99
;98:
;99:  mpm[0] = origin[0] + mins[0];
ADDRLP4 84
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 100
;100:  mpm[1] = origin[1] + maxs[1];
ADDRLP4 136
CNSTI4 4
ASGNI4
ADDRLP4 84+4
ADDRFP4 0
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 101
;101:  mpm[2] = origin[2] + mins[2];
ADDRLP4 140
CNSTI4 8
ASGNI4
ADDRLP4 84+8
ADDRFP4 0
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 103
;102:
;103:  mmm[0] = origin[0] + mins[0];
ADDRLP4 48
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 104
;104:  mmm[1] = origin[1] + mins[1];
ADDRLP4 144
CNSTI4 4
ASGNI4
ADDRLP4 48+4
ADDRFP4 0
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 105
;105:  mmm[2] = origin[2] + mins[2];
ADDRLP4 148
CNSTI4 8
ASGNI4
ADDRLP4 48+8
ADDRFP4 0
INDIRP4
ADDRLP4 148
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 148
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 107
;106:
;107:  pmm[0] = origin[0] + maxs[0];
ADDRLP4 60
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 108
;108:  pmm[1] = origin[1] + mins[1];
ADDRLP4 152
CNSTI4 4
ASGNI4
ADDRLP4 60+4
ADDRFP4 0
INDIRP4
ADDRLP4 152
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 152
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 109
;109:  pmm[2] = origin[2] + mins[2];
ADDRLP4 156
CNSTI4 8
ASGNI4
ADDRLP4 60+8
ADDRFP4 0
INDIRP4
ADDRLP4 156
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 156
INDIRI4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 113
;110:
;111:  //phew!
;112:
;113:  CG_DrawBoxFace(ppp, mpp, mmp, pmp);
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 36
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 114
;114:  CG_DrawBoxFace(ppp, pmp, pmm, ppm);
ADDRLP4 0
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 115
;115:  CG_DrawBoxFace(mpp, ppp, ppm, mpm);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 84
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 116
;116:  CG_DrawBoxFace(mmp, mpp, mpm, mmm);
ADDRLP4 24
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 84
ARGP4
ADDRLP4 48
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 117
;117:  CG_DrawBoxFace(pmp, mmp, mmm, pmm);
ADDRLP4 36
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 48
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 118
;118:  CG_DrawBoxFace(mmm, mpm, ppm, pmm);
ADDRLP4 48
ARGP4
ADDRLP4 84
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 CG_DrawBoxFace
CALLV
pop
line 119
;119:}
LABELV $224
endproc CG_DrawBoundingBox 160 16
export CG_PositionEntityOnTag
proc CG_PositionEntityOnTag 92 24
line 131
;120:
;121:/*
;122: ======================
;123: CG_PositionEntityOnTag
;124:
;125: Modifies the entities position and axis by the given
;126: tag location
;127: ======================
;128: */
;129:void
;130:CG_PositionEntityOnTag(refEntity_t *entity, const refEntity_t *parent, qhandle_t parentModel, char *tagName)
;131:{
line 136
;132:  int i;
;133:  orientation_t lerped;
;134:
;135:  // lerp the tag
;136:  trap_R_LerpTag(&lerped, parentModel, parent->oldframe, parent->frame, 1.0 - parent->backlerp, tagName);
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 52
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 139
;137:
;138:  // FIXME: allow origin offsets along tag?
;139:  VectorCopy( parent->origin, entity->origin );
ADDRLP4 56
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 140
;140:  for(i = 0;i < 3;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $242
line 141
;141:    VectorMA( entity->origin, lerped.origin[ i ], parent->axis[ i ], entity->origin );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $243
line 140
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $242
line 144
;142:
;143:  // had to cast away the const to avoid compiler problems...
;144:  MatrixMultiply(lerped.axis, ((refEntity_t *) parent)->axis, entity->axis);
ADDRLP4 4+12
ARGP4
ADDRLP4 84
CNSTI4 28
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 84
INDIRI4
ADDP
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 145
;145:  entity->backlerp = parent->backlerp;
ADDRLP4 88
CNSTI4 100
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ASGNF4
line 146
;146:}
LABELV $241
endproc CG_PositionEntityOnTag 92 24
export CG_PositionRotatedEntityOnTag
proc CG_PositionRotatedEntityOnTag 124 24
line 158
;147:
;148:/*
;149: ======================
;150: CG_PositionRotatedEntityOnTag
;151:
;152: Modifies the entities position and axis by the given
;153: tag location
;154: ======================
;155: */
;156:void
;157:CG_PositionRotatedEntityOnTag(refEntity_t *entity, const refEntity_t *parent, qhandle_t parentModel, char *tagName)
;158:{
line 165
;159:  int i;
;160:  orientation_t lerped;
;161:  vec3_t tempAxis[3];
;162:
;163:  //AxisClear( entity->axis );
;164:  // lerp the tag
;165:  trap_R_LerpTag(&lerped, parentModel, parent->oldframe, parent->frame, 1.0 - parent->backlerp, tagName);
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 88
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 168
;166:
;167:  // FIXME: allow origin offsets along tag?
;168:  VectorCopy( parent->origin, entity->origin );
ADDRLP4 92
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 169
;169:  for(i = 0;i < 3;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $248
line 170
;170:    VectorMA( entity->origin, lerped.origin[ i ], parent->axis[ i ], entity->origin );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $249
line 169
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $248
line 173
;171:
;172:  // had to cast away the const to avoid compiler problems...
;173:  MatrixMultiply(entity->axis, lerped.axis, tempAxis);
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 4+12
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 174
;174:  MatrixMultiply(tempAxis, ((refEntity_t *) parent)->axis, entity->axis);
ADDRLP4 52
ARGP4
ADDRLP4 120
CNSTI4 28
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 120
INDIRI4
ADDP
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 175
;175:}
LABELV $247
endproc CG_PositionRotatedEntityOnTag 124 24
export CG_SetEntitySoundPosition
proc CG_SetEntitySoundPosition 24 8
line 194
;176:
;177:/*
;178: ==========================================================================
;179:
;180: FUNCTIONS CALLED EACH FRAME
;181:
;182: ==========================================================================
;183: */
;184:
;185:/*
;186: ======================
;187: CG_SetEntitySoundPosition
;188:
;189: Also called by event processing code
;190: ======================
;191: */
;192:void
;193:CG_SetEntitySoundPosition(centity_t *cent)
;194:{
line 195
;195:  if (cent->currentState.solid == SOLID_BMODEL)
ADDRFP4 0
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $254
line 196
;196:  {
line 200
;197:    vec3_t origin;
;198:    float *v;
;199:
;200:    v = cgs.inlineModelMidpoints[cent->currentState.modelindex];
ADDRLP4 12
CNSTI4 12
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38336
ADDP4
ASGNP4
line 201
;201:    VectorAdd( cent->lerpOrigin, v, origin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 1556
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 1560
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 1564
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 202
;202:    trap_S_UpdateEntityPosition(cent->currentState.number, origin);
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_S_UpdateEntityPosition
CALLV
pop
line 203
;203:  }
ADDRGP4 $255
JUMPV
LABELV $254
line 205
;204:  else
;205:    trap_S_UpdateEntityPosition(cent->currentState.number, cent->lerpOrigin);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 trap_S_UpdateEntityPosition
CALLV
pop
LABELV $255
line 206
;206:}
LABELV $253
endproc CG_SetEntitySoundPosition 24 8
proc CG_EntityEffects 32 20
line 217
;207:
;208:/*
;209: ==================
;210: CG_EntityEffects
;211:
;212: Add continuous entity effects, like local entity emission and lighting
;213: ==================
;214: */
;215:static void
;216:CG_EntityEffects(centity_t *cent)
;217:{
line 219
;218:  // update sound origins
;219:  CG_SetEntitySoundPosition(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SetEntitySoundPosition
CALLV
pop
line 222
;220:
;221:  // add loop sound
;222:  if (cent->currentState.loopSound)
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $260
line 223
;223:  {
line 224
;224:    if (cent->currentState.eType != ET_SPEAKER)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 8
EQI4 $262
line 225
;225:    {
line 226
;226:      trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.gameSounds[cent->currentState.loopSound]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+36284
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 227
;227:    }
ADDRGP4 $263
JUMPV
LABELV $262
line 229
;228:    else
;229:    {
line 230
;230:      trap_S_AddRealLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.gameSounds[cent->currentState.loopSound]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+36284
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddRealLoopingSound
CALLV
pop
line 231
;231:    }
LABELV $263
line 232
;232:  }
LABELV $260
line 235
;233:
;234:  // constant light glow
;235:  if (cent->currentState.constantLight)
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 0
EQI4 $266
line 236
;236:  {
line 240
;237:    int cl;
;238:    int i, r, g, b;
;239:
;240:    cl = cent->currentState.constantLight;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ASGNI4
line 241
;241:    r = cl & 255;
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 242
;242:    g = (cl >> 8) & 255;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 243
;243:    b = (cl >> 16) & 255;
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 244
;244:    i = ((cl >> 24) & 255) * 4;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 24
RSHI4
CNSTI4 255
BANDI4
CNSTI4 2
LSHI4
ASGNI4
line 245
;245:    trap_R_AddLightToScene(cent->lerpOrigin, i, r, g, b);
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 246
;246:  }
LABELV $266
line 248
;247:
;248:  if (CG_IsTrailSystemValid(&cent->muzzleTS))
ADDRFP4 0
INDIRP4
CNSTI4 1704
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $268
line 249
;249:  {
line 250
;250:    if (cent->currentState.eType == ET_BUILDABLE)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $270
line 251
;251:    {
line 254
;252:      vec3_t front, back;
;253:
;254:      CG_AttachmentPoint(&cent->muzzleTS->frontAttachment, front);
ADDRFP4 0
INDIRP4
CNSTI4 1704
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_AttachmentPoint
CALLI4
pop
line 255
;255:      CG_AttachmentPoint(&cent->muzzleTS->backAttachment, back);
ADDRFP4 0
INDIRP4
CNSTI4 1704
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 CG_AttachmentPoint
CALLI4
pop
line 257
;256:
;257:      if (Distance(front, back) > TESLAGEN_RANGE)
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
CNSTF4 1125515264
LEF4 $272
line 258
;258:        CG_DestroyTrailSystem(&cent->muzzleTS);
ADDRFP4 0
INDIRP4
CNSTI4 1704
ADDP4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $272
line 259
;259:    }
LABELV $270
line 261
;260:
;261:    if (cg.time > cent->muzzleTSDeathTime && CG_IsTrailSystemValid(&cent->muzzleTS))
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1708
ADDP4
INDIRI4
LEI4 $274
ADDRLP4 4
INDIRP4
CNSTI4 1704
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $274
line 262
;262:      CG_DestroyTrailSystem(&cent->muzzleTS);
ADDRFP4 0
INDIRP4
CNSTI4 1704
ADDP4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $274
line 263
;263:  }
LABELV $268
line 264
;264:}
LABELV $259
endproc CG_EntityEffects 32 20
proc CG_General 144 12
line 273
;265:
;266:/*
;267: ==================
;268: CG_General
;269: ==================
;270: */
;271:static void
;272:CG_General(centity_t *cent)
;273:{
line 277
;274:  refEntity_t ent;
;275:  entityState_t *s1;
;276:
;277:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 280
;278:
;279:  // if set to invisible, skip
;280:  if (!s1->modelindex)
ADDRLP4 140
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 0
NEI4 $278
line 281
;281:    return;
ADDRGP4 $277
JUMPV
LABELV $278
line 283
;282:
;283:  memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 287
;284:
;285:  // set frame
;286:
;287:  ent.frame = s1->frame;
ADDRLP4 0+80
ADDRLP4 140
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 288
;288:  ent.oldframe = ent.frame;
ADDRLP4 0+96
ADDRLP4 0+80
INDIRI4
ASGNI4
line 289
;289:  ent.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 291
;290:
;291:  VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 292
;292:  VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 294
;293:
;294:  ent.hModel = cgs.gameModels[s1->modelindex];
ADDRLP4 0+8
ADDRLP4 140
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34748
ADDP4
INDIRI4
ASGNI4
line 297
;295:
;296:  // player model
;297:  if (s1->number == cg.snap->ps.clientNum)
ADDRLP4 140
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $288
line 298
;298:    ent.renderfx |= RF_THIRD_PERSON; // only draw from mirrors
ADDRLP4 0+4
ADDRLP4 0+4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $288
line 301
;299:
;300:  // convert angles to axis
;301:  AnglesToAxis(cent->lerpAngles, ent.axis);
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 304
;302:
;303:  // add to refresh list
;304:  trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 305
;305:}
LABELV $277
endproc CG_General 144 12
proc CG_Speaker 16 16
line 316
;306:
;307:/*
;308: ==================
;309: CG_Speaker
;310:
;311: Speaker entities can automatically play sounds
;312: ==================
;313: */
;314:static void
;315:CG_Speaker(centity_t *cent)
;316:{
line 317
;317:  if (!cent->currentState.clientNum)
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 0
NEI4 $294
line 318
;318:  { // FIXME: use something other than clientNum...
line 319
;319:    return; // not auto triggering
ADDRGP4 $293
JUMPV
LABELV $294
line 322
;320:  }
;321:
;322:  if (cg.time < cent->miscTime)
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRI4
GEI4 $296
line 323
;323:    return;
ADDRGP4 $293
JUMPV
LABELV $296
line 325
;324:
;325:  trap_S_StartSound(NULL, cent->currentState.number, CHAN_ITEM, cgs.gameSounds[cent->currentState.eventParm]);
CNSTP4 0
ARGP4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+36284
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 329
;326:
;327:  //  ent->s.frame = ent->wait * 10;
;328:  //  ent->s.clientNum = ent->random * 10;
;329:  cent->miscTime = cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom( );
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 100
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 452
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDI4
CVIF4 4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
CVIF4 4
CNSTF4 1073741824
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 330
;330:}
LABELV $293
endproc CG_Speaker 16 16
lit
align 4
LABELV $302
byte 4 0
byte 4 0
byte 4 1065353216
code
proc CG_AI_Node 296 12
line 342
;331:
;332://============================================================================
;333:
;334:
;335:/*
;336: ==================
;337: CG_AI_Node
;338: ==================
;339: */
;340:static void
;341:CG_AI_Node(centity_t * cent)
;342:{
line 345
;343:  refEntity_t ent;
;344:  vec3_t origin, delta, dir, vec, up =
;345:  { 0, 0, 1 };
ADDRLP4 252
ADDRGP4 $302
INDIRB
ASGNB 12
line 348
;346:  float len;
;347:  int i, node, digits[10], numdigits, negative;
;348:  int numberSize = 8;
ADDRLP4 176
CNSTI4 8
ASGNI4
line 367
;349:
;350:  enum
;351:  {
;352:    NODE_MOVE, NODE_PLATFORM, NODE_TRIGGER_TELEPORT,
;353:    //  NODE_TARGET_TELEPORT,
;354:    NODE_ITEM,
;355:    NODE_WATER,
;356:    NODE_GRAPPLE,
;357:    NODE_JUMP,
;358:    NODE_DUCKJUMP,
;359:    NODE_JUMPPAD,
;360:    NODE_LADDER,
;361:    NODE_ALL = 99,
;362:  // For selecting all nodes
;363:  };
;364:
;365:  entityState_t *s1;
;366:
;367:  s1 = &cent->currentState;
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
line 369
;368:
;369:  memset(&ent, 0, sizeof(ent));
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 387
;370:
;371:#if 0
;372:
;373:  // set frame
;374:  VectorCopy(cent->lerpOrigin, ent.origin);
;375:  VectorCopy(cent->lerpOrigin, ent.oldorigin);
;376:
;377:  // convert angles to axis
;378:  AnglesToAxis(cent->lerpAngles, ent.axis);
;379:
;380:  // add to refresh list
;381:  trap_R_AddRefEntityToScene(&ent);
;382:
;383:#else
;384:  // draw node number as sprite
;385:  // code based on CG_AddScorePlum
;386:
;387:  ent.reType = RT_SPRITE;
ADDRLP4 8
CNSTI4 2
ASGNI4
line 388
;388:  ent.radius = 5;
ADDRLP4 8+132
CNSTF4 1084227584
ASGNF4
line 390
;389:
;390:  ent.shaderRGBA[0] = 0xff;//0xff;
ADDRLP4 8+116
CNSTU1 255
ASGNU1
line 391
;391:  ent.shaderRGBA[1] = 0xff;
ADDRLP4 8+116+1
CNSTU1 255
ASGNU1
line 392
;392:  ent.shaderRGBA[2] = 0xff;
ADDRLP4 8+116+2
CNSTU1 255
ASGNU1
line 393
;393:  ent.shaderRGBA[3] = 0xff;
ADDRLP4 8+116+3
CNSTU1 255
ASGNU1
line 395
;394:
;395:  switch(s1->constantLight)
ADDRLP4 268
ADDRLP4 244
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ASGNI4
ADDRLP4 276
CNSTI4 0
ASGNI4
ADDRLP4 268
INDIRI4
ADDRLP4 276
INDIRI4
EQI4 $315
ADDRLP4 268
INDIRI4
ADDRLP4 276
INDIRI4
LTI4 $313
LABELV $323
ADDRLP4 268
INDIRI4
CNSTI4 6
EQI4 $317
ADDRLP4 268
INDIRI4
CNSTI4 9
EQI4 $320
ADDRGP4 $313
JUMPV
line 396
;396:  {
LABELV $315
line 398
;397:    case NODE_MOVE:
;398:      ent.shaderRGBA[0] = 0;
ADDRLP4 8+116
CNSTU1 0
ASGNU1
line 399
;399:      break;
ADDRGP4 $313
JUMPV
LABELV $317
line 401
;400:    case NODE_JUMP:
;401:      ent.shaderRGBA[1] = 0;
ADDRLP4 8+116+1
CNSTU1 0
ASGNU1
line 402
;402:      break;
ADDRGP4 $313
JUMPV
LABELV $320
line 404
;403:    case NODE_LADDER:
;404:      ent.shaderRGBA[2] = 0;
ADDRLP4 8+116+2
CNSTU1 0
ASGNU1
line 405
;405:      break;
line 408
;406:    default:
;407:
;408:      break;
LABELV $313
line 416
;409:  }
;410:
;411://  ent.shaderRGBA[0] = s1->constantLight;//0xff;
;412://  ent.shaderRGBA[1] = 0xff;
;413://  ent.shaderRGBA[2] = 0xff;
;414://  ent.shaderRGBA[3] = 0xff;
;415:
;416:  VectorCopy(cent->lerpOrigin, origin);
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 417
;417:  origin[2] += 5;
ADDRLP4 152+8
ADDRLP4 152+8
INDIRF4
CNSTF4 1084227584
ADDF4
ASGNF4
line 419
;418:
;419:  VectorSubtract(cg.refdef.vieworg, origin, dir);
ADDRLP4 232
ADDRGP4 cg+110040+24
INDIRF4
ADDRLP4 152
INDIRF4
SUBF4
ASGNF4
ADDRLP4 232+4
ADDRGP4 cg+110040+24+4
INDIRF4
ADDRLP4 152+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 232+8
ADDRGP4 cg+110040+24+8
INDIRF4
ADDRLP4 152+8
INDIRF4
SUBF4
ASGNF4
line 420
;420:  CrossProduct(dir, up, vec);
ADDRLP4 232
ARGP4
ADDRLP4 252
ARGP4
ADDRLP4 164
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 421
;421:  VectorNormalize(vec);
ADDRLP4 164
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 426
;422:  //VectorMA(origin, -10 + 20 * sin(c * 2 * M_PI), vec, origin);
;423:
;424:  // if the view would be "inside" the sprite, kill the sprite
;425:  // so it doesn't add too much overdraw
;426:  VectorSubtract(origin, cg.refdef.vieworg, delta);
ADDRLP4 220
ADDRLP4 152
INDIRF4
ADDRGP4 cg+110040+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 220+4
ADDRLP4 152+4
INDIRF4
ADDRGP4 cg+110040+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 220+8
ADDRLP4 152+8
INDIRF4
ADDRGP4 cg+110040+24+8
INDIRF4
SUBF4
ASGNF4
line 427
;427:  len = VectorLength(delta);
ADDRLP4 220
ARGP4
ADDRLP4 284
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 264
ADDRLP4 284
INDIRF4
ASGNF4
line 428
;428:  if (len < 20)
ADDRLP4 264
INDIRF4
CNSTF4 1101004800
GEF4 $349
line 429
;429:  {
line 430
;430:    return;
ADDRGP4 $301
JUMPV
LABELV $349
line 433
;431:  }
;432:
;433:  node = s1->otherEntityNum;
ADDRLP4 148
ADDRLP4 244
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 435
;434:
;435:  negative = qfalse;
ADDRLP4 248
CNSTI4 0
ASGNI4
line 436
;436:  if (node < 0)
ADDRLP4 148
INDIRI4
CNSTI4 0
GEI4 $351
line 437
;437:  {
line 438
;438:    negative = qtrue;
ADDRLP4 248
CNSTI4 1
ASGNI4
line 439
;439:    node = -node;
ADDRLP4 148
ADDRLP4 148
INDIRI4
NEGI4
ASGNI4
line 440
;440:  }
LABELV $351
line 442
;441:
;442:  for(numdigits = 0;!(numdigits && !node);numdigits++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $356
JUMPV
LABELV $353
line 443
;443:  {
line 444
;444:    digits[numdigits] = node % 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 180
ADDP4
ADDRLP4 148
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 445
;445:    node = node / 10;
ADDRLP4 148
ADDRLP4 148
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 446
;446:  }
LABELV $354
line 442
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $356
ADDRLP4 288
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 288
INDIRI4
EQI4 $353
ADDRLP4 148
INDIRI4
ADDRLP4 288
INDIRI4
NEI4 $353
line 448
;447:
;448:  if (negative)
ADDRLP4 248
INDIRI4
CNSTI4 0
EQI4 $357
line 449
;449:  {
line 450
;450:    digits[numdigits] = 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 180
ADDP4
CNSTI4 10
ASGNI4
line 451
;451:    numdigits++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 452
;452:  }
LABELV $357
line 454
;453:
;454:  for(i = 0;i < numdigits;i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $362
JUMPV
LABELV $359
line 455
;455:  {
line 456
;456:    VectorMA(origin, (float)(((float)numdigits / 2) - i) * numberSize, vec, ent.origin);
ADDRLP4 8+68
ADDRLP4 152
INDIRF4
ADDRLP4 164
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ADDRLP4 176
INDIRI4
CVIF4 4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+68+4
ADDRLP4 152+4
INDIRF4
ADDRLP4 164+4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ADDRLP4 176
INDIRI4
CVIF4 4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+68+8
ADDRLP4 152+8
INDIRF4
ADDRLP4 164+8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ADDRLP4 176
INDIRI4
CVIF4 4
MULF4
MULF4
ADDF4
ASGNF4
line 457
;457:    ent.customShader = cgs.media.numberShaders[digits[numdigits - 1 - i]];
ADDRLP4 292
CNSTI4 2
ASGNI4
ADDRLP4 8+112
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ADDRLP4 292
INDIRI4
LSHI4
ADDRLP4 180
ADDP4
INDIRI4
ADDRLP4 292
INDIRI4
LSHI4
ADDRGP4 cgs+268684+180
ADDP4
INDIRI4
ASGNI4
line 458
;458:    trap_R_AddRefEntityToScene(&ent);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 459
;459:  }
LABELV $360
line 454
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $362
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $359
line 461
;460:#endif
;461:}
LABELV $301
endproc CG_AI_Node 296 12
proc CG_AI_Link 144 12
line 470
;462:
;463:/*
;464: ===============
;465: CG_AI_Link
;466: ===============
;467: */
;468:static void
;469:CG_AI_Link(centity_t * cent)
;470:{
line 474
;471:  refEntity_t beam;
;472:  entityState_t *s1;
;473:
;474:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 476
;475:
;476:  memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 478
;477:
;478:  VectorCopy(s1->pos.trBase, beam.origin);
ADDRLP4 0+68
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 479
;479:  VectorCopy(s1->origin2, beam.oldorigin);
ADDRLP4 0+84
ADDRLP4 140
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 483
;480:
;481:  //beam.reType = RT_BEAM;
;482:  //This may not work.
;483:  beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 484
;484:  beam.customShader = cgs.media.balloonShader; //If dont draw try others..
ADDRLP4 0+112
ADDRGP4 cgs+268684+16
INDIRI4
ASGNI4
line 485
;485:  trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 486
;486:}
LABELV $375
endproc CG_AI_Link 144 12
proc CG_Laser 180 16
line 495
;487:
;488:/*
;489: ===============
;490: CG_AI_Link
;491: ===============
;492: */
;493:static void
;494:CG_Laser(centity_t * cent)
;495:{
line 501
;496:  refEntity_t beam;
;497:  entityState_t *s1;
;498:  vec3_t  origin, forward, up;
;499:
;500:
;501:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 503
;502:
;503:  memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 505
;504:
;505:  cent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 507
;506:
;507:  BG_EvaluateTrajectory( &s1->pos, cg.time, origin );
ADDRLP4 140
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 156
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 509
;508:
;509:  VectorCopy ( cg_entities[ cent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
CNSTI4 1724
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+1556
ADDP4
INDIRB
ASGNB 12
line 510
;510:  beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 511
;511:  AngleVectors( cg_entities[ cent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
CNSTI4 1724
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+1568
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 144
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 512
;512:  VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
CNSTF4 3233808384
ADDRLP4 144
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 3233808384
ADDRLP4 144+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 3233808384
ADDRLP4 144+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 513
;513:  VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 156
INDIRB
ASGNB 12
line 516
;514:
;515:
;516:  VectorCopy(s1->pos.trBase, beam.origin);
ADDRLP4 0+68
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 517
;517:  VectorCopy(s1->origin2, beam.oldorigin);
ADDRLP4 0+84
ADDRLP4 140
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 519
;518:
;519:  beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 520
;520:  beam.customShader = cgs.media.laser; //If dont draw try others..
ADDRLP4 0+112
ADDRGP4 cgs+268684+640
INDIRI4
ASGNI4
line 521
;521:  trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 522
;522:}
LABELV $381
endproc CG_Laser 180 16
proc CG_LaunchMissile 32 8
line 531
;523:
;524:/*
;525: ===============
;526: CG_LaunchMissile
;527: ===============
;528: */
;529:static void
;530:CG_LaunchMissile(centity_t *cent)
;531:{
line 539
;532:  entityState_t *es;
;533:  const weaponInfo_t *wi;
;534:  particleSystem_t *ps;
;535:  trailSystem_t *ts;
;536:  weapon_t weapon;
;537:  weaponMode_t weaponMode;
;538:
;539:  es = &cent->currentState;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
line 541
;540:
;541:  weapon = es->weapon;
ADDRLP4 8
ADDRLP4 12
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 542
;542:  if (weapon > WP_NUM_WEAPONS)
ADDRLP4 8
INDIRI4
CNSTI4 30
LEI4 $408
line 543
;543:    weapon = WP_NONE;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $408
line 545
;544:
;545:  wi = &cg_weapons[weapon];
ADDRLP4 0
CNSTI4 900
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 546
;546:  weaponMode = es->generic1;
ADDRLP4 4
ADDRLP4 12
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 548
;547:
;548:  if (wi->wim[weaponMode].missileParticleSystem)
CNSTI4 168
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 0
EQI4 $410
line 549
;549:  {
line 550
;550:    ps = CG_SpawnNewParticleSystem(wi->wim[weaponMode].missileParticleSystem);
CNSTI4 168
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 76
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_SpawnNewParticleSystem
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 24
INDIRP4
ASGNP4
line 552
;551:
;552:    if (CG_IsParticleSystemValid(&ps))
ADDRLP4 16
ARGP4
ADDRLP4 28
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $412
line 553
;553:    {
line 554
;554:      CG_SetAttachmentCent(&ps->attachment, cent);
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 555
;555:      CG_AttachToCent(&ps->attachment);
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToCent
CALLV
pop
line 556
;556:    }
LABELV $412
line 557
;557:  }
LABELV $410
line 559
;558:
;559:  if (wi->wim[weaponMode].missileTrailSystem)
CNSTI4 168
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
EQI4 $414
line 560
;560:  {
line 561
;561:    ts = CG_SpawnNewTrailSystem(wi->wim[weaponMode].missileTrailSystem);
CNSTI4 168
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_SpawnNewTrailSystem
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 24
INDIRP4
ASGNP4
line 563
;562:
;563:    if (CG_IsTrailSystemValid(&ts))
ADDRLP4 20
ARGP4
ADDRLP4 28
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $416
line 564
;564:    {
line 565
;565:      CG_SetAttachmentCent(&ts->frontAttachment, cent);
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 566
;566:      CG_AttachToCent(&ts->frontAttachment);
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToCent
CALLV
pop
line 567
;567:    }
LABELV $416
line 568
;568:  }
LABELV $414
line 569
;569:}
LABELV $407
endproc CG_LaunchMissile 32 8
proc CG_Missile 192 20
line 578
;570:
;571:/*
;572: ===============
;573: CG_Missile
;574: ===============
;575: */
;576:static void
;577:CG_Missile(centity_t *cent)
;578:{
line 587
;579:  refEntity_t ent;
;580:  entityState_t *es;
;581:  const weaponInfo_t *wi;
;582:  weapon_t weapon;
;583:  weaponMode_t weaponMode;
;584:  const weaponInfoMode_t *wim;
;585:  vec3_t tempAngles;
;586:
;587:  es = &cent->currentState;
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
line 589
;588:
;589:  weapon = es->weapon;
ADDRLP4 148
ADDRLP4 144
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 590
;590:  if (weapon > WP_NUM_WEAPONS)
ADDRLP4 148
INDIRI4
CNSTI4 30
LEI4 $419
line 591
;591:    weapon = WP_NONE;
ADDRLP4 148
CNSTI4 0
ASGNI4
LABELV $419
line 593
;592:
;593:  wi = &cg_weapons[weapon];
ADDRLP4 152
CNSTI4 900
ADDRLP4 148
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 594
;594:  weaponMode = es->generic1;
ADDRLP4 156
ADDRLP4 144
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 596
;595:
;596:  wim = &wi->wim[weaponMode];
ADDRLP4 0
CNSTI4 168
ADDRLP4 156
INDIRI4
MULI4
ADDRLP4 152
INDIRP4
CNSTI4 60
ADDP4
ADDP4
ASGNP4
line 599
;597:
;598:  // calculate the axis
;599:  VectorCopy( es->angles, cent->lerpAngles );
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ADDRLP4 144
INDIRP4
CNSTI4 116
ADDP4
INDIRB
ASGNB 12
line 602
;600:
;601:  // add dynamic light
;602:  if (wim->missileDlight)
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
EQF4 $421
line 603
;603:  {
line 604
;604:    trap_R_AddLightToScene(cent->lerpOrigin, wim->missileDlight, wim->missileDlightColor[0], wim->missileDlightColor[1], wim->missileDlightColor[2]);
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 605
;605:  }
LABELV $421
line 608
;606:
;607:  // add missile sound
;608:  if (wim->missileSound)
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
EQI4 $423
line 609
;609:  {
line 612
;610:    vec3_t velocity;
;611:
;612:    BG_EvaluateTrajectoryDelta(&cent->currentState.pos, cg.time, velocity);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 172
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 614
;613:
;614:    trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, velocity, wim->missileSound);
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 184
INDIRP4
INDIRI4
ARGI4
ADDRLP4 184
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRLP4 172
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 615
;615:  }
LABELV $423
line 618
;616:
;617:  // create the render entity
;618:  memset(&ent, 0, sizeof(ent));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 619
;619:  VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 4+68
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 620
;620:  VectorCopy( cent->lerpOrigin, ent.oldorigin );
ADDRLP4 4+84
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 622
;621:
;622:  if (wim->usesSpriteMissle)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 0
EQI4 $428
line 623
;623:  {
line 624
;624:    ent.reType = RT_SPRITE;
ADDRLP4 4
CNSTI4 2
ASGNI4
line 625
;625:    ent.radius = wim->missileSpriteSize;
ADDRLP4 4+132
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 626
;626:    ent.rotation = 0;
ADDRLP4 4+136
CNSTF4 0
ASGNF4
line 627
;627:    ent.customShader = wim->missileSprite;
ADDRLP4 4+112
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
line 628
;628:    ent.shaderRGBA[0] = 0xFF;
ADDRLP4 4+116
CNSTU1 255
ASGNU1
line 629
;629:    ent.shaderRGBA[1] = 0xFF;
ADDRLP4 4+116+1
CNSTU1 255
ASGNU1
line 630
;630:    ent.shaderRGBA[2] = 0xFF;
ADDRLP4 4+116+2
CNSTU1 255
ASGNU1
line 631
;631:    ent.shaderRGBA[3] = 0xFF;
ADDRLP4 4+116+3
CNSTU1 255
ASGNU1
line 632
;632:  }
ADDRGP4 $429
JUMPV
LABELV $428
line 634
;633:  else
;634:  {
line 635
;635:    ent.hModel = wim->missileModel;
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 636
;636:    ent.renderfx = wim->missileRenderfx | RF_NOSHADOW;
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 639
;637:
;638:    // convert direction of travel into axis
;639:    if (VectorNormalize2(es->pos.trDelta, ent.axis[0]) == 0)
ADDRLP4 144
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 4+28
ARGP4
ADDRLP4 172
ADDRGP4 VectorNormalize2
CALLF4
ASGNF4
ADDRLP4 172
INDIRF4
CNSTF4 0
NEF4 $442
line 640
;640:      ent.axis[0][2] = 1;
ADDRLP4 4+28+8
CNSTF4 1065353216
ASGNF4
LABELV $442
line 643
;641:
;642:    // spin as it moves
;643:    if(weapon == WP_MINE)
ADDRLP4 148
INDIRI4
CNSTI4 11
NEI4 $447
line 644
;644:    {
line 645
;645:      AnglesToAxis(cent->lerpAngles, ent.axis);
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRLP4 4+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 646
;646:    }
ADDRGP4 $448
JUMPV
LABELV $447
line 647
;647:    else if(weapon == WP_AXE)
ADDRLP4 148
INDIRI4
CNSTI4 2
NEI4 $450
line 648
;648:    {
line 649
;649:      RotateAroundDirection(ent.axis, -90);
ADDRLP4 4+28
ARGP4
CNSTF4 3266576384
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 653
;650:      //VectorClear(tempAngles);
;651:      //AnglesToAxis(tempAngles, ent.axis);
;652:      //RotateAroundAxe(ent.axis, cg.time / 4);
;653:    }
ADDRGP4 $451
JUMPV
LABELV $450
line 654
;654:    else if (es->pos.trType != TR_STATIONARY)
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
EQI4 $453
line 655
;655:      RotateAroundDirection(ent.axis, cg.time / 4);
ADDRLP4 4+28
ARGP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
ADDRGP4 $454
JUMPV
LABELV $453
line 657
;656:    else
;657:      RotateAroundDirection(ent.axis, es->time);
ADDRLP4 4+28
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
LABELV $454
LABELV $451
LABELV $448
line 660
;658:
;659:
;660:    if (wim->missileAnimates)
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $458
line 661
;661:    {
line 662
;662:      int timeSinceStart = cg.time - es->time;
ADDRLP4 176
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
SUBI4
ASGNI4
line 664
;663:
;664:      if (wim->missileAnimLooping)
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 0
EQI4 $461
line 665
;665:      {
line 666
;666:        ent.frame = wim->missileAnimStartFrame + (int) ((timeSinceStart / 1000.0f) * wim->missileAnimFrameRate) % wim->missileAnimNumFrames;
ADDRLP4 4+80
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
MODI4
ADDI4
ASGNI4
line 667
;667:      }
ADDRGP4 $462
JUMPV
LABELV $461
line 669
;668:      else
;669:      {
line 670
;670:        ent.frame = wim->missileAnimStartFrame + (int) ((timeSinceStart / 1000.0f) * wim->missileAnimFrameRate);
ADDRLP4 4+80
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ADDI4
ASGNI4
line 672
;671:
;672:        if (ent.frame > (wim->missileAnimStartFrame + wim->missileAnimNumFrames))
ADDRLP4 4+80
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ADDI4
LEI4 $465
line 673
;673:          ent.frame = wim->missileAnimStartFrame + wim->missileAnimNumFrames;
ADDRLP4 4+80
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ADDI4
ASGNI4
LABELV $465
line 674
;674:      }
LABELV $462
line 675
;675:    }
LABELV $458
line 676
;676:  }
LABELV $429
line 679
;677:
;678:  //only refresh if there is something to display
;679:  if (wim->missileSprite || wim->missileModel)
ADDRLP4 176
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
NEI4 $471
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
EQI4 $469
LABELV $471
line 680
;680:    trap_R_AddRefEntityToScene(&ent);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $469
line 681
;681:}
LABELV $418
endproc CG_Missile 192 20
proc CG_Mover 144 12
line 690
;682:
;683:/*
;684: ===============
;685: CG_Mover
;686: ===============
;687: */
;688:static void
;689:CG_Mover(centity_t *cent)
;690:{
line 694
;691:  refEntity_t ent;
;692:  entityState_t *s1;
;693:
;694:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 697
;695:
;696:  // create the render entity
;697:  memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 698
;698:  VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 699
;699:  VectorCopy( cent->lerpOrigin, ent.oldorigin );
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 700
;700:  AnglesToAxis(cent->lerpAngles, ent.axis);
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 702
;701:
;702:  ent.renderfx = RF_NOSHADOW;
ADDRLP4 0+4
CNSTI4 64
ASGNI4
line 705
;703:
;704:  // flicker between two skins (FIXME?)
;705:  ent.skinNum = (cg.time >> 6) & 1;
ADDRLP4 0+104
ADDRGP4 cg+107604
INDIRI4
CNSTI4 6
RSHI4
CNSTI4 1
BANDI4
ASGNI4
line 708
;706:
;707:  // get the model, either as a bmodel or a modelindex
;708:  if (s1->solid == SOLID_BMODEL)
ADDRLP4 140
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $479
line 709
;709:    ent.hModel = cgs.inlineDrawModel[s1->modelindex];
ADDRLP4 0+8
ADDRLP4 140
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+37312
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $480
JUMPV
LABELV $479
line 711
;710:  else
;711:    ent.hModel = cgs.gameModels[s1->modelindex];
ADDRLP4 0+8
ADDRLP4 140
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34748
ADDP4
INDIRI4
ASGNI4
LABELV $480
line 714
;712:
;713:  // add to refresh list
;714:  trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 717
;715:
;716:  // add the secondary model
;717:  if (s1->modelindex2)
ADDRLP4 140
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 0
EQI4 $485
line 718
;718:  {
line 719
;719:    ent.skinNum = 0;
ADDRLP4 0+104
CNSTI4 0
ASGNI4
line 720
;720:    ent.hModel = cgs.gameModels[s1->modelindex2];
ADDRLP4 0+8
ADDRLP4 140
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34748
ADDP4
INDIRI4
ASGNI4
line 721
;721:    trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 722
;722:  }
LABELV $485
line 724
;723:
;724:}
LABELV $472
endproc CG_Mover 144 12
export CG_Beam
proc CG_Beam 144 12
line 735
;725:
;726:/*
;727: ===============
;728: CG_Beam
;729:
;730: Also called as an event
;731: ===============
;732: */
;733:void
;734:CG_Beam(centity_t *cent)
;735:{
line 739
;736:  refEntity_t ent;
;737:  entityState_t *s1;
;738:
;739:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 742
;740:
;741:  // create the render entity
;742:  memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 743
;743:  VectorCopy( s1->pos.trBase, ent.origin );
ADDRLP4 0+68
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 744
;744:  VectorCopy( s1->origin2, ent.oldorigin );
ADDRLP4 0+84
ADDRLP4 140
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 745
;745:  AxisClear(ent.axis);
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 746
;746:  ent.reType = RT_BEAM;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 748
;747:
;748:  ent.renderfx = RF_NOSHADOW;
ADDRLP4 0+4
CNSTI4 64
ASGNI4
line 751
;749:
;750:  // add to refresh list
;751:  trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 752
;752:}
LABELV $490
endproc CG_Beam 144 12
proc CG_Portal 144 12
line 761
;753:
;754:/*
;755: ===============
;756: CG_Portal
;757: ===============
;758: */
;759:static void
;760:CG_Portal(centity_t *cent)
;761:{
line 765
;762:  refEntity_t ent;
;763:  entityState_t *s1;
;764:
;765:  s1 = &cent->currentState;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
line 768
;766:
;767:  // create the render entity
;768:  memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 769
;769:  VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 770
;770:  VectorCopy( s1->origin2, ent.oldorigin );
ADDRLP4 0+84
ADDRLP4 140
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 771
;771:  ByteToDir(s1->eventParm, ent.axis[0]);
ADDRLP4 140
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 0+28
ARGP4
ADDRGP4 ByteToDir
CALLV
pop
line 772
;772:  PerpendicularVector(ent.axis[1], ent.axis[0]);
ADDRLP4 0+28+12
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 776
;773:
;774:  // negating this tends to get the directions like they want
;775:  // we really should have a camera roll value
;776:  VectorSubtract( vec3_origin, ent.axis[ 1 ], ent.axis[ 1 ] );
ADDRLP4 0+28+12
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 0+28+12
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 0+28+12+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRGP4 vec3_origin+8
INDIRF4
ADDRLP4 0+28+12+8
INDIRF4
SUBF4
ASGNF4
line 778
;777:
;778:  CrossProduct(ent.axis[0], ent.axis[1], ent.axis[2]);
ADDRLP4 0+28
ARGP4
ADDRLP4 0+28+12
ARGP4
ADDRLP4 0+28+24
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 779
;779:  ent.reType = RT_PORTALSURFACE;
ADDRLP4 0
CNSTI4 7
ASGNI4
line 780
;780:  ent.oldframe = s1->powerups;
ADDRLP4 0+96
ADDRLP4 140
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 781
;781:  ent.frame = s1->frame; // rotation speed
ADDRLP4 0+80
ADDRLP4 140
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 782
;782:  ent.skinNum = s1->clientNum / 256.0 * 360; // roll offset
ADDRLP4 0+104
CNSTF4 1135869952
ADDRLP4 140
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1132462080
DIVF4
MULF4
CVFI4 4
ASGNI4
line 785
;783:
;784:  // add to refresh list
;785:  trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 786
;786:}
LABELV $495
endproc CG_Portal 144 12
proc CG_LightFlare 332 28
line 806
;787:
;788://============================================================================
;789:
;790:#define SETBOUNDS(v1,v2,r)  ((v1)[0]=(-r/2),(v1)[1]=(-r/2),(v1)[2]=(-r/2),\
;791:                             (v2)[0]=(r/2),(v2)[1]=(r/2),(v2)[2]=(r/2))
;792:#define RADIUSSTEP          0.5f
;793:
;794:#define FLARE_OFF       0
;795:#define FLARE_NOFADE    1
;796:#define FLARE_TIMEFADE  2
;797:#define FLARE_REALFADE  3
;798:
;799:/*
;800: =========================
;801: CG_LightFlare
;802: =========================
;803: */
;804:static void
;805:CG_LightFlare(centity_t *cent)
;806:{
line 814
;807:  refEntity_t flare;
;808:  entityState_t *es;
;809:  vec3_t forward, delta;
;810:  float len;
;811:  trace_t tr;
;812:  float maxAngle;
;813:  vec3_t mins, maxs, start, end;
;814:  float srcRadius, srLocal, ratio = 1.0f;
ADDRLP4 156
CNSTF4 1065353216
ASGNF4
line 817
;815:  int entityNum;
;816:
;817:  es = &cent->currentState;
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
line 819
;818:
;819:  if (cg.renderingThirdPerson)
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $529
line 820
;820:    entityNum = MAGIC_TRACE_HACK;
ADDRLP4 224
CNSTI4 -2
ASGNI4
ADDRGP4 $530
JUMPV
LABELV $529
line 822
;821:  else
;822:    entityNum = cg.predictedPlayerState.clientNum;
ADDRLP4 224
ADDRGP4 cg+107636+140
INDIRI4
ASGNI4
LABELV $530
line 825
;823:
;824:  //don't draw light flares
;825:  if (cg_lightFlare.integer == FLARE_OFF)
ADDRGP4 cg_lightFlare+12
INDIRI4
CNSTI4 0
NEI4 $534
line 826
;826:    return;
ADDRGP4 $528
JUMPV
LABELV $534
line 829
;827:
;828:  //flare is "off"
;829:  if (es->eFlags & EF_NODRAW)
ADDRLP4 152
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $537
line 830
;830:    return;
ADDRGP4 $528
JUMPV
LABELV $537
line 832
;831:
;832:  CG_Trace(&tr, cg.refdef.vieworg, NULL, NULL, es->angles2, entityNum, MASK_SHOT);
ADDRLP4 160
ARGP4
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 300
CNSTP4 0
ASGNP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 224
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 836
;833:
;834:  //if there is no los between the view and the flare source
;835:  //it definately cannot be seen
;836:  if (tr.fraction < 1.0f || tr.allsolid)
ADDRLP4 160+8
INDIRF4
CNSTF4 1065353216
LTF4 $544
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $541
LABELV $544
line 837
;837:    return;
ADDRGP4 $528
JUMPV
LABELV $541
line 839
;838:
;839:  memset(&flare, 0, sizeof(flare));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 841
;840:
;841:  flare.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 842
;842:  flare.customShader = cgs.gameShaders[es->modelindex];
ADDRLP4 0+112
ADDRLP4 152
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+35772
ADDP4
INDIRI4
ASGNI4
line 843
;843:  flare.shaderRGBA[0] = 0xFF;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 844
;844:  flare.shaderRGBA[1] = 0xFF;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 845
;845:  flare.shaderRGBA[2] = 0xFF;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 846
;846:  flare.shaderRGBA[3] = 0xFF;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 849
;847:
;848:  //flares always drawn before the rest of the scene
;849:  flare.renderfx |= RF_DEPTHHACK;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 852
;850:
;851:  //bunch of geometry
;852:  AngleVectors(es->angles, forward, NULL, NULL);
ADDRLP4 152
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRLP4 244
ARGP4
ADDRLP4 304
CNSTP4 0
ASGNP4
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 304
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 853
;853:  VectorCopy( cent->lerpOrigin, flare.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 854
;854:  VectorSubtract( flare.origin, cg.refdef.vieworg, delta );
ADDRLP4 140
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+110040+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+110040+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+110040+24+8
INDIRF4
SUBF4
ASGNF4
line 855
;855:  len = VectorLength(delta);
ADDRLP4 140
ARGP4
ADDRLP4 308
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 220
ADDRLP4 308
INDIRF4
ASGNF4
line 856
;856:  VectorNormalize(delta);
ADDRLP4 140
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 859
;857:
;858:  //flare is too close to camera to be drawn
;859:  if (len < es->generic1)
ADDRLP4 220
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CVIF4 4
GEF4 $571
line 860
;860:    return;
ADDRGP4 $528
JUMPV
LABELV $571
line 863
;861:
;862:  //don't bother for flares behind the view plane
;863:  if (DotProduct( delta, cg.refdef.viewaxis[ 0 ] ) < 0.0)
ADDRLP4 140
INDIRF4
ADDRGP4 cg+110040+36
INDIRF4
MULF4
ADDRLP4 140+4
INDIRF4
ADDRGP4 cg+110040+36+4
INDIRF4
MULF4
ADDF4
ADDRLP4 140+8
INDIRF4
ADDRGP4 cg+110040+36+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
GEF4 $573
line 864
;864:    return;
ADDRGP4 $528
JUMPV
LABELV $573
line 867
;865:
;866:  //only recalculate radius and ratio every three frames
;867:  if (!(cg.clientFrame % 2))
ADDRGP4 cg
INDIRI4
CNSTI4 2
MODI4
CNSTI4 0
NEI4 $585
line 868
;868:  {
line 870
;869:    //can only see the flare when in front of it
;870:    flare.radius = len / es->origin2[0];
ADDRLP4 0+132
ADDRLP4 220
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
DIVF4
ASGNF4
line 872
;871:
;872:    if (es->origin2[2] == 0)
ADDRLP4 152
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 0
NEF4 $588
line 873
;873:      srcRadius = srLocal = flare.radius / 2.0f;
ADDRLP4 312
ADDRLP4 0+132
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 296
ADDRLP4 312
INDIRF4
ASGNF4
ADDRLP4 240
ADDRLP4 312
INDIRF4
ASGNF4
ADDRGP4 $589
JUMPV
LABELV $588
line 875
;874:    else
;875:      srcRadius = srLocal = len / es->origin2[2];
ADDRLP4 316
ADDRLP4 220
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
DIVF4
ASGNF4
ADDRLP4 296
ADDRLP4 316
INDIRF4
ASGNF4
ADDRLP4 240
ADDRLP4 316
INDIRF4
ASGNF4
LABELV $589
line 877
;876:
;877:    maxAngle = es->origin2[1];
ADDRLP4 268
ADDRLP4 152
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ASGNF4
line 879
;878:
;879:    if (maxAngle > 0.0f)
ADDRLP4 268
INDIRF4
CNSTF4 0
LEF4 $591
line 880
;880:    {
line 881
;881:      float radiusMod = 1.0f - (180.0f - RAD2DEG(
ADDRLP4 140
INDIRF4
ADDRLP4 244
INDIRF4
MULF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 244+4
INDIRF4
MULF4
ADDF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 244+8
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 324
ADDRGP4 acos
CALLF4
ASGNF4
ADDRLP4 328
CNSTF4 1127481344
ASGNF4
ADDRLP4 320
CNSTF4 1065353216
ADDRLP4 328
INDIRF4
ADDRLP4 328
INDIRF4
ADDRLP4 324
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
SUBF4
ADDRLP4 268
INDIRF4
DIVF4
SUBF4
ASGNF4
line 884
;882:          acos( DotProduct( delta, forward ) ) )) / maxAngle;
;883:
;884:      if (radiusMod < 0.0f)
ADDRLP4 320
INDIRF4
CNSTF4 0
GEF4 $597
line 885
;885:        radiusMod = 0.0f;
ADDRLP4 320
CNSTF4 0
ASGNF4
LABELV $597
line 887
;886:
;887:      flare.radius *= radiusMod;
ADDRLP4 0+132
ADDRLP4 0+132
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ASGNF4
line 888
;888:    }
LABELV $591
line 890
;889:
;890:    if (flare.radius < 0.0f)
ADDRLP4 0+132
INDIRF4
CNSTF4 0
GEF4 $600
line 891
;891:      flare.radius = 0.0f;
ADDRLP4 0+132
CNSTF4 0
ASGNF4
LABELV $600
line 893
;892:
;893:    VectorMA( flare.origin, -flare.radius, delta, end );
ADDRLP4 228
ADDRLP4 0+68
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 0+132
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 228+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 0+132
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 228+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 0+132
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 894
;894:    VectorMA( cg.refdef.vieworg, flare.radius, delta, start );
ADDRLP4 256
ADDRGP4 cg+110040+24
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 0+132
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 256+4
ADDRGP4 cg+110040+24+4
INDIRF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 0+132
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 256+8
ADDRGP4 cg+110040+24+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 0+132
INDIRF4
MULF4
ADDF4
ASGNF4
line 896
;895:
;896:    if (cg_lightFlare.integer == FLARE_REALFADE)
ADDRGP4 cg_lightFlare+12
INDIRI4
CNSTI4 3
NEI4 $631
line 897
;897:    {
line 899
;898:      //"correct" flares
;899:      CG_BiSphereTrace(&tr, cg.refdef.vieworg, end, 1.0f, srcRadius, entityNum, MASK_SHOT);
ADDRLP4 160
ARGP4
ADDRGP4 cg+110040+24
ARGP4
ADDRLP4 228
ARGP4
CNSTF4 1065353216
ARGF4
ADDRLP4 240
INDIRF4
ARGF4
ADDRLP4 224
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_BiSphereTrace
CALLV
pop
line 901
;900:
;901:      if (tr.fraction < 1.0f)
ADDRLP4 160+8
INDIRF4
CNSTF4 1065353216
GEF4 $636
line 902
;902:        ratio = tr.lateralFraction;
ADDRLP4 156
ADDRLP4 160+56
INDIRF4
ASGNF4
ADDRGP4 $586
JUMPV
LABELV $636
line 904
;903:      else
;904:        ratio = 1.0f;
ADDRLP4 156
CNSTF4 1065353216
ASGNF4
line 905
;905:    }
ADDRGP4 $586
JUMPV
LABELV $631
line 906
;906:    else if (cg_lightFlare.integer == FLARE_TIMEFADE)
ADDRGP4 cg_lightFlare+12
INDIRI4
CNSTI4 2
NEI4 $640
line 907
;907:    {
line 909
;908:      //draw timed flares
;909:      SETBOUNDS( mins, maxs, srcRadius );
ADDRLP4 320
ADDRLP4 240
INDIRF4
NEGF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 272
ADDRLP4 320
INDIRF4
ASGNF4
ADDRLP4 272+4
ADDRLP4 320
INDIRF4
ASGNF4
ADDRLP4 272+8
ADDRLP4 240
INDIRF4
NEGF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 324
ADDRLP4 240
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 284
ADDRLP4 324
INDIRF4
ASGNF4
ADDRLP4 284+4
ADDRLP4 324
INDIRF4
ASGNF4
ADDRLP4 284+8
ADDRLP4 240
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 910
;910:      CG_Trace(&tr, start, mins, maxs, end, entityNum, MASK_SHOT);
ADDRLP4 160
ARGP4
ADDRLP4 256
ARGP4
ADDRLP4 272
ARGP4
ADDRLP4 284
ARGP4
ADDRLP4 228
ARGP4
ADDRLP4 224
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 912
;911:
;912:      if ((tr.fraction < 1.0f || tr.startsolid) && cent->lfs.status)
ADDRLP4 160+8
INDIRF4
CNSTF4 1065353216
LTF4 $651
ADDRLP4 160+4
INDIRI4
CNSTI4 0
EQI4 $647
LABELV $651
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
INDIRI4
CNSTI4 0
EQI4 $647
line 913
;913:      {
line 914
;914:        cent->lfs.status = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
CNSTI4 0
ASGNI4
line 915
;915:        cent->lfs.lastTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 916
;916:      }
ADDRGP4 $648
JUMPV
LABELV $647
line 917
;917:      else if ((tr.fraction == 1.0f && !tr.startsolid) && !cent->lfs.status)
ADDRLP4 160+8
INDIRF4
CNSTF4 1065353216
NEF4 $653
ADDRLP4 328
CNSTI4 0
ASGNI4
ADDRLP4 160+4
INDIRI4
ADDRLP4 328
INDIRI4
NEI4 $653
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
INDIRI4
ADDRLP4 328
INDIRI4
NEI4 $653
line 918
;918:      {
line 919
;919:        cent->lfs.status = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
CNSTI4 1
ASGNI4
line 920
;920:        cent->lfs.lastTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 921
;921:      }
LABELV $653
LABELV $648
line 924
;922:
;923:      //fade flare up
;924:      if (cent->lfs.status)
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
INDIRI4
CNSTI4 0
EQI4 $658
line 925
;925:      {
line 926
;926:        if (cent->lfs.lastTime + es->time > cg.time)
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
INDIRI4
ADDRLP4 152
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $660
line 927
;927:          ratio = (float) (cg.time - cent->lfs.lastTime) / es->time;
ADDRLP4 156
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 152
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
LABELV $660
line 928
;928:      }
LABELV $658
line 931
;929:
;930:      //fade flare down
;931:      if (!cent->lfs.status)
ADDRFP4 0
INDIRP4
CNSTI4 1660
ADDP4
INDIRI4
CNSTI4 0
NEI4 $586
line 932
;932:      {
line 933
;933:        if (cent->lfs.lastTime + es->time > cg.time)
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
INDIRI4
ADDRLP4 152
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $666
line 934
;934:        {
line 935
;935:          ratio = (float) (cg.time - cent->lfs.lastTime) / es->time;
ADDRLP4 156
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1656
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 152
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 936
;936:          ratio = 1.0f - ratio;
ADDRLP4 156
CNSTF4 1065353216
ADDRLP4 156
INDIRF4
SUBF4
ASGNF4
line 937
;937:        }
ADDRGP4 $586
JUMPV
LABELV $666
line 939
;938:        else
;939:          ratio = 0.0f;
ADDRLP4 156
CNSTF4 0
ASGNF4
line 940
;940:      }
line 941
;941:    }
ADDRGP4 $586
JUMPV
LABELV $640
line 942
;942:    else if (cg_lightFlare.integer == FLARE_NOFADE)
ADDRGP4 cg_lightFlare+12
INDIRI4
CNSTI4 1
NEI4 $586
line 943
;943:    {
line 945
;944:      //draw nofade flares
;945:      SETBOUNDS( mins, maxs, srcRadius );
ADDRLP4 320
ADDRLP4 240
INDIRF4
NEGF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 272
ADDRLP4 320
INDIRF4
ASGNF4
ADDRLP4 272+4
ADDRLP4 320
INDIRF4
ASGNF4
ADDRLP4 272+8
ADDRLP4 240
INDIRF4
NEGF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 324
ADDRLP4 240
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
ADDRLP4 284
ADDRLP4 324
INDIRF4
ASGNF4
ADDRLP4 284+4
ADDRLP4 324
INDIRF4
ASGNF4
ADDRLP4 284+8
ADDRLP4 240
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 946
;946:      CG_Trace(&tr, start, mins, maxs, end, entityNum, MASK_SHOT);
ADDRLP4 160
ARGP4
ADDRLP4 256
ARGP4
ADDRLP4 272
ARGP4
ADDRLP4 284
ARGP4
ADDRLP4 228
ARGP4
ADDRLP4 224
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 949
;947:
;948:      //flare source occluded
;949:      if ((tr.fraction < 1.0f || tr.startsolid))
ADDRLP4 160+8
INDIRF4
CNSTF4 1065353216
LTF4 $681
ADDRLP4 160+4
INDIRI4
CNSTI4 0
EQI4 $586
LABELV $681
line 950
;950:        ratio = 0.0f;
ADDRLP4 156
CNSTF4 0
ASGNF4
line 951
;951:    }
line 952
;952:  }
ADDRGP4 $586
JUMPV
LABELV $585
line 954
;953:  else
;954:  {
line 955
;955:    ratio = cent->lfs.lastRatio;
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 1652
ADDP4
INDIRF4
ASGNF4
line 956
;956:    flare.radius = cent->lfs.lastRadius;
ADDRLP4 0+132
ADDRFP4 0
INDIRP4
CNSTI4 1648
ADDP4
INDIRF4
ASGNF4
line 957
;957:  }
LABELV $586
line 959
;958:
;959:  cent->lfs.lastRatio = ratio;
ADDRFP4 0
INDIRP4
CNSTI4 1652
ADDP4
ADDRLP4 156
INDIRF4
ASGNF4
line 960
;960:  cent->lfs.lastRadius = flare.radius;
ADDRFP4 0
INDIRP4
CNSTI4 1648
ADDP4
ADDRLP4 0+132
INDIRF4
ASGNF4
line 962
;961:
;962:  if (ratio < 1.0f)
ADDRLP4 156
INDIRF4
CNSTF4 1065353216
GEF4 $684
line 963
;963:  {
line 964
;964:    flare.radius *= ratio;
ADDRLP4 0+132
ADDRLP4 0+132
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 965
;965:    flare.shaderRGBA[3] = (byte) ((float) flare.shaderRGBA[3] * ratio);
ADDRLP4 316
ADDRLP4 0+116+3
INDIRU1
CVUI4 1
CVIF4 4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $692
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $693
JUMPV
LABELV $692
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $693
ADDRLP4 0+116+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 966
;966:  }
LABELV $684
line 968
;967:
;968:  if (flare.radius <= 0.0f)
ADDRLP4 0+132
INDIRF4
CNSTF4 0
GTF4 $694
line 969
;969:    return;
ADDRGP4 $528
JUMPV
LABELV $694
line 971
;970:
;971:  trap_R_AddRefEntityToScene(&flare);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 972
;972:}
LABELV $528
endproc CG_LightFlare 332 28
proc CG_Lev2ZapChain 32 8
line 981
;973:
;974:/*
;975: =========================
;976: CG_Lev2ZapChain
;977: =========================
;978: */
;979:static void
;980:CG_Lev2ZapChain(centity_t *cent)
;981:{
line 984
;982:  int i;
;983:  entityState_t *es;
;984:  centity_t *source = NULL, *target = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRLP4 12
CNSTP4 0
ASGNP4
line 986
;985:
;986:  es = &cent->currentState;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 988
;987:
;988:  for(i = 0;i <= 2;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $698
line 989
;989:  {
line 990
;990:    switch(i)
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $704
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $707
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $710
ADDRGP4 $702
JUMPV
line 991
;991:    {
LABELV $704
line 993
;992:      case 0:
;993:        if (es->time <= 0)
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
GTI4 $705
line 994
;994:          continue;
ADDRGP4 $699
JUMPV
LABELV $705
line 996
;995:
;996:        source = &cg_entities[es->powerups];
ADDRLP4 8
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 997
;997:        target = &cg_entities[es->time];
ADDRLP4 12
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 998
;998:        break;
ADDRGP4 $703
JUMPV
LABELV $707
line 1001
;999:
;1000:      case 1:
;1001:        if (es->time2 <= 0)
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
GTI4 $708
line 1002
;1002:          continue;
ADDRGP4 $699
JUMPV
LABELV $708
line 1004
;1003:
;1004:        source = &cg_entities[es->time];
ADDRLP4 8
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1005
;1005:        target = &cg_entities[es->time2];
ADDRLP4 12
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1006
;1006:        break;
ADDRGP4 $703
JUMPV
LABELV $710
line 1009
;1007:
;1008:      case 2:
;1009:        if (es->constantLight <= 0)
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 0
GTI4 $711
line 1010
;1010:          continue;
ADDRGP4 $699
JUMPV
LABELV $711
line 1012
;1011:
;1012:        source = &cg_entities[es->time2];
ADDRLP4 8
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1013
;1013:        target = &cg_entities[es->constantLight];
ADDRLP4 12
CNSTI4 1724
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1014
;1014:        break;
LABELV $702
LABELV $703
line 1017
;1015:    }
;1016:
;1017:    if (!CG_IsTrailSystemValid(&cent->level2ZapTS[i]))
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $713
line 1018
;1018:      cent->level2ZapTS[i] = CG_SpawnNewTrailSystem(cgs.media.level2ZapTS);
ADDRGP4 cgs+268684+12
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_SpawnNewTrailSystem
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
ADDRLP4 24
INDIRP4
ASGNP4
LABELV $713
line 1020
;1019:
;1020:    if (CG_IsTrailSystemValid(&cent->level2ZapTS[i]))
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $717
line 1021
;1021:    {
line 1022
;1022:      CG_SetAttachmentCent(&cent->level2ZapTS[i]->frontAttachment, source);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 1023
;1023:      CG_SetAttachmentCent(&cent->level2ZapTS[i]->backAttachment, target);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 1024
;1024:      CG_AttachToCent(&cent->level2ZapTS[i]->frontAttachment);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToCent
CALLV
pop
line 1025
;1025:      CG_AttachToCent(&cent->level2ZapTS[i]->backAttachment);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRGP4 CG_AttachToCent
CALLV
pop
line 1026
;1026:    }
LABELV $717
line 1027
;1027:  }
LABELV $699
line 988
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LEI4 $698
line 1028
;1028:}
LABELV $697
endproc CG_Lev2ZapChain 32 8
export CG_AdjustPositionForMover
proc CG_AdjustPositionForMover 88 12
line 1039
;1029:
;1030:/*
;1031: =========================
;1032: CG_AdjustPositionForMover
;1033:
;1034: Also called by client movement prediction code
;1035: =========================
;1036: */
;1037:void
;1038:CG_AdjustPositionForMover(const vec3_t in, int moverNum, int fromTime, int toTime, vec3_t out)
;1039:{
line 1044
;1040:  centity_t *cent;
;1041:  vec3_t oldOrigin, origin, deltaOrigin;
;1042:  vec3_t oldAngles, angles, deltaAngles;
;1043:
;1044:  if (moverNum <= 0 || moverNum >= ENTITYNUM_MAX_NORMAL)
ADDRLP4 76
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
LEI4 $722
ADDRLP4 76
INDIRI4
CNSTI4 1022
LTI4 $720
LABELV $722
line 1045
;1045:  {
line 1046
;1046:    VectorCopy( in, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1047
;1047:    return;
ADDRGP4 $719
JUMPV
LABELV $720
line 1050
;1048:  }
;1049:
;1050:  cent = &cg_entities[moverNum];
ADDRLP4 0
CNSTI4 1724
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1052
;1051:
;1052:  if (cent->currentState.eType != ET_MOVER)
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
EQI4 $723
line 1053
;1053:  {
line 1054
;1054:    VectorCopy( in, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1055
;1055:    return;
ADDRGP4 $719
JUMPV
LABELV $723
line 1058
;1056:  }
;1057:
;1058:  BG_EvaluateTrajectory(&cent->currentState.pos, fromTime, oldOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1059
;1059:  BG_EvaluateTrajectory(&cent->currentState.apos, fromTime, oldAngles);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1061
;1060:
;1061:  BG_EvaluateTrajectory(&cent->currentState.pos, toTime, origin);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1062
;1062:  BG_EvaluateTrajectory(&cent->currentState.apos, toTime, angles);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 52
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1064
;1063:
;1064:  VectorSubtract( origin, oldOrigin, deltaOrigin );
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 1065
;1065:  VectorSubtract( angles, oldAngles, deltaAngles );
ADDRLP4 64
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+4
ADDRLP4 52+4
INDIRF4
ADDRLP4 40+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+8
ADDRLP4 52+8
INDIRF4
ADDRLP4 40+8
INDIRF4
SUBF4
ASGNF4
line 1067
;1066:
;1067:  VectorAdd( in, deltaOrigin, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 80
CNSTI4 4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
CNSTI4 8
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDF4
ASGNF4
line 1070
;1068:
;1069:  // FIXME: origin change when on a rotating object
;1070:}
LABELV $719
endproc CG_AdjustPositionForMover 88 12
proc CG_InterpolateEntityPosition 44 12
line 1079
;1071:
;1072:/*
;1073: =============================
;1074: CG_InterpolateEntityPosition
;1075: =============================
;1076: */
;1077:static void
;1078:CG_InterpolateEntityPosition(centity_t *cent)
;1079:{
line 1085
;1080:  vec3_t current, next;
;1081:  float f;
;1082:
;1083:  // it would be an internal error to find an entity that interpolates without
;1084:  // a snapshot ahead of the current one
;1085:  if (cg.nextSnap == NULL)
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $740
line 1086
;1086:    CG_Error("CG_InterpoateEntityPosition: cg.nextSnap == NULL");
ADDRGP4 $743
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $740
line 1088
;1087:
;1088:  f = cg.frameInterpolation;
ADDRLP4 24
ADDRGP4 cg+107588
INDIRF4
ASGNF4
line 1092
;1089:
;1090:  // this will linearize a sine or parabolic curve, but it is important
;1091:  // to not extrapolate player positions if more recent data is available
;1092:  BG_EvaluateTrajectory(&cent->currentState.pos, cg.snap->serverTime, current);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1093
;1093:  BG_EvaluateTrajectory(&cent->nextState.pos, cg.nextSnap->serverTime, next);
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
ADDRGP4 cg+40
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1095
;1094:
;1095:  cent->lerpOrigin[0] = current[0] + f * (next[0] - current[0]);
ADDRLP4 28
ADDRLP4 0
INDIRF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
ADDRLP4 28
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1096
;1096:  cent->lerpOrigin[1] = current[1] + f * (next[1] - current[1]);
ADDRFP4 0
INDIRP4
CNSTI4 1560
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1097
;1097:  cent->lerpOrigin[2] = current[2] + f * (next[2] - current[2]);
ADDRFP4 0
INDIRP4
CNSTI4 1564
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1099
;1098:
;1099:  BG_EvaluateTrajectory(&cent->currentState.apos, cg.snap->serverTime, current);
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1100
;1100:  BG_EvaluateTrajectory(&cent->nextState.apos, cg.nextSnap->serverTime, next);
ADDRFP4 0
INDIRP4
CNSTI4 256
ADDP4
ARGP4
ADDRGP4 cg+40
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1102
;1101:
;1102:  cent->lerpAngles[0] = LerpAngle(current[0], next[0], f);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 1103
;1103:  cent->lerpAngles[1] = LerpAngle(current[1], next[1], f);
ADDRLP4 0+4
INDIRF4
ARGF4
ADDRLP4 12+4
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1572
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 1104
;1104:  cent->lerpAngles[2] = LerpAngle(current[2], next[2], f);
ADDRLP4 0+8
INDIRF4
ARGF4
ADDRLP4 12+8
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1576
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 1106
;1105:
;1106:}
LABELV $739
endproc CG_InterpolateEntityPosition 44 12
proc CG_CalcEntityLerpPositions 24 20
line 1116
;1107:
;1108:/*
;1109: ===============
;1110: CG_CalcEntityLerpPositions
;1111:
;1112: ===============
;1113: */
;1114:static void
;1115:CG_CalcEntityLerpPositions(centity_t *cent)
;1116:{
line 1118
;1117:  // if this player does not want to see extrapolated players
;1118:  if (!cg_smoothClients.integer)
ADDRGP4 cg_smoothClients+12
INDIRI4
CNSTI4 0
NEI4 $760
line 1119
;1119:  {
line 1121
;1120:    // make sure the clients use TR_INTERPOLATE
;1121:    if (cent->currentState.number < MAX_CLIENTS)
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 64
GEI4 $763
line 1122
;1122:    {
line 1123
;1123:      cent->currentState.pos.trType = TR_INTERPOLATE;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 1124
;1124:      cent->nextState.pos.trType = TR_INTERPOLATE;
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
CNSTI4 1
ASGNI4
line 1125
;1125:    }
LABELV $763
line 1126
;1126:  }
LABELV $760
line 1128
;1127:
;1128:  if (cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE)
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
EQI4 $765
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
NEI4 $765
line 1129
;1129:  {
line 1130
;1130:    CG_InterpolateEntityPosition(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_InterpolateEntityPosition
CALLV
pop
line 1131
;1131:    return;
ADDRGP4 $759
JUMPV
LABELV $765
line 1136
;1132:  }
;1133:
;1134:  // first see if we can interpolate between two snaps for
;1135:  // linear extrapolated clients
;1136:  if (cent->interpolate && cent->currentState.pos.trType == TR_LINEAR_STOP && cent->currentState.number < MAX_CLIENTS)
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
EQI4 $767
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 3
NEI4 $767
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 64
GEI4 $767
line 1137
;1137:  {
line 1138
;1138:    CG_InterpolateEntityPosition(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_InterpolateEntityPosition
CALLV
pop
line 1139
;1139:    return;
ADDRGP4 $759
JUMPV
LABELV $767
line 1143
;1140:  }
;1141:
;1142:  // just use the current frame and evaluate as best we can
;1143:  BG_EvaluateTrajectory(&cent->currentState.pos, cg.time, cent->lerpOrigin);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1144
;1144:  BG_EvaluateTrajectory(&cent->currentState.apos, cg.time, cent->lerpAngles);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1148
;1145:
;1146:  // adjust for riding a mover if it wasn't rolled into the predicted
;1147:  // player state
;1148:  if (cent != &cg.predictedPlayerEntity)
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+108104
CVPU4 4
EQU4 $771
line 1149
;1149:  {
line 1150
;1150:    CG_AdjustPositionForMover(cent->lerpOrigin, cent->currentState.groundEntityNum, cg.snap->serverTime, cg.time, cent->lerpOrigin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 1556
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 CG_AdjustPositionForMover
CALLV
pop
line 1151
;1151:  }
LABELV $771
line 1152
;1152:}
LABELV $759
endproc CG_CalcEntityLerpPositions 24 20
proc CG_CEntityPVSEnter 16 8
line 1162
;1153:
;1154:/*
;1155: ===============
;1156: CG_CEntityPVSEnter
;1157:
;1158: ===============
;1159: */
;1160:static void
;1161:CG_CEntityPVSEnter(centity_t *cent)
;1162:{
line 1163
;1163:  entityState_t *es = &cent->currentState;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 1165
;1164:
;1165:  if (cg_debugPVS.integer)
ADDRGP4 cg_debugPVS+12
INDIRI4
CNSTI4 0
EQI4 $777
line 1166
;1166:    CG_Printf("Entity %d entered PVS\n", cent->currentState.number);
ADDRGP4 $780
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $777
line 1168
;1167:
;1168:  switch(es->eType)
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 4
EQI4 $784
ADDRGP4 $781
JUMPV
line 1169
;1169:  {
LABELV $784
line 1171
;1170:    case ET_MISSILE:
;1171:      CG_LaunchMissile(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LaunchMissile
CALLV
pop
line 1172
;1172:      break;
LABELV $781
LABELV $782
line 1176
;1173:  }
;1174:
;1175:  //clear any particle systems from previous uses of this centity_t
;1176:  cent->muzzlePS = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 1668
ADDP4
CNSTP4 0
ASGNP4
line 1177
;1177:  cent->muzzlePsTrigger = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1672
ADDP4
CNSTI4 0
ASGNI4
line 1178
;1178:  cent->jetPackPS = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 1676
ADDP4
CNSTP4 0
ASGNP4
line 1179
;1179:  cent->jetPackState = JPS_OFF;
ADDRFP4 0
INDIRP4
CNSTI4 1680
ADDP4
CNSTI4 0
ASGNI4
line 1180
;1180:  cent->buildablePS = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 1636
ADDP4
CNSTP4 0
ASGNP4
line 1181
;1181:  cent->entityPS = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 1684
ADDP4
CNSTP4 0
ASGNP4
line 1182
;1182:  cent->entityPSMissing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1688
ADDP4
CNSTI4 0
ASGNI4
line 1186
;1183:
;1184:  //make sure that the buildable animations are in a consistent state
;1185:  //when a buildable enters the PVS
;1186:  cent->buildableAnim = cent->lerpFrame.animationNumber = BANIM_NONE;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 1616
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 1628
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1187
;1187:  cent->oldBuildableAnim = es->legsAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1632
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ASGNI4
line 1188
;1188:}
LABELV $776
endproc CG_CEntityPVSEnter 16 8
proc CG_CEntityPVSLeave 16 8
line 1198
;1189:
;1190:/*
;1191: ===============
;1192: CG_CEntityPVSLeave
;1193:
;1194: ===============
;1195: */
;1196:static void
;1197:CG_CEntityPVSLeave(centity_t *cent)
;1198:{
line 1200
;1199:  int i;
;1200:  entityState_t *es = &cent->currentState;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 1202
;1201:
;1202:  if (cg_debugPVS.integer)
ADDRGP4 cg_debugPVS+12
INDIRI4
CNSTI4 0
EQI4 $786
line 1203
;1203:    CG_Printf("Entity %d left PVS\n", cent->currentState.number);
ADDRGP4 $789
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $786
line 1205
;1204:
;1205:  switch(es->eType)
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 18
EQI4 $793
ADDRGP4 $790
JUMPV
line 1206
;1206:  {
LABELV $793
line 1208
;1207:    case ET_LEV2_ZAP_CHAIN:
;1208:      for(i = 0;i <= 2;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $794
line 1209
;1209:      {
line 1210
;1210:        if (CG_IsTrailSystemValid(&cent->level2ZapTS[i]))
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 CG_IsTrailSystemValid
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $798
line 1211
;1211:          CG_DestroyTrailSystem(&cent->level2ZapTS[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 1692
ADDP4
ADDP4
ARGP4
ADDRGP4 CG_DestroyTrailSystem
CALLV
pop
LABELV $798
line 1212
;1212:      }
LABELV $795
line 1208
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LEI4 $794
line 1213
;1213:      break;
LABELV $790
LABELV $791
line 1215
;1214:  }
;1215:}
LABELV $785
endproc CG_CEntityPVSLeave 16 8
proc CG_AddCEntity 8 8
line 1225
;1216:
;1217:/*
;1218: ===============
;1219: CG_AddCEntity
;1220:
;1221: ===============
;1222: */
;1223:static void
;1224:CG_AddCEntity(centity_t *cent)
;1225:{
line 1227
;1226:  // event-only entities will have been dealt with already
;1227:  if (cent->currentState.eType >= ET_EVENTS)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 22
LTI4 $801
line 1228
;1228:    return;
ADDRGP4 $800
JUMPV
LABELV $801
line 1231
;1229:
;1230:  // calculate the current origin
;1231:  CG_CalcEntityLerpPositions(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CalcEntityLerpPositions
CALLV
pop
line 1234
;1232:
;1233:  // add automatic effects
;1234:  CG_EntityEffects(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EntityEffects
CALLV
pop
line 1236
;1235:
;1236:  switch(cent->currentState.eType)
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $803
ADDRLP4 0
INDIRI4
CNSTI4 21
GTI4 $803
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $825
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $825
address $808
address $810
address $803
address $811
address $812
address $813
address $814
address $815
address $816
address $804
address $804
address $804
address $803
address $809
address $817
address $818
address $819
address $820
address $821
address $822
address $823
address $804
code
line 1237
;1237:  {
LABELV $803
line 1239
;1238:    default:
;1239:      CG_Error("Bad entity type: %i\n", cent->currentState.eType);
ADDRGP4 $806
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1240
;1240:      break;
ADDRGP4 $804
JUMPV
line 1245
;1241:
;1242:    case ET_INVISIBLE:
;1243:    case ET_PUSH_TRIGGER:
;1244:    case ET_TELEPORT_TRIGGER:
;1245:      break;
LABELV $808
line 1248
;1246:
;1247:    case ET_GENERAL:
;1248:      CG_General(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_General
CALLV
pop
line 1249
;1249:      break;
ADDRGP4 $804
JUMPV
LABELV $809
line 1252
;1250:
;1251:    case ET_CORPSE:
;1252:      CG_Corpse(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Corpse
CALLV
pop
line 1253
;1253:      break;
ADDRGP4 $804
JUMPV
LABELV $810
line 1256
;1254:
;1255:    case ET_PLAYER:
;1256:      CG_Player(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Player
CALLV
pop
line 1257
;1257:      break;
ADDRGP4 $804
JUMPV
LABELV $811
line 1260
;1258:
;1259:    case ET_BUILDABLE:
;1260:      CG_Buildable(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Buildable
CALLV
pop
line 1261
;1261:      break;
ADDRGP4 $804
JUMPV
LABELV $812
line 1264
;1262:
;1263:    case ET_MISSILE:
;1264:      CG_Missile(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Missile
CALLV
pop
line 1265
;1265:      break;
ADDRGP4 $804
JUMPV
LABELV $813
line 1268
;1266:
;1267:    case ET_MOVER:
;1268:      CG_Mover(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Mover
CALLV
pop
line 1269
;1269:      break;
ADDRGP4 $804
JUMPV
LABELV $814
line 1272
;1270:
;1271:    case ET_BEAM:
;1272:      CG_Beam(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Beam
CALLV
pop
line 1273
;1273:      break;
ADDRGP4 $804
JUMPV
LABELV $815
line 1276
;1274:
;1275:    case ET_PORTAL:
;1276:      CG_Portal(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Portal
CALLV
pop
line 1277
;1277:      break;
ADDRGP4 $804
JUMPV
LABELV $816
line 1280
;1278:
;1279:    case ET_SPEAKER:
;1280:      CG_Speaker(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Speaker
CALLV
pop
line 1281
;1281:      break;
ADDRGP4 $804
JUMPV
LABELV $817
line 1284
;1282:
;1283:    case ET_PARTICLE_SYSTEM:
;1284:      CG_ParticleSystemEntity(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_ParticleSystemEntity
CALLV
pop
line 1285
;1285:      break;
ADDRGP4 $804
JUMPV
LABELV $818
line 1288
;1286:
;1287:    case ET_ANIMMAPOBJ:
;1288:      CG_AnimMapObj(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AnimMapObj
CALLV
pop
line 1289
;1289:      break;
ADDRGP4 $804
JUMPV
LABELV $819
line 1292
;1290:
;1291:    case ET_MODELDOOR:
;1292:      CG_ModelDoor(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_ModelDoor
CALLV
pop
line 1293
;1293:      break;
ADDRGP4 $804
JUMPV
LABELV $820
line 1296
;1294:
;1295:    case ET_LIGHTFLARE:
;1296:      CG_LightFlare(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LightFlare
CALLV
pop
line 1297
;1297:      break;
ADDRGP4 $804
JUMPV
LABELV $821
line 1300
;1298:
;1299:    case ET_LEV2_ZAP_CHAIN:
;1300:      CG_Lev2ZapChain(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Lev2ZapChain
CALLV
pop
line 1301
;1301:      break;
ADDRGP4 $804
JUMPV
LABELV $822
line 1304
;1302:
;1303:    case ET_AI_NODE:
;1304:      CG_AI_Node(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AI_Node
CALLV
pop
line 1305
;1305:      break;
ADDRGP4 $804
JUMPV
LABELV $823
line 1308
;1306:
;1307:    case ET_AI_LINK:
;1308:      CG_AI_Link(cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AI_Link
CALLV
pop
line 1309
;1309:      break;
line 1312
;1310:    case ET_LASER:
;1311:     // CG_Laser(cent);
;1312:    break;
LABELV $804
line 1314
;1313:  }
;1314:}
LABELV $800
endproc CG_AddCEntity 8 8
export CG_AddPacketEntities
proc CG_AddPacketEntities 72 12
line 1324
;1315:
;1316:/*
;1317: ===============
;1318: CG_AddPacketEntities
;1319:
;1320: ===============
;1321: */
;1322:void
;1323:CG_AddPacketEntities(void)
;1324:{
line 1330
;1325:  int num;
;1326:  centity_t *cent;
;1327:  playerState_t *ps;
;1328:
;1329:  // set cg.frameInterpolation
;1330:  if (cg.nextSnap)
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $827
line 1331
;1331:  {
line 1334
;1332:    int delta;
;1333:
;1334:    delta = (cg.nextSnap->serverTime - cg.snap->serverTime);
ADDRLP4 16
CNSTI4 8
ASGNI4
ADDRLP4 12
ADDRGP4 cg+40
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1336
;1335:
;1336:    if (delta == 0)
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $832
line 1337
;1337:      cg.frameInterpolation = 0;
ADDRGP4 cg+107588
CNSTF4 0
ASGNF4
ADDRGP4 $828
JUMPV
LABELV $832
line 1339
;1338:    else
;1339:      cg.frameInterpolation = (float) (cg.time - cg.snap->serverTime) / delta;
ADDRGP4 cg+107588
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1340
;1340:  }
ADDRGP4 $828
JUMPV
LABELV $827
line 1342
;1341:  else
;1342:  {
line 1343
;1343:    cg.frameInterpolation = 0; // actually, it should never be used, because
ADDRGP4 cg+107588
CNSTF4 0
ASGNF4
line 1345
;1344:    // no entities should be marked as interpolating
;1345:  }
LABELV $828
line 1348
;1346:
;1347:  // the auto-rotating items will all have the same axis
;1348:  cg.autoAngles[0] = 0;
ADDRGP4 cg+109944
CNSTF4 0
ASGNF4
line 1349
;1349:  cg.autoAngles[1] = (cg.time & 2047) * 360 / 2048.0;
ADDRGP4 cg+109944+4
CNSTI4 360
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
MULI4
CVIF4 4
CNSTF4 1157627904
DIVF4
ASGNF4
line 1350
;1350:  cg.autoAngles[2] = 0;
ADDRGP4 cg+109944+8
CNSTF4 0
ASGNF4
line 1352
;1351:
;1352:  cg.autoAnglesFast[0] = 0;
ADDRGP4 cg+109992
CNSTF4 0
ASGNF4
line 1353
;1353:  cg.autoAnglesFast[1] = (cg.time & 1023) * 360 / 1024.0f;
ADDRGP4 cg+109992+4
CNSTI4 360
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1023
BANDI4
MULI4
CVIF4 4
CNSTF4 1149239296
DIVF4
ASGNF4
line 1354
;1354:  cg.autoAnglesFast[2] = 0;
ADDRGP4 cg+109992+8
CNSTF4 0
ASGNF4
line 1356
;1355:
;1356:  AnglesToAxis(cg.autoAngles, cg.autoAxis);
ADDRGP4 cg+109944
ARGP4
ADDRGP4 cg+109956
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1357
;1357:  AnglesToAxis(cg.autoAnglesFast, cg.autoAxisFast);
ADDRGP4 cg+109992
ARGP4
ADDRGP4 cg+110004
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1360
;1358:
;1359:  // generate and add the entity from the playerstate
;1360:  ps = &cg.predictedPlayerState;
ADDRLP4 8
ADDRGP4 cg+107636
ASGNP4
line 1361
;1361:  BG_PlayerStateToEntityState(ps, &cg.predictedPlayerEntity.currentState, qfalse);
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 BG_PlayerStateToEntityState
CALLV
pop
line 1362
;1362:  cg.predictedPlayerEntity.valid = qtrue;
ADDRGP4 cg+108104+1712
CNSTI4 1
ASGNI4
line 1363
;1363:  CG_AddCEntity(&cg.predictedPlayerEntity);
ADDRGP4 cg+108104
ARGP4
ADDRGP4 CG_AddCEntity
CALLV
pop
line 1366
;1364:
;1365:  // lerp the non-predicted value for lightning gun origins
;1366:  CG_CalcEntityLerpPositions(&cg_entities[cg.snap->ps.clientNum]);
CNSTI4 1724
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRGP4 CG_CalcEntityLerpPositions
CALLV
pop
line 1369
;1367:
;1368:  // scanner
;1369:  CG_UpdateEntityPositions();
ADDRGP4 CG_UpdateEntityPositions
CALLV
pop
line 1371
;1370:
;1371:  for(num = 0;num < MAX_GENTITIES;num++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $861
line 1372
;1372:    cg_entities[num].valid = qfalse;
CNSTI4 1724
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1712
ADDP4
CNSTI4 0
ASGNI4
LABELV $862
line 1371
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $861
line 1375
;1373:
;1374:  // add each entity sent over by the server
;1375:  for(num = 0;num < cg.snap->numEntities;num++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $869
JUMPV
LABELV $866
line 1376
;1376:  {
line 1377
;1377:    cent = &cg_entities[cg.snap->entities[num].number];
ADDRLP4 4
CNSTI4 1724
CNSTI4 208
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1378
;1378:    cent->valid = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1712
ADDP4
CNSTI4 1
ASGNI4
line 1379
;1379:  }
LABELV $867
line 1375
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $869
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
LTI4 $866
line 1381
;1380:
;1381:  for(num = 0;num < MAX_GENTITIES;num++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $872
line 1382
;1382:  {
line 1383
;1383:    cent = &cg_entities[num];
ADDRLP4 4
CNSTI4 1724
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1385
;1384:
;1385:    if (cent->valid && !cent->oldValid)
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $876
ADDRLP4 4
INDIRP4
CNSTI4 1716
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $876
line 1386
;1386:      CG_CEntityPVSEnter(cent);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_CEntityPVSEnter
CALLV
pop
ADDRGP4 $877
JUMPV
LABELV $876
line 1387
;1387:    else if (!cent->valid && cent->oldValid)
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $878
ADDRLP4 4
INDIRP4
CNSTI4 1716
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $878
line 1388
;1388:      CG_CEntityPVSLeave(cent);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_CEntityPVSLeave
CALLV
pop
LABELV $878
LABELV $877
line 1390
;1389:
;1390:    cent->oldValid = cent->valid;
ADDRLP4 4
INDIRP4
CNSTI4 1716
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
ASGNI4
line 1391
;1391:  }
LABELV $873
line 1381
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $872
line 1394
;1392:
;1393:  // add each entity sent over by the server
;1394:  for(num = 0;num < cg.snap->numEntities;num++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $883
JUMPV
LABELV $880
line 1395
;1395:  {
line 1396
;1396:    cent = &cg_entities[cg.snap->entities[num].number];
ADDRLP4 4
CNSTI4 1724
CNSTI4 208
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1397
;1397:    CG_AddCEntity(cent);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_AddCEntity
CALLV
pop
line 1398
;1398:  }
LABELV $881
line 1394
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $883
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
LTI4 $880
line 1401
;1399:
;1400:  //make an attempt at drawing bounding boxes of selected entity types
;1401:  if (cg_drawBBOX.integer)
ADDRGP4 cg_drawBBOX+12
INDIRI4
CNSTI4 0
EQI4 $886
line 1402
;1402:  {
line 1403
;1403:    for(num = 0;num < cg.snap->numEntities;num++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $892
JUMPV
LABELV $889
line 1404
;1404:    {
line 1409
;1405:      float x, zd, zu;
;1406:      vec3_t mins, maxs;
;1407:      entityState_t *es;
;1408:
;1409:      cent = &cg_entities[cg.snap->entities[num].number];
ADDRLP4 4
CNSTI4 1724
CNSTI4 208
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1410
;1410:      es = &cent->currentState;
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
line 1412
;1411:
;1412:      switch(es->eType)
ADDRLP4 52
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
CNSTI4 3
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $898
ADDRLP4 52
INDIRI4
CNSTI4 4
EQI4 $898
ADDRLP4 52
INDIRI4
ADDRLP4 60
INDIRI4
LTI4 $896
LABELV $903
ADDRLP4 52
INDIRI4
CNSTI4 13
EQI4 $898
ADDRGP4 $896
JUMPV
line 1413
;1413:      {
LABELV $898
line 1417
;1414:        case ET_BUILDABLE:
;1415:        case ET_MISSILE:
;1416:        case ET_CORPSE:
;1417:          x = (es->solid & 255);
ADDRLP4 40
ADDRLP4 12
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 255
BANDI4
CVIF4 4
ASGNF4
line 1418
;1418:          zd = ((es->solid >> 8) & 255);
ADDRLP4 44
ADDRLP4 12
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
CVIF4 4
ASGNF4
line 1419
;1419:          zu = ((es->solid >> 16) & 255) - 32;
ADDRLP4 48
ADDRLP4 12
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
CNSTI4 32
SUBI4
CVIF4 4
ASGNF4
line 1421
;1420:
;1421:          mins[0] = mins[1] = -x;
ADDRLP4 64
ADDRLP4 40
INDIRF4
NEGF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 64
INDIRF4
ASGNF4
line 1422
;1422:          maxs[0] = maxs[1] = x;
ADDRLP4 68
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 28
ADDRLP4 68
INDIRF4
ASGNF4
line 1423
;1423:          mins[2] = -zd;
ADDRLP4 16+8
ADDRLP4 44
INDIRF4
NEGF4
ASGNF4
line 1424
;1424:          maxs[2] = zu;
ADDRLP4 28+8
ADDRLP4 48
INDIRF4
ASGNF4
line 1426
;1425:
;1426:          CG_DrawBoundingBox(cent->lerpOrigin, mins, maxs);
ADDRLP4 4
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CG_DrawBoundingBox
CALLV
pop
line 1427
;1427:          break;
line 1430
;1428:
;1429:        default:
;1430:          break;
LABELV $896
line 1432
;1431:      }
;1432:    }
LABELV $890
line 1403
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $892
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
LTI4 $889
line 1433
;1433:  }
LABELV $886
line 1434
;1434:}
LABELV $826
endproc CG_AddPacketEntities 72 12
import trap_GetDemoName
import trap_GetDemoPos
import trap_GetDemoState
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBiSphereTrace
import trap_CM_BiSphereTrace
import trap_CM_TransformedCapsuleTrace
import trap_CM_CapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_LiteralArgs
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_TutorialText
import CG_WritePTRCode
import CG_ReadPTRCode
import CG_DestroyTestTS_f
import CG_TestTS_f
import CG_AddTrails
import CG_IsTrailSystemValid
import CG_DestroyTrailSystem
import CG_SpawnNewTrailSystem
import CG_RegisterTrailSystem
import CG_LoadTrailSystems
import CG_DestroyTestPS_f
import CG_TestPS_f
import CG_ParticleSystemEntity
import CG_AddParticles
import CG_SetParticleSystemNormal
import CG_IsParticleSystemValid
import CG_IsParticleSystemInfinite
import CG_DestroyParticleSystem
import CG_SpawnNewParticleSystem
import CG_RegisterParticleSystem
import CG_LoadParticleSystems
import CG_SetAttachmentOffset
import CG_SetAttachmentParticle
import CG_SetAttachmentTag
import CG_SetAttachmentCent
import CG_SetAttachmentPoint
import CG_AttachToParticle
import CG_AttachToTag
import CG_AttachToCent
import CG_AttachToPoint
import CG_Attached
import CG_AttachmentCentNum
import CG_AttachmentVelocity
import CG_AttachmentAxis
import CG_AttachmentDir
import CG_AttachmentPoint
import CG_DefragmentMemory
import CG_Free
import CG_Alloc
import CG_InitMemory
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_RequestScores
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ProcessSnapshots
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_AlienSense
import CG_Scanner
import CG_UpdateEntityPositions
import CG_DrawItemSelectText
import CG_DrawItemSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_ShotgunFire
import CG_Bullet
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterWeapon
import CG_InitWeapons
import CG_RegisterUpgrade
import CG_InitUpgrades
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PainEvent
import CG_EntityEvent
import CG_CheckEvents
import CG_PredictPlayerState
import CG_BiSphereTrace
import CG_CapTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_ModelDoor
import CG_AnimMapObj
import CG_RunLerpFrame
import CG_AlienBuildableExplosion
import CG_HumanBuildableExplosion
import CG_InitBuildables
import CG_Buildable
import CG_GhostBuildable
import CG_AtHighestClass
import CG_Bleed
import CG_PlayerOnFire
import CG_PlayerDisconnect
import CG_CustomSound
import CG_PrecacheClientInfo
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Corpse
import CG_Player
import CG_ResetPainBlend
import CG_UpdateMediaFraction
import CG_DrawLoadingScreen
import CG_Text_PaintChar
import CG_GetKillerText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_RunMenuScript
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawActive
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawFadePic
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawPlane
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_addSmoothOp
import CG_AddNotifyText
import CG_RemoveNotifyLine
import CG_FileExists
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PlayerCount
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_debugRandom
import ui_humanTeamVoteActive
import ui_alienTeamVoteActive
import ui_voteActive
import ui_loading
import ui_dialog
import ui_stages
import ui_carriage
import ui_currentClass
import cg_painBlendZoom
import cg_painBlendScale
import cg_painBlendMax
import cg_painBlendDownRate
import cg_painBlendUpRate
import cg_tutorial
import cg_disableScannerPlane
import cg_disableWarningDialogs
import cg_debugPVS
import cg_debugTrails
import cg_debugParticles
import cg_lightFlare
import cg_consoleLatency
import cg_depthSortParticles
import cg_wwToggle
import cg_wwFollow
import cg_wwSmoothTime
import cg_debugAlloc
import cg_drawBBOX
import cg_drawSurfNormal
import cg_creepRes
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPersonhax
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRangehax
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_debugMove
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_teslaTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawDemoState
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_buildables
import cg_upgrades
import cg_weapons
import cg_entities
import cg
import cgs
import g_nameBind2
import g_nameBind1
import BindingFromName
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Item_Text_AutoWrapped_Paint
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Display_ExpandMacros
import Init_Display
import String_Report
import String_Init
import String_Alloc
import BG_ClientListParse
import BG_ClientListString
import BG_ClientListRemove
import BG_ClientListAdd
import BG_ClientListTest
import BG_UpgradeClassAvailable
import BG_BuildableIsAllowed
import BG_ClassIsAllowed
import BG_UpgradeIsAllowed
import BG_WeaponIsAllowed
import BG_InitAllowedGameElements
import BG_ParseCSVBuildableList
import BG_ParseCSVClassList
import BG_ParseCSVEquipmentList
import atoi_neg
import atof_neg
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_FindTeamForUpgrade
import BG_FindUsableForUpgrade
import BG_FindPurchasableForUpgrade
import BG_FindIconForUpgrade
import BG_FindHumanNameForUpgrade
import BG_FindUpgradeNumForName
import BG_FindNameForUpgrade
import BG_FindSlotsForUpgrade
import BG_FindStagesForUpgrade
import BG_FindPriceForUpgrade
import BG_FindTeamForWeapon
import BG_FindBuildDelayForWeapon
import BG_FindLongRangedForWeapon
import BG_FindPurchasableForWeapon
import BG_FindZoomFovForWeapon
import BG_WeaponCanZoom
import BG_WeaponHasThirdMode
import BG_WeaponHasAltMode
import BG_FindKnockbackScaleForWeapon
import BG_FindReloadTimeForWeapon
import BG_FindRepeatRate3ForWeapon
import BG_FindRepeatRate2ForWeapon
import BG_FindRepeatRate1ForWeapon
import BG_FindUsesEnergyForWeapon
import BG_FindInfinteAmmoForWeapon
import BG_FindAmmoForWeapon
import BG_FindCrosshairSizeForWeapon
import BG_FindCrosshairForWeapon
import BG_FindIconForWeapon
import BG_FindModelsForWeapon
import BG_FindHumanNameForWeapon
import BG_FindWeaponNumForName
import BG_FindNameForWeapon
import BG_FindSlotsForWeapon
import BG_FindStagesForWeapon
import BG_FindPriceForWeapon
import BG_InitClassOverrides
import BG_FindValueOfClass
import BG_FindCostOfClass
import BG_ClassCanEvolveFromTo
import BG_FindBuildDistForClass
import BG_FindStartWeaponForClass
import BG_ClassHasAbility
import BG_FindSteptimeForClass
import BG_FindKnockbackScaleForClass
import BG_FindJumpMagnitudeForClass
import BG_FindStopSpeedForClass
import BG_FindFrictionForClass
import BG_FindAirAccelerationForClass
import BG_FindAccelerationForClass
import BG_FindSpeedForClass
import BG_FindBobCycleForClass
import BG_FindBobForClass
import BG_FindFovForClass
import BG_FindRegenRateForClass
import BG_FindFallDamageForClass
import BG_FindHealthForClass
import BG_FindViewheightForClass
import BG_FindZOffsetForClass
import BG_FindBBoxForClass
import BG_FindSpriteHeightForClass
import BG_FindStagesForClass
import BG_FindHudNameForClass
import BG_FindShadowScaleForClass
import BG_FindSkinNameForClass
import BG_FindModelScaleForClass
import BG_FindModelNameForClass
import BG_FindHumanNameForClassNum
import BG_FindNameForClassNum
import BG_FindClassNumForName
import BG_InitBuildableOverrides
import BG_FindTransparentTestForBuildable
import BG_FindReplaceableTestForBuildable
import BG_FindUniqueTestForBuildable
import BG_FindDCCTestForBuildable
import BG_FindCreepSizeForBuildable
import BG_FindCreepTestForBuildable
import BG_FindInvertNormalForBuildable
import BG_FindMinNormalForBuildable
import BG_FindProjTypeForBuildable
import BG_FindFireSpeedForBuildable
import BG_FindRangeForBuildable
import BG_FindUsableForBuildable
import BG_FindBuildTimeForBuildable
import BG_FindNextThinkForBuildable
import BG_FindAnimForBuildable
import BG_FindBuildWeaponForBuildable
import BG_FindTeamForBuildable
import BG_FindMODForBuildable
import BG_FindSplashRadiusForBuildable
import BG_FindSplashDamageForBuildable
import BG_FindStagesForBuildable
import BG_FindBuildPointsForBuildable
import BG_FindBounceForBuildable
import BG_FindTrajectoryForBuildable
import BG_FindRegenRateForBuildable
import BG_FindHealthForBuildable
import BG_FindZOffsetForBuildable
import BG_FindBBoxForBuildable
import BG_FindModelScaleForBuildable
import BG_FindModelsForBuildable
import BG_FindEntityNameForBuildable
import BG_FindHumanNameForBuildable
import BG_FindNameForBuildable
import BG_FindBuildNumForEntityName
import BG_FindBuildNumForName
import BG_GetValueOfEquipment
import BG_GetValueOfHuman
import BG_PositionBuildableRelativeToPlayer
import BG_RotateAxis
import BG_UpgradeIsActive
import BG_DeactivateUpgrade
import BG_ActivateUpgrade
import BG_InventoryContainsUpgrade
import BG_RemoveUpgradeFromInventory
import BG_AddUpgradeToInventory
import BG_InventoryContainsWeapon
import BG_RemoveWeaponFromInventory
import BG_AddWeaponToInventory
import BG_WeaponIsFull
import BG_PackAmmoArray
import BG_UnpackAmmoArray
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isintegral
import Q_isanumber
import Q_isdigit
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Com_HexStrToInt
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import DistanceBetweenLineSegments
import DistanceBetweenLineSegmentsSquared
import VectorMaxComponent
import VectorMinComponent
import pointToLineDistance
import VectorDistance
import ProjectPointOntoVector
import GetPerpendicularViewVector
import Q_isnan
import PerpendicularVector
import AngleVectors
import VectorMatrixMultiply
import MatrixMultiply
import MakeNormalVectors
import RotateAroundAxe
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AxisToAngles
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import rint
import pow
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $806
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $789
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 102
byte 1 116
byte 1 32
byte 1 80
byte 1 86
byte 1 83
byte 1 10
byte 1 0
align 1
LABELV $780
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 32
byte 1 80
byte 1 86
byte 1 83
byte 1 10
byte 1 0
align 1
LABELV $743
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 110
byte 1 116
byte 1 101
byte 1 114
byte 1 112
byte 1 111
byte 1 97
byte 1 116
byte 1 101
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 80
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 99
byte 1 103
byte 1 46
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 83
byte 1 110
byte 1 97
byte 1 112
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
