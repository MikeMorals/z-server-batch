export CG_RegisterUpgrade
code
proc CG_RegisterUpgrade 32 12
file "..\..\..\..\src/cgame/cg_weapons.c"
line 38
;1:/*
;2: ===========================================================================
;3: Copyright (C) 1999-2005 Id Software, Inc.
;4: Copyright (C) 2000-2006 Tim Angus
;5:
;6: This file is part of Tremulous.
;7:
;8: Tremulous is free software; you can redistribute it
;9: and/or modify it under the terms of the GNU General Public License as
;10: published by the Free Software Foundation; either version 2 of the License,
;11: or (at your option) any later version.
;12:
;13: Tremulous is distributed in the hope that it will be
;14: useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;15: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;16: GNU General Public License for more details.
;17:
;18: You should have received a copy of the GNU General Public License
;19: along with Tremulous; if not, write to the Free Software
;20: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;21: ===========================================================================
;22: */
;23:
;24:// cg_weapons.c -- events and effects dealing with weapons
;25:
;26:
;27:#include "cg_local.h"
;28:
;29:/*
;30: =================
;31: CG_RegisterUpgrade
;32:
;33: The server says this item is used on this level
;34: =================
;35: */
;36:void
;37:CG_RegisterUpgrade(int upgradeNum)
;38:{
line 42
;39:  upgradeInfo_t *upgradeInfo;
;40:  char *icon;
;41:
;42:  upgradeInfo = &cg_upgrades[upgradeNum];
ADDRLP4 0
CNSTI4 12
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_upgrades
ADDP4
ASGNP4
line 44
;43:
;44:  if (upgradeNum == 0)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $100
line 45
;45:    return;
ADDRGP4 $99
JUMPV
LABELV $100
line 47
;46:
;47:  if (upgradeInfo->registered)
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $102
line 48
;48:    return;
ADDRGP4 $99
JUMPV
LABELV $102
line 50
;49:
;50:  memset(upgradeInfo, 0, sizeof(*upgradeInfo));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 12
ARGI4
ADDRGP4 memset
CALLP4
pop
line 51
;51:  upgradeInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 53
;52:
;53:  if (!BG_FindNameForUpgrade(upgradeNum))
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_FindNameForUpgrade
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $104
line 54
;54:    CG_Error("Couldn't find upgrade %i", upgradeNum);
ADDRGP4 $106
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
LABELV $104
line 56
;55:
;56:  upgradeInfo->humanName = BG_FindHumanNameForUpgrade(upgradeNum);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_FindHumanNameForUpgrade
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRP4
ASGNP4
line 59
;57:
;58:  //la la la la la, i'm not listening!
;59:  if (upgradeNum == UP_GRENADE)
ADDRFP4 0
INDIRI4
CNSTI4 5
NEI4 $107
line 60
;60:    upgradeInfo->upgradeIcon = cg_weapons[WP_GRENADE].weaponIcon;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg_weapons+9000+36
INDIRI4
ASGNI4
ADDRGP4 $108
JUMPV
LABELV $107
line 61
;61:  else if ((icon = BG_FindIconForUpgrade(upgradeNum)))
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindIconForUpgrade
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $111
line 62
;62:    upgradeInfo->upgradeIcon = trap_R_RegisterShader(icon);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
LABELV $111
LABELV $108
line 65
;63:
;64:  //la la la la la, i'm not listening!
;65:  if (upgradeNum == UP_MINE)
ADDRFP4 0
INDIRI4
CNSTI4 6
NEI4 $113
line 66
;66:    upgradeInfo->upgradeIcon = cg_weapons[WP_MINE].weaponIcon;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg_weapons+9900+36
INDIRI4
ASGNI4
ADDRGP4 $114
JUMPV
LABELV $113
line 67
;67:  else if ((icon = BG_FindIconForUpgrade(upgradeNum)))
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindIconForUpgrade
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $117
line 68
;68:    upgradeInfo->upgradeIcon = trap_R_RegisterShader(icon);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
LABELV $117
LABELV $114
line 74
;69:
;70:  /*if( upgradeNum == UP_BOMB )
;71:   upgradeInfo->upgradeIcon = cg_weapons[ WP_BOMB ].weaponIcon;
;72:   else if( ( icon = BG_FindIconForUpgrade( upgradeNum ) ) )
;73:   upgradeInfo->upgradeIcon = trap_R_RegisterShader( icon );*/
;74:}
LABELV $99
endproc CG_RegisterUpgrade 32 12
export CG_InitUpgrades
proc CG_InitUpgrades 4 12
line 85
;75:
;76:/*
;77: ===============
;78: CG_InitUpgrades
;79:
;80: Precaches upgrades
;81: ===============
;82: */
;83:void
;84:CG_InitUpgrades(void)
;85:{
line 88
;86:  int i;
;87:
;88:  memset(cg_upgrades, 0, sizeof(cg_upgrades));
ADDRGP4 cg_upgrades
ARGP4
CNSTI4 0
ARGI4
CNSTI4 384
ARGI4
ADDRGP4 memset
CALLP4
pop
line 90
;89:
;90:  for(i = UP_NONE + 1;i < UP_NUM_UPGRADES;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $120
line 91
;91:    CG_RegisterUpgrade(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterUpgrade
CALLV
pop
LABELV $121
line 90
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $120
line 92
;92:}
LABELV $119
endproc CG_InitUpgrades 4 12
proc CG_ParseWeaponModeSection 112 8
line 103
;93:
;94:/*
;95: ===============
;96: CG_ParseWeaponModeSection
;97:
;98: Parse a weapon mode section
;99: ===============
;100: */
;101:static qboolean
;102:CG_ParseWeaponModeSection(weaponInfoMode_t *wim, char **text_p)
;103:{
ADDRGP4 $126
JUMPV
LABELV $125
line 109
;104:  char *token;
;105:  int i;
;106:
;107:  // read optional parameters
;108:  while(1)
;109:  {
line 110
;110:    token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 112
;111:
;112:    if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $128
line 113
;113:      break;
ADDRGP4 $127
JUMPV
LABELV $128
line 115
;114:
;115:    if (!Q_stricmp(token, ""))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $132
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $130
line 116
;116:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $124
JUMPV
LABELV $130
line 118
;117:
;118:    if (!Q_stricmp(token, "missileModel"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $135
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $133
line 119
;119:    {
line 120
;120:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 121
;121:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $136
line 122
;122:        break;
ADDRGP4 $127
JUMPV
LABELV $136
line 124
;123:
;124:      wim->missileModel = trap_R_RegisterModel(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 126
;125:
;126:      if (!wim->missileModel)
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 127
;127:        CG_Printf(S_COLOR_RED "ERROR: missile model not found %s\n", token);
ADDRGP4 $140
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 129
;128:
;129:      continue;
ADDRGP4 $126
JUMPV
LABELV $133
line 131
;130:    }
;131:    else if (!Q_stricmp(token, "missileSprite"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $143
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $141
line 132
;132:    {
line 133
;133:      int size = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 135
;134:
;135:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 136
;136:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $144
line 137
;137:        break;
ADDRGP4 $127
JUMPV
LABELV $144
line 139
;138:
;139:      size = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 32
INDIRI4
ASGNI4
line 141
;140:
;141:      if (size < 0)
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $146
line 142
;142:        size = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $146
line 144
;143:
;144:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ASGNP4
line 145
;145:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $148
line 146
;146:        break;
ADDRGP4 $127
JUMPV
LABELV $148
line 148
;147:
;148:      wim->missileSprite = trap_R_RegisterShader(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 149
;149:      wim->missileSpriteSize = size;
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 150
;150:      wim->usesSpriteMissle = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 152
;151:
;152:      if (!wim->missileSprite)
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 153
;153:        CG_Printf(S_COLOR_RED "ERROR: missile sprite not found %s\n", token);
ADDRGP4 $152
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 155
;154:
;155:      continue;
ADDRGP4 $126
JUMPV
LABELV $141
line 157
;156:    }
;157:    else if (!Q_stricmp(token, "missileRotates"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $155
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $153
line 158
;158:    {
line 159
;159:      wim->missileRotates = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1
ASGNI4
line 161
;160:
;161:      continue;
ADDRGP4 $126
JUMPV
LABELV $153
line 163
;162:    }
;163:    else if (!Q_stricmp(token, "missileAnimates"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $158
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $156
line 164
;164:    {
line 165
;165:      wim->missileAnimates = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 167
;166:
;167:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
line 168
;168:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $159
line 169
;169:        break;
ADDRGP4 $127
JUMPV
LABELV $159
line 171
;170:
;171:      wim->missileAnimStartFrame = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 173
;172:
;173:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 174
;174:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $161
line 175
;175:        break;
ADDRGP4 $127
JUMPV
LABELV $161
line 177
;176:
;177:      wim->missileAnimNumFrames = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 179
;178:
;179:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ASGNP4
line 180
;180:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $163
line 181
;181:        break;
ADDRGP4 $127
JUMPV
LABELV $163
line 183
;182:
;183:      wim->missileAnimFrameRate = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 185
;184:
;185:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
ASGNP4
line 186
;186:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $165
line 187
;187:        break;
ADDRGP4 $127
JUMPV
LABELV $165
line 189
;188:
;189:      wim->missileAnimLooping = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 191
;190:
;191:      continue;
ADDRGP4 $126
JUMPV
LABELV $156
line 193
;192:    }
;193:    else if (!Q_stricmp(token, "missileParticleSystem"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $169
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $167
line 194
;194:    {
line 195
;195:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ASGNP4
line 196
;196:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $170
line 197
;197:        break;
ADDRGP4 $127
JUMPV
LABELV $170
line 199
;198:
;199:      wim->missileParticleSystem = CG_RegisterParticleSystem(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 CG_RegisterParticleSystem
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 201
;200:
;201:      if (!wim->missileParticleSystem)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 202
;202:        CG_Printf(S_COLOR_RED "ERROR: missile particle system not found %s\n", token);
ADDRGP4 $174
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 204
;203:
;204:      continue;
ADDRGP4 $126
JUMPV
LABELV $167
line 206
;205:    }
;206:    else if (!Q_stricmp(token, "missileTrailSystem"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $177
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $175
line 207
;207:    {
line 208
;208:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 209
;209:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $178
line 210
;210:        break;
ADDRGP4 $127
JUMPV
LABELV $178
line 212
;211:
;212:      wim->missileTrailSystem = CG_RegisterTrailSystem(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 CG_RegisterTrailSystem
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 214
;213:
;214:      if (!wim->missileTrailSystem)
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 215
;215:        CG_Printf(S_COLOR_RED "ERROR: missile trail system not found %s\n", token);
ADDRGP4 $182
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 217
;216:
;217:      continue;
ADDRGP4 $126
JUMPV
LABELV $175
line 219
;218:    }
;219:    else if (!Q_stricmp(token, "muzzleParticleSystem"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $185
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $183
line 220
;220:    {
line 221
;221:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 222
;222:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $186
line 223
;223:        break;
ADDRGP4 $127
JUMPV
LABELV $186
line 225
;224:
;225:      wim->muzzleParticleSystem = CG_RegisterParticleSystem(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 CG_RegisterParticleSystem
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 227
;226:
;227:      if (!wim->muzzleParticleSystem)
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 228
;228:        CG_Printf(S_COLOR_RED "ERROR: muzzle particle system not found %s\n", token);
ADDRGP4 $190
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 230
;229:
;230:      continue;
ADDRGP4 $126
JUMPV
LABELV $183
line 232
;231:    }
;232:    else if (!Q_stricmp(token, "impactParticleSystem"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $193
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $191
line 233
;233:    {
line 234
;234:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ASGNP4
line 235
;235:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $194
line 236
;236:        break;
ADDRGP4 $127
JUMPV
LABELV $194
line 238
;237:
;238:      wim->impactParticleSystem = CG_RegisterParticleSystem(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 CG_RegisterParticleSystem
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 241
;239:
;240:
;241:      if (!wim->impactParticleSystem)
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 242
;242:        CG_Printf(S_COLOR_RED "ERROR: impact particle system not found %s\n", token);
ADDRGP4 $198
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 244
;243:
;244:      continue;
ADDRGP4 $126
JUMPV
LABELV $191
line 246
;245:    }
;246:    else if (!Q_stricmp(token, "impactMark"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $201
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $199
line 247
;247:    {
line 248
;248:      int size = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
line 250
;249:
;250:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
ASGNP4
line 251
;251:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $202
line 252
;252:        break;
ADDRGP4 $127
JUMPV
LABELV $202
line 254
;253:
;254:      size = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 60
INDIRI4
ASGNI4
line 256
;255:
;256:      if (size < 0)
ADDRLP4 52
INDIRI4
CNSTI4 0
GEI4 $204
line 257
;257:        size = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
LABELV $204
line 259
;258:
;259:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 64
INDIRP4
ASGNP4
line 260
;260:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $206
line 261
;261:        break;
ADDRGP4 $127
JUMPV
LABELV $206
line 263
;262:
;263:      wim->impactMark = trap_R_RegisterShader(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 264
;264:      wim->impactMarkSize = size;
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 266
;265:
;266:      if (!wim->impactMark)
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
NEI4 $126
line 267
;267:        CG_Printf(S_COLOR_RED "ERROR: impact mark shader not found %s\n", token);
ADDRGP4 $210
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 269
;268:
;269:      continue;
ADDRGP4 $126
JUMPV
LABELV $199
line 271
;270:    }
;271:    else if (!Q_stricmp(token, "impactSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $213
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $211
line 272
;272:    {
line 273
;273:      int index = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 275
;274:
;275:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 60
INDIRP4
ASGNP4
line 276
;276:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $214
line 277
;277:        break;
ADDRGP4 $127
JUMPV
LABELV $214
line 279
;278:
;279:      index = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 281
;280:
;281:      if (index < 0)
ADDRLP4 56
INDIRI4
CNSTI4 0
GEI4 $216
line 282
;282:        index = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 $217
JUMPV
LABELV $216
line 283
;283:      else if (index > 3)
ADDRLP4 56
INDIRI4
CNSTI4 3
LEI4 $218
line 284
;284:        index = 3;
ADDRLP4 56
CNSTI4 3
ASGNI4
LABELV $218
LABELV $217
line 286
;285:
;286:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 287
;287:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $220
line 288
;288:        break;
ADDRGP4 $127
JUMPV
LABELV $220
line 290
;289:
;290:      wim->impactSound[index] = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 292
;291:
;292:      continue;
ADDRGP4 $126
JUMPV
LABELV $211
line 294
;293:    }
;294:    else if (!Q_stricmp(token, "impactFleshSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $224
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $222
line 295
;295:    {
line 296
;296:      int index = 0;
ADDRLP4 60
CNSTI4 0
ASGNI4
line 298
;297:
;298:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 64
INDIRP4
ASGNP4
line 299
;299:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $225
line 300
;300:        break;
ADDRGP4 $127
JUMPV
LABELV $225
line 302
;301:
;302:      index = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 304
;303:
;304:      if (index < 0)
ADDRLP4 60
INDIRI4
CNSTI4 0
GEI4 $227
line 305
;305:        index = 0;
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRGP4 $228
JUMPV
LABELV $227
line 306
;306:      else if (index > 3)
ADDRLP4 60
INDIRI4
CNSTI4 3
LEI4 $229
line 307
;307:        index = 3;
ADDRLP4 60
CNSTI4 3
ASGNI4
LABELV $229
LABELV $228
line 309
;308:
;309:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
ASGNP4
line 310
;310:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $231
line 311
;311:        break;
ADDRGP4 $127
JUMPV
LABELV $231
line 313
;312:
;313:      wim->impactFleshSound[index] = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 76
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 315
;314:
;315:      continue;
ADDRGP4 $126
JUMPV
LABELV $222
line 317
;316:    }
;317:    else if (!Q_stricmp(token, "alwaysImpact"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $235
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $233
line 318
;318:    {
line 319
;319:      wim->alwaysImpact = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTI4 1
ASGNI4
line 321
;320:
;321:      continue;
ADDRGP4 $126
JUMPV
LABELV $233
line 323
;322:    }
;323:    else if (!Q_stricmp(token, "flashDLightColor"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $238
ARGP4
ADDRLP4 64
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $236
line 324
;324:    {
line 325
;325:      for(i = 0;i < 3;i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $239
line 326
;326:      {
line 327
;327:        token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 328
;328:        if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $243
line 329
;329:          break;
ADDRGP4 $126
JUMPV
LABELV $243
line 331
;330:
;331:        wim->flashDlightColor[i] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 332
;332:      }
LABELV $240
line 325
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $239
line 334
;333:
;334:      continue;
ADDRGP4 $126
JUMPV
LABELV $236
line 336
;335:    }
;336:    else if (!Q_stricmp(token, "continuousFlash"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $247
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $245
line 337
;337:    {
line 338
;338:      wim->continuousFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 1
ASGNI4
line 340
;339:
;340:      continue;
ADDRGP4 $126
JUMPV
LABELV $245
line 342
;341:    }
;342:    else if (!Q_stricmp(token, "missileDlightColor"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $250
ARGP4
ADDRLP4 72
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $248
line 343
;343:    {
line 344
;344:      for(i = 0;i < 3;i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $251
line 345
;345:      {
line 346
;346:        token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 76
INDIRP4
ASGNP4
line 347
;347:        if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $255
line 348
;348:          break;
ADDRGP4 $126
JUMPV
LABELV $255
line 350
;349:
;350:        wim->missileDlightColor[i] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
ADDRLP4 80
INDIRF4
ASGNF4
line 351
;351:      }
LABELV $252
line 344
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $251
line 353
;352:
;353:      continue;
ADDRGP4 $126
JUMPV
LABELV $248
line 355
;354:    }
;355:    else if (!Q_stricmp(token, "missileDlight"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $259
ARGP4
ADDRLP4 76
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $257
line 356
;356:    {
line 357
;357:      int size = 0;
ADDRLP4 80
CNSTI4 0
ASGNI4
line 359
;358:
;359:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 84
INDIRP4
ASGNP4
line 360
;360:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $260
line 361
;361:        break;
ADDRGP4 $127
JUMPV
LABELV $260
line 363
;362:
;363:      size = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 88
INDIRI4
ASGNI4
line 365
;364:
;365:      if (size < 0)
ADDRLP4 80
INDIRI4
CNSTI4 0
GEI4 $262
line 366
;366:        size = 0;
ADDRLP4 80
CNSTI4 0
ASGNI4
LABELV $262
line 368
;367:
;368:      wim->missileDlight = size;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 80
INDIRI4
CVIF4 4
ASGNF4
line 370
;369:
;370:      continue;
ADDRGP4 $126
JUMPV
LABELV $257
line 372
;371:    }
;372:    else if (!Q_stricmp(token, "firingSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $266
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $264
line 373
;373:    {
line 374
;374:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 84
INDIRP4
ASGNP4
line 375
;375:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $267
line 376
;376:        break;
ADDRGP4 $127
JUMPV
LABELV $267
line 378
;377:
;378:      wim->firingSound = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 88
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 380
;379:
;380:      continue;
ADDRGP4 $126
JUMPV
LABELV $264
line 382
;381:    }
;382:    else if (!Q_stricmp(token, "missileSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $271
ARGP4
ADDRLP4 84
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $269
line 383
;383:    {
line 384
;384:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 88
INDIRP4
ASGNP4
line 385
;385:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $272
line 386
;386:        break;
ADDRGP4 $127
JUMPV
LABELV $272
line 388
;387:
;388:      wim->missileSound = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 92
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 390
;389:
;390:      continue;
ADDRGP4 $126
JUMPV
LABELV $269
line 392
;391:    }
;392:    else if (!Q_stricmp(token, "flashSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $276
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $274
line 393
;393:    {
line 394
;394:      int index = 0;
ADDRLP4 92
CNSTI4 0
ASGNI4
line 396
;395:
;396:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 397
;397:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $277
line 398
;398:        break;
ADDRGP4 $127
JUMPV
LABELV $277
line 400
;399:
;400:      index = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 92
ADDRLP4 100
INDIRI4
ASGNI4
line 402
;401:
;402:      if (index < 0)
ADDRLP4 92
INDIRI4
CNSTI4 0
GEI4 $279
line 403
;403:        index = 0;
ADDRLP4 92
CNSTI4 0
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $279
line 404
;404:      else if (index > 3)
ADDRLP4 92
INDIRI4
CNSTI4 3
LEI4 $281
line 405
;405:        index = 3;
ADDRLP4 92
CNSTI4 3
ASGNI4
LABELV $281
LABELV $280
line 407
;406:
;407:      token = COM_Parse(text_p);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 104
INDIRP4
ASGNP4
line 408
;408:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $283
line 409
;409:        break;
ADDRGP4 $127
JUMPV
LABELV $283
line 411
;410:
;411:      wim->flashSound[index] = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 108
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 413
;412:
;413:      continue;
ADDRGP4 $126
JUMPV
LABELV $274
line 415
;414:    }
;415:    else if (!Q_stricmp(token, "}"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $287
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $285
line 416
;416:      return qtrue; //reached the end of this weapon section
CNSTI4 1
RETI4
ADDRGP4 $124
JUMPV
LABELV $285
line 418
;417:    else
;418:    {
line 419
;419:      CG_Printf(S_COLOR_RED "ERROR: unknown token '%s' in weapon section\n", token);
ADDRGP4 $288
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 420
;420:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $124
JUMPV
LABELV $126
line 108
ADDRGP4 $125
JUMPV
LABELV $127
line 424
;421:    }
;422:  }
;423:
;424:  return qfalse;
CNSTI4 0
RETI4
LABELV $124
endproc CG_ParseWeaponModeSection 112 8
proc CG_ParseWeaponFile 20140 12
line 436
;425:}
;426:
;427:/*
;428: ======================
;429: CG_ParseWeaponFile
;430:
;431: Parses a configuration file describing a weapon
;432: ======================
;433: */
;434:static qboolean
;435:CG_ParseWeaponFile(const char *filename, weaponInfo_t *wi)
;436:{
line 442
;437:  char *text_p;
;438:  int len;
;439:  char *token;
;440:  char text[20000];
;441:  fileHandle_t f;
;442:  weaponMode_t weaponMode = WPM_NONE;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 445
;443:
;444:  // load the file
;445:  len = trap_FS_FOpenFile(filename, &f, FS_READ);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20016
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20020
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20020
INDIRI4
ASGNI4
line 446
;446:  if (len <= 0)
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $290
line 447
;447:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $289
JUMPV
LABELV $290
line 449
;448:
;449:  if (len >= sizeof(text) - 1)
ADDRLP4 12
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $292
line 450
;450:  {
line 451
;451:    CG_Printf("File %s too long\n", filename);
ADDRGP4 $294
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 452
;452:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $289
JUMPV
LABELV $292
line 455
;453:  }
;454:
;455:  trap_FS_Read(text, len, f);
ADDRLP4 16
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20016
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 456
;456:  text[len] = 0;
ADDRLP4 12
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 457
;457:  trap_FS_FCloseFile(f);
ADDRLP4 20016
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 460
;458:
;459:  // parse the text
;460:  text_p = text;
ADDRLP4 8
ADDRLP4 16
ASGNP4
ADDRGP4 $296
JUMPV
LABELV $295
line 464
;461:
;462:  // read optional parameters
;463:  while(1)
;464:  {
line 465
;465:    token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20024
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20024
INDIRP4
ASGNP4
line 467
;466:
;467:    if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $298
line 468
;468:      break;
ADDRGP4 $297
JUMPV
LABELV $298
line 470
;469:
;470:    if (!Q_stricmp(token, ""))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $132
ARGP4
ADDRLP4 20028
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20028
INDIRI4
CNSTI4 0
NEI4 $300
line 471
;471:      break;
ADDRGP4 $297
JUMPV
LABELV $300
line 473
;472:
;473:    if (!Q_stricmp(token, "{"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $304
ARGP4
ADDRLP4 20032
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20032
INDIRI4
CNSTI4 0
NEI4 $302
line 474
;474:    {
line 475
;475:      if (weaponMode == WPM_NONE)
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $305
line 476
;476:      {
line 477
;477:        CG_Printf(S_COLOR_RED "ERROR: weapon mode section started without a declaration\n");
ADDRGP4 $307
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 478
;478:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $289
JUMPV
LABELV $305
line 480
;479:      }
;480:      else if (!CG_ParseWeaponModeSection(&wi->wim[weaponMode], &text_p))
CNSTI4 168
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20036
ADDRGP4 CG_ParseWeaponModeSection
CALLI4
ASGNI4
ADDRLP4 20036
INDIRI4
CNSTI4 0
NEI4 $308
line 481
;481:      {
line 482
;482:        CG_Printf(S_COLOR_RED "ERROR: failed to parse weapon mode section\n");
ADDRGP4 $310
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 483
;483:        return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $289
JUMPV
LABELV $308
line 487
;484:      }
;485:
;486:      //start parsing ejectors again
;487:      weaponMode = WPM_NONE;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 489
;488:
;489:      continue;
ADDRGP4 $296
JUMPV
LABELV $302
line 491
;490:    }
;491:    else if (!Q_stricmp(token, "primary"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $313
ARGP4
ADDRLP4 20036
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20036
INDIRI4
CNSTI4 0
NEI4 $311
line 492
;492:    {
line 493
;493:      weaponMode = WPM_PRIMARY;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 494
;494:      continue;
ADDRGP4 $296
JUMPV
LABELV $311
line 496
;495:    }
;496:    else if (!Q_stricmp(token, "secondary"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $316
ARGP4
ADDRLP4 20040
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20040
INDIRI4
CNSTI4 0
NEI4 $314
line 497
;497:    {
line 498
;498:      weaponMode = WPM_SECONDARY;
ADDRLP4 4
CNSTI4 2
ASGNI4
line 499
;499:      continue;
ADDRGP4 $296
JUMPV
LABELV $314
line 501
;500:    }
;501:    else if (!Q_stricmp(token, "tertiary"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $319
ARGP4
ADDRLP4 20044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20044
INDIRI4
CNSTI4 0
NEI4 $317
line 502
;502:    {
line 503
;503:      weaponMode = WPM_TERTIARY;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 504
;504:      continue;
ADDRGP4 $296
JUMPV
LABELV $317
line 506
;505:    }
;506:    else if (!Q_stricmp(token, "weaponModel"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $322
ARGP4
ADDRLP4 20048
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20048
INDIRI4
CNSTI4 0
NEI4 $320
line 507
;507:    {
line 510
;508:      char path[MAX_QPATH];
;509:
;510:      token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20116
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20116
INDIRP4
ASGNP4
line 511
;511:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $323
line 512
;512:        break;
ADDRGP4 $297
JUMPV
LABELV $323
line 514
;513:
;514:      wi->weaponModel = trap_R_RegisterModel(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 20120
INDIRI4
ASGNI4
line 516
;515:
;516:      if (!wi->weaponModel)
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $325
line 517
;517:        CG_Printf(S_COLOR_RED "ERROR: weapon model not found %s\n", token);
ADDRGP4 $327
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $325
line 519
;518:
;519:      strcpy(path, token);
ADDRLP4 20052
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 520
;520:      COM_StripExtension(path, path, sizeof(path));
ADDRLP4 20052
ARGP4
ADDRLP4 20052
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 521
;521:      strcat(path, "_flash.md3");
ADDRLP4 20052
ARGP4
ADDRGP4 $328
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 522
;522:      wi->flashModel = trap_R_RegisterModel(path);
ADDRLP4 20052
ARGP4
ADDRLP4 20124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20124
INDIRI4
ASGNI4
line 524
;523:
;524:      strcpy(path, token);
ADDRLP4 20052
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 525
;525:      COM_StripExtension(path, path, sizeof(path));
ADDRLP4 20052
ARGP4
ADDRLP4 20052
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 526
;526:      strcat(path, "_barrel.md3");
ADDRLP4 20052
ARGP4
ADDRGP4 $329
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 527
;527:      wi->barrelModel = trap_R_RegisterModel(path);
ADDRLP4 20052
ARGP4
ADDRLP4 20128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 20128
INDIRI4
ASGNI4
line 529
;528:
;529:      strcpy(path, token);
ADDRLP4 20052
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 530
;530:      COM_StripExtension(path, path, sizeof(path));
ADDRLP4 20052
ARGP4
ADDRLP4 20052
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 531
;531:      strcat(path, "_hand.md3");
ADDRLP4 20052
ARGP4
ADDRGP4 $330
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 532
;532:      wi->handsModel = trap_R_RegisterModel(path);
ADDRLP4 20052
ARGP4
ADDRLP4 20132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20132
INDIRI4
ASGNI4
line 534
;533:
;534:      if (!wi->handsModel)
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $296
line 535
;535:        wi->handsModel = trap_R_RegisterModel("models/weapons2/shotgun/shotgun_hand.md3");
ADDRGP4 $333
ARGP4
ADDRLP4 20136
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20136
INDIRI4
ASGNI4
line 537
;536:
;537:      continue;
ADDRGP4 $296
JUMPV
LABELV $320
line 539
;538:    }
;539:    else if (!Q_stricmp(token, "idleSound"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $336
ARGP4
ADDRLP4 20052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 0
NEI4 $334
line 540
;540:    {
line 541
;541:      token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20056
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20056
INDIRP4
ASGNP4
line 542
;542:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $337
line 543
;543:        break;
ADDRGP4 $297
JUMPV
LABELV $337
line 545
;544:
;545:      wi->readySound = trap_S_RegisterSound(token, qfalse);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20060
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 20060
INDIRI4
ASGNI4
line 547
;546:
;547:      continue;
ADDRGP4 $296
JUMPV
LABELV $334
line 549
;548:    }
;549:    else if (!Q_stricmp(token, "icon"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $341
ARGP4
ADDRLP4 20056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20056
INDIRI4
CNSTI4 0
NEI4 $339
line 550
;550:    {
line 551
;551:      token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 552
;552:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $342
line 553
;553:        break;
ADDRGP4 $297
JUMPV
LABELV $342
line 555
;554:
;555:      wi->weaponIcon = wi->ammoIcon = trap_R_RegisterShader(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 20068
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20068
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
ADDRLP4 20068
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
line 557
;556:
;557:      if (!wi->weaponIcon)
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
NEI4 $296
line 558
;558:        CG_Printf(S_COLOR_RED "ERROR: weapon icon not found %s\n", token);
ADDRGP4 $346
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 560
;559:
;560:      continue;
ADDRGP4 $296
JUMPV
LABELV $339
line 562
;561:    }
;562:    else if (!Q_stricmp(token, "crosshair"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $349
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
NEI4 $347
line 563
;563:    {
line 564
;564:      int size = 0;
ADDRLP4 20064
CNSTI4 0
ASGNI4
line 566
;565:
;566:      token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20068
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20068
INDIRP4
ASGNP4
line 567
;567:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $350
line 568
;568:        break;
ADDRGP4 $297
JUMPV
LABELV $350
line 570
;569:
;570:      size = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20072
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 20064
ADDRLP4 20072
INDIRI4
ASGNI4
line 572
;571:
;572:      if (size < 0)
ADDRLP4 20064
INDIRI4
CNSTI4 0
GEI4 $352
line 573
;573:        size = 0;
ADDRLP4 20064
CNSTI4 0
ASGNI4
LABELV $352
line 575
;574:
;575:      token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20076
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20076
INDIRP4
ASGNP4
line 576
;576:      if (!token)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $354
line 577
;577:        break;
ADDRGP4 $297
JUMPV
LABELV $354
line 579
;578:
;579:      wi->crossHair = trap_R_RegisterShader(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20080
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 20080
INDIRI4
ASGNI4
line 580
;580:      wi->crossHairSize = size;
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
line 582
;581:
;582:      if (!wi->crossHair)
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
NEI4 $296
line 583
;583:        CG_Printf(S_COLOR_RED "ERROR: weapon crosshair not found %s\n", token);
ADDRGP4 $358
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 585
;584:
;585:      continue;
ADDRGP4 $296
JUMPV
LABELV $347
line 587
;586:    }
;587:    else if (!Q_stricmp(token, "disableIn3rdPerson"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $361
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $359
line 588
;588:    {
line 589
;589:      wi->disableIn3rdPerson = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 56
ADDP4
CNSTI4 1
ASGNI4
line 591
;590:
;591:      continue;
ADDRGP4 $296
JUMPV
LABELV $359
line 594
;592:    }
;593:
;594:    Com_Printf(S_COLOR_RED "ERROR: unknown token '%s'\n", token);
ADDRGP4 $362
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 595
;595:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $289
JUMPV
LABELV $296
line 463
ADDRGP4 $295
JUMPV
LABELV $297
line 598
;596:  }
;597:
;598:  return qtrue;
CNSTI4 1
RETI4
LABELV $289
endproc CG_ParseWeaponFile 20140 12
export CG_RegisterWeapon
proc CG_RegisterWeapon 120 16
line 608
;599:}
;600:
;601:/*
;602: =================
;603: CG_RegisterWeapon
;604: =================
;605: */
;606:void
;607:CG_RegisterWeapon(int weaponNum)
;608:{
line 614
;609:  weaponInfo_t *weaponInfo;
;610:  char path[MAX_QPATH];
;611:  vec3_t mins, maxs;
;612:  int i;
;613:
;614:  weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 4
CNSTI4 900
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 616
;615:
;616:  if (weaponNum == 0)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $364
line 617
;617:    return;
ADDRGP4 $363
JUMPV
LABELV $364
line 619
;618:
;619:  if (weaponInfo->registered)
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $366
line 620
;620:    return;
ADDRGP4 $363
JUMPV
LABELV $366
line 622
;621:
;622:  memset(weaponInfo, 0, sizeof(*weaponInfo));
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 900
ARGI4
ADDRGP4 memset
CALLP4
pop
line 623
;623:  weaponInfo->registered = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 625
;624:
;625:  if (!BG_FindNameForWeapon(weaponNum))
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 BG_FindNameForWeapon
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $368
line 626
;626:    CG_Error("Couldn't find weapon %i", weaponNum);
ADDRGP4 $370
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
LABELV $368
line 628
;627:
;628:  Com_sprintf(path, MAX_QPATH, "models/weapons/%s/weapon.cfg", BG_FindNameForWeapon(weaponNum));
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 BG_FindNameForWeapon
CALLP4
ASGNP4
ADDRLP4 32
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $371
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 630
;629:
;630:  weaponInfo->humanName = BG_FindHumanNameForWeapon(weaponNum);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 BG_FindHumanNameForWeapon
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 104
INDIRP4
ASGNP4
line 632
;631:
;632:  if (!CG_ParseWeaponFile(path, weaponInfo))
ADDRLP4 32
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 CG_ParseWeaponFile
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $372
line 633
;633:    Com_Printf(S_COLOR_RED "ERROR: failed to parse %s\n", path);
ADDRGP4 $374
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $372
line 636
;634:
;635:  // calc midpoint for rotation
;636:  trap_R_ModelBounds(weaponInfo->weaponModel, mins, maxs);
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 637
;637:  for(i = 0;i < 3;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $375
line 638
;638:    weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * (maxs[i] - mins[i]);
ADDRLP4 112
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 116
ADDRLP4 112
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ASGNF4
ADDRLP4 112
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 116
INDIRF4
CNSTF4 1056964608
ADDRLP4 112
INDIRI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 116
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
LABELV $376
line 637
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $375
line 641
;639:
;640:  //FIXME:
;641:  for(i = WPM_NONE + 1;i < WPM_NUM_WEAPONMODES;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $379
line 642
;642:    weaponInfo->wim[i].loopFireSound = qfalse;
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 112
ADDP4
CNSTI4 0
ASGNI4
LABELV $380
line 641
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 5
LTI4 $379
line 643
;643:}
LABELV $363
endproc CG_RegisterWeapon 120 16
export CG_InitWeapons
proc CG_InitWeapons 8 12
line 654
;644:
;645:/*
;646: ===============
;647: CG_InitWeapons
;648:
;649: Precaches weapons
;650: ===============
;651: */
;652:void
;653:CG_InitWeapons(void)
;654:{
line 657
;655:  int i;
;656:
;657:  memset(cg_weapons, 0, sizeof(cg_weapons));
ADDRGP4 cg_weapons
ARGP4
CNSTI4 0
ARGI4
CNSTI4 28800
ARGI4
ADDRGP4 memset
CALLP4
pop
line 659
;658:
;659:  for(i = WP_NONE + 1;i < WP_NUM_WEAPONS;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $384
line 660
;660:    CG_RegisterWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
LABELV $385
line 659
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 30
LTI4 $384
line 662
;661:
;662:  cgs.media.level2ZapTS = CG_RegisterTrailSystem("models/weapons/lev2zap/lightning");
ADDRGP4 $390
ARGP4
ADDRLP4 4
ADDRGP4 CG_RegisterTrailSystem
CALLI4
ASGNI4
ADDRGP4 cgs+268684+12
ADDRLP4 4
INDIRI4
ASGNI4
line 663
;663:}
LABELV $383
endproc CG_InitWeapons 8 12
proc CG_MapTorsoToWeaponFrame 24 0
line 681
;664:
;665:/*
;666: ========================================================================================
;667:
;668: VIEW WEAPON
;669:
;670: ========================================================================================
;671: */
;672:
;673:/*
;674: =================
;675: CG_MapTorsoToWeaponFrame
;676:
;677: =================
;678: */
;679:static int
;680:CG_MapTorsoToWeaponFrame(clientInfo_t *ci, int frame)
;681:{
line 684
;682:
;683:  // change weapon
;684:  if (frame >= ci->animations[TORSO_DROP].firstFrame && frame < ci->animations[TORSO_DROP].firstFrame + 9)
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $392
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $392
line 685
;685:    return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $391
JUMPV
LABELV $392
line 688
;686:
;687:  // stand attack
;688:  if (frame >= ci->animations[TORSO_ATTACK].firstFrame && frame < ci->animations[TORSO_ATTACK].firstFrame + 6)
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $394
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 6
ADDI4
GEI4 $394
line 689
;689:    return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $391
JUMPV
LABELV $394
line 692
;690:
;691:  // stand attack 2
;692:  if (frame >= ci->animations[TORSO_ATTACK2].firstFrame && frame < ci->animations[TORSO_ATTACK2].firstFrame + 6)
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $396
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 6
ADDI4
GEI4 $396
line 693
;693:    return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $391
JUMPV
LABELV $396
line 695
;694:
;695:  return 0;
CNSTI4 0
RETI4
LABELV $391
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 48 8
line 705
;696:}
;697:
;698:/*
;699: ==============
;700: CG_CalculateWeaponPosition
;701: ==============
;702: */
;703:static void
;704:CG_CalculateWeaponPosition(vec3_t origin, vec3_t angles)
;705:{
line 711
;706:  float scale;
;707:  int delta;
;708:  float fracsin;
;709:  float bob;
;710:
;711:  VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+110040+24
INDIRB
ASGNB 12
line 712
;712:  VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+110408
INDIRB
ASGNB 12
line 715
;713:
;714:  // on odd legs, invert some angles
;715:  if (cg.bobcycle & 1)
ADDRGP4 cg+115788
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $402
line 716
;716:    scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+115792
INDIRF4
NEGF4
ASGNF4
ADDRGP4 $403
JUMPV
LABELV $402
line 718
;717:  else
;718:    scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+115792
INDIRF4
ASGNF4
LABELV $403
line 722
;719:
;720:  // gun angles from bobbing
;721:  //TA: bob amount is class dependant
;722:  bob = BG_FindBobForClass(cg.predictedPlayerState.stats[STAT_PCLASS]);
ADDRGP4 cg+107636+184+28
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindBobForClass
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 16
INDIRF4
ASGNF4
line 724
;723:
;724:  if (bob != 0)
ADDRLP4 8
INDIRF4
CNSTF4 0
EQF4 $410
line 725
;725:  {
line 726
;726:    angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 0
INDIRF4
ADDRGP4 cg+115784
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 727
;727:    angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRGP4 cg+115784
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 728
;728:    angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+115792
INDIRF4
ADDRGP4 cg+115784
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 729
;729:  }
LABELV $410
line 732
;730:
;731:  // drop the weapon when landing
;732:  if (!BG_ClassHasAbility(cg.predictedPlayerState.stats[STAT_PCLASS], SCA_NOWEAPONDRIFT))
ADDRGP4 cg+107636+184+28
INDIRI4
ARGI4
CNSTI4 8
ARGI4
ADDRLP4 20
ADDRGP4 BG_ClassHasAbility
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $416
line 733
;733:  {
line 734
;734:    delta = cg.time - cg.landTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+109936
INDIRI4
SUBI4
ASGNI4
line 735
;735:    if (delta < LAND_DEFLECT_TIME)
ADDRLP4 12
INDIRI4
CNSTI4 150
GEI4 $423
line 736
;736:      origin[2] += cg.landChange * 0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+109932
INDIRF4
MULF4
ADDRLP4 12
INDIRI4
CVIF4 4
MULF4
CNSTF4 1125515264
DIVF4
ADDF4
ASGNF4
ADDRGP4 $424
JUMPV
LABELV $423
line 737
;737:    else if (delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME)
ADDRLP4 12
INDIRI4
CNSTI4 450
GEI4 $426
line 738
;738:      origin[2] += cg.landChange * 0.25 * (LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+109932
INDIRF4
MULF4
CNSTI4 450
ADDRLP4 12
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1133903872
DIVF4
ADDF4
ASGNF4
LABELV $426
LABELV $424
line 741
;739:
;740:    // idle drift
;741:    scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+115792
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 742
;742:    fracsin = sin(cg.time * 0.001);
CNSTF4 981668463
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 32
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 32
INDIRF4
ASGNF4
line 743
;743:    angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 744
;744:    angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 745
;745:    angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 746
;746:  }
LABELV $416
line 747
;747:}
LABELV $398
endproc CG_CalculateWeaponPosition 48 8
proc CG_MachinegunSpinAngle 20 4
line 758
;748:
;749:/*
;750: ======================
;751: CG_MachinegunSpinAngle
;752: ======================
;753: */
;754:#define   SPIN_SPEED  0.9
;755:#define   COAST_TIME  1000
;756:static float
;757:CG_MachinegunSpinAngle(centity_t *cent, qboolean firing)
;758:{
line 763
;759:  int delta;
;760:  float angle;
;761:  float speed;
;762:
;763:  delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
INDIRI4
SUBI4
ASGNI4
line 764
;764:  if (cent->pe.barrelSpinning)
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRI4
CNSTI4 0
EQI4 $433
line 765
;765:    angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
CNSTF4 1063675494
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
ADDRGP4 $434
JUMPV
LABELV $433
line 767
;766:  else
;767:  {
line 768
;768:    if (delta > COAST_TIME)
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $435
line 769
;769:      delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
LABELV $435
line 771
;770:
;771:    speed = 0.5 * (SPIN_SPEED + (float) (COAST_TIME - delta) / COAST_TIME);
ADDRLP4 8
CNSTF4 1056964608
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
CNSTF4 1063675494
ADDF4
MULF4
ASGNF4
line 772
;772:    angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 773
;773:  }
LABELV $434
line 775
;774:
;775:  if (cent->pe.barrelSpinning == !firing)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $440
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $441
JUMPV
LABELV $440
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $441
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $437
line 776
;776:  {
line 777
;777:    cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 778
;778:    cent->pe.barrelAngle = AngleMod(angle);
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 779
;779:    cent->pe.barrelSpinning = firing;
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 780
;780:  }
LABELV $437
line 782
;781:
;782:  return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $431
endproc CG_MachinegunSpinAngle 20 4
proc CG_LightningBolt 292 28
line 794
;783:}
;784:
;785:/*
;786: ===============
;787: This function is from Xreal proyect
;788: Author: Robert Beckebans <trebor_7@users.sourceforge.net>
;789: JUHOX: CG_LightningBolt (new version)
;790: ===============
;791: */
;792:static void
;793:CG_LightningBolt(centity_t * cent, vec3_t origin)
;794:{
line 802
;795:  trace_t trace;
;796:  refEntity_t beam;
;797:  vec3_t forward, right, up;
;798:  vec3_t muzzlePoint, endPoint;
;799:  vec3_t surfNormal;
;800:  int anim;
;801:
;802:  if (cent->currentState.weapon != WP_LAS_GUN)
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 9
EQI4 $444
line 803
;803:    return;
ADDRGP4 $443
JUMPV
LABELV $444
line 805
;804:
;805:  memset(&beam, 0, sizeof(beam));
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 807
;806:
;807:  {
line 808
;808:    if (cent->currentState.eFlags & EF_WALLCLIMB)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $446
line 809
;809:    {
line 810
;810:      if (cent->currentState.eFlags & EF_WALLCLIMBCEILING)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $448
line 811
;811:      {
line 812
;812:        VectorSet(surfNormal, 0.0f, 0.0f, -1.0f);
ADDRLP4 276
CNSTF4 0
ASGNF4
ADDRLP4 164
ADDRLP4 276
INDIRF4
ASGNF4
ADDRLP4 164+4
ADDRLP4 276
INDIRF4
ASGNF4
ADDRLP4 164+8
CNSTF4 3212836864
ASGNF4
line 813
;813:      }
ADDRGP4 $447
JUMPV
LABELV $448
line 815
;814:      else
;815:      {
line 816
;816:        VectorCopy(cent->currentState.angles2, surfNormal);
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 817
;817:      }
line 818
;818:    }
ADDRGP4 $447
JUMPV
LABELV $446
line 820
;819:    else
;820:    {
line 821
;821:      VectorSet(surfNormal, 0.0f, 0.0f, 1.0f);
ADDRLP4 276
CNSTF4 0
ASGNF4
ADDRLP4 164
ADDRLP4 276
INDIRF4
ASGNF4
ADDRLP4 164+4
ADDRLP4 276
INDIRF4
ASGNF4
ADDRLP4 164+8
CNSTF4 1065353216
ASGNF4
line 822
;822:    }
LABELV $447
line 824
;823:
;824:    AngleVectors(cent->lerpAngles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRLP4 152
ARGP4
ADDRLP4 252
ARGP4
ADDRLP4 264
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 825
;825:    VectorCopy(cent->lerpOrigin, muzzlePoint);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1556
ADDP4
INDIRB
ASGNB 12
line 826
;826:  }
line 828
;827:
;828:  anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 188
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 829
;829:  if (anim == LEGS_WALKCR || anim == LEGS_IDLECR)
ADDRLP4 188
INDIRI4
CNSTI4 13
EQI4 $456
ADDRLP4 188
INDIRI4
CNSTI4 23
NEI4 $454
LABELV $456
line 830
;830:  {
line 831
;831:    VectorMA(muzzlePoint, CROUCH_VIEWHEIGHT, surfNormal, muzzlePoint);
ADDRLP4 280
CNSTF4 1094713344
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 164+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1094713344
ADDRLP4 164+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 832
;832:  }
ADDRGP4 $455
JUMPV
LABELV $454
line 834
;833:  else
;834:  {
line 835
;835:    VectorMA(muzzlePoint, DEFAULT_VIEWHEIGHT, surfNormal, muzzlePoint);
ADDRLP4 280
CNSTF4 1104150528
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 164+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1104150528
ADDRLP4 164+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 836
;836:  }
LABELV $455
line 838
;837:
;838:  VectorMA(muzzlePoint, 14, forward, muzzlePoint);
ADDRLP4 280
CNSTF4 1096810496
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 280
INDIRF4
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 841
;839:
;840:  // project forward by the lightning range
;841:  VectorMA(muzzlePoint, 768, forward, endPoint);
ADDRLP4 284
CNSTF4 1145044992
ASGNF4
ADDRLP4 176
ADDRLP4 0
INDIRF4
ADDRLP4 284
INDIRF4
ADDRLP4 152
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 284
INDIRF4
ADDRLP4 152+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1145044992
ADDRLP4 152+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 844
;842:
;843:  // see if it hit a wall
;844:  CG_Trace(
ADDRLP4 192
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 288
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 176
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 848
;845:    &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, cent->currentState.number, MASK_SHOT);
;846:
;847:  // this is the endpoint
;848:  VectorCopy(trace.endpos, beam.oldorigin);
ADDRLP4 12+84
ADDRLP4 192+12
INDIRB
ASGNB 12
line 852
;849:
;850:  // use the provided origin, even though it may be slightly
;851:  // different than the muzzle origin
;852:  VectorCopy(origin, beam.origin);
ADDRLP4 12+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 854
;853:
;854:  beam.reType = RT_LIGHTNING;
ADDRLP4 12
CNSTI4 6
ASGNI4
line 855
;855:  beam.customShader = cgs.media.laser;
ADDRLP4 12+112
ADDRGP4 cgs+268684+640
INDIRI4
ASGNI4
line 856
;856:  trap_R_AddRefEntityToScene(&beam);
ADDRLP4 12
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 857
;857:}
LABELV $443
endproc CG_LightningBolt 292 28
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 772 20
line 870
;858:
;859:/*
;860: =============
;861: CG_AddPlayerWeapon
;862:
;863: Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;864: The main player will have this called for BOTH cases, so effects like light and
;865: sound should only be done on the world model case.
;866: =============
;867: */
;868:void
;869:CG_AddPlayerWeapon(refEntity_t *parent, playerState_t *ps, centity_t *cent)
;870:{
line 882
;871:  refEntity_t gun;
;872:  refEntity_t barrel;
;873:  refEntity_t flash;
;874:  vec3_t angles;
;875:  weapon_t weaponNum;
;876:  weaponMode_t weaponMode;
;877:  weaponInfo_t *weapon;
;878:  qboolean noGunModel;
;879:  qboolean firing;
;880:  centity_t      *nonPredictedCent;
;881:
;882:  weaponNum = cent->currentState.weapon;
ADDRLP4 304
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 883
;883:  weaponMode = cent->currentState.generic1;
ADDRLP4 0
ADDRFP4 8
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 885
;884:
;885:  if (weaponMode <= WPM_NONE || weaponMode >= WPM_NUM_WEAPONMODES)
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $490
ADDRLP4 0
INDIRI4
CNSTI4 5
LTI4 $488
LABELV $490
line 886
;886:    weaponMode = WPM_PRIMARY;
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $488
line 888
;887:
;888:  if (((cent->currentState.eFlags & EF_FIRING) && weaponMode == WPM_PRIMARY) || ((cent->currentState.eFlags & EF_FIRING2) && weaponMode == WPM_SECONDARY)
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $494
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $495
LABELV $494
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $496
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $495
LABELV $496
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $491
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $491
LABELV $495
line 890
;889:      || ((cent->currentState.eFlags & EF_FIRING3) && weaponMode == WPM_TERTIARY))
;890:    firing = qtrue;
ADDRLP4 288
CNSTI4 1
ASGNI4
ADDRGP4 $492
JUMPV
LABELV $491
line 892
;891:  else
;892:    firing = qfalse;
ADDRLP4 288
CNSTI4 0
ASGNI4
LABELV $492
line 894
;893:
;894:  CG_RegisterWeapon(weaponNum);
ADDRLP4 304
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 895
;895:  weapon = &cg_weapons[weaponNum];
ADDRLP4 144
CNSTI4 900
ADDRLP4 304
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 898
;896:
;897:  // add the weapon
;898:  memset(&gun, 0, sizeof(gun));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 899
;899:  VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 4+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 900
;900:  gun.shadowPlane = parent->shadowPlane;
ADDRLP4 4+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 901
;901:  gun.renderfx = parent->renderfx;
ADDRLP4 4+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 904
;902:
;903:  // set custom shading for railgun refire rate
;904:  if (ps)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $500
line 905
;905:  {
line 906
;906:    gun.shaderRGBA[0] = 255;
ADDRLP4 4+116
CNSTU1 255
ASGNU1
line 907
;907:    gun.shaderRGBA[1] = 255;
ADDRLP4 4+116+1
CNSTU1 255
ASGNU1
line 908
;908:    gun.shaderRGBA[2] = 255;
ADDRLP4 4+116+2
CNSTU1 255
ASGNU1
line 909
;909:    gun.shaderRGBA[3] = 255;
ADDRLP4 4+116+3
CNSTU1 255
ASGNU1
line 912
;910:
;911:    //set weapon[1/2]Time when respective buttons change state
;912:    if (cg.weapon1Firing != (cg.predictedPlayerState.eFlags & EF_FIRING))
ADDRGP4 cg+116228
INDIRI4
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 512
BANDI4
EQI4 $509
line 913
;913:    {
line 914
;914:      cg.weapon1Time = cg.time;
ADDRGP4 cg+116216
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 915
;915:      cg.weapon1Firing = (cg.predictedPlayerState.eFlags & EF_FIRING);
ADDRGP4 cg+116228
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 512
BANDI4
ASGNI4
line 916
;916:    }
LABELV $509
line 918
;917:
;918:    if (cg.weapon2Firing != (cg.predictedPlayerState.eFlags & EF_FIRING2))
ADDRGP4 cg+116232
INDIRI4
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 1024
BANDI4
EQI4 $519
line 919
;919:    {
line 920
;920:      cg.weapon2Time = cg.time;
ADDRGP4 cg+116220
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 921
;921:      cg.weapon2Firing = (cg.predictedPlayerState.eFlags & EF_FIRING2);
ADDRGP4 cg+116232
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 1024
BANDI4
ASGNI4
line 922
;922:    }
LABELV $519
line 924
;923:
;924:    if (cg.weapon3Firing != (cg.predictedPlayerState.eFlags & EF_FIRING3))
ADDRGP4 cg+116236
INDIRI4
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 2048
BANDI4
EQI4 $529
line 925
;925:    {
line 926
;926:      cg.weapon3Time = cg.time;
ADDRGP4 cg+116224
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 927
;927:      cg.weapon3Firing = (cg.predictedPlayerState.eFlags & EF_FIRING3);
ADDRGP4 cg+116236
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 2048
BANDI4
ASGNI4
line 928
;928:    }
LABELV $529
line 929
;929:  }
LABELV $500
line 931
;930:
;931:  gun.hModel = weapon->weaponModel;
ADDRLP4 4+8
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 933
;932:
;933:  noGunModel = ((!ps || cg.renderingThirdPerson) && weapon->disableIn3rdPerson) || !gun.hModel;
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $547
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $546
LABELV $547
ADDRLP4 144
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
NEI4 $545
LABELV $546
ADDRLP4 4+8
INDIRI4
CNSTI4 0
NEI4 $543
LABELV $545
ADDRLP4 460
CNSTI4 1
ASGNI4
ADDRGP4 $544
JUMPV
LABELV $543
ADDRLP4 460
CNSTI4 0
ASGNI4
LABELV $544
ADDRLP4 308
ADDRLP4 460
INDIRI4
ASGNI4
line 935
;934:
;935:  if (!ps)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $548
line 936
;936:  {
line 938
;937:    // add weapon ready sound
;938:    if (firing && weapon->wim[weaponMode].firingSound)
ADDRLP4 464
CNSTI4 0
ASGNI4
ADDRLP4 288
INDIRI4
ADDRLP4 464
INDIRI4
EQI4 $550
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 108
ADDP4
INDIRI4
ADDRLP4 464
INDIRI4
EQI4 $550
line 939
;939:    {
line 940
;940:      trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->wim[weaponMode].firingSound);
ADDRLP4 468
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 468
INDIRP4
INDIRI4
ARGI4
ADDRLP4 468
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 108
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 941
;941:    }
ADDRGP4 $551
JUMPV
LABELV $550
line 942
;942:    else if (weapon->readySound)
ADDRLP4 144
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 0
EQI4 $552
line 943
;943:      trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound);
ADDRLP4 468
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 468
INDIRP4
INDIRI4
ARGI4
ADDRLP4 468
INDIRP4
CNSTI4 1556
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
LABELV $552
LABELV $551
line 944
;944:  }
LABELV $548
line 946
;945:
;946:  if (!noGunModel)
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $554
line 947
;947:  {
line 948
;948:    CG_PositionEntityOnTag(&gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 4
ARGP4
ADDRLP4 464
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 464
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $556
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 950
;949:
;950:    trap_R_AddRefEntityToScene(&gun);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 953
;951:
;952:    // add the spinning barrel
;953:    if (weapon->barrelModel)
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $557
line 954
;954:    {
line 955
;955:      memset(&barrel, 0, sizeof(barrel));
ADDRLP4 312
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 956
;956:      VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 312+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 957
;957:      barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 312+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 958
;958:      barrel.renderfx = parent->renderfx;
ADDRLP4 312+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 960
;959:
;960:      barrel.hModel = weapon->barrelModel;
ADDRLP4 312+8
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 961
;961:      angles[YAW] = 0;
ADDRLP4 292+4
CNSTF4 0
ASGNF4
line 962
;962:      angles[PITCH] = 0;
ADDRLP4 292
CNSTF4 0
ASGNF4
line 963
;963:      angles[ROLL] = CG_MachinegunSpinAngle(cent, firing);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 288
INDIRI4
ARGI4
ADDRLP4 468
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 292+8
ADDRLP4 468
INDIRF4
ASGNF4
line 964
;964:      AnglesToAxis(angles, barrel.axis);
ADDRLP4 292
ARGP4
ADDRLP4 312+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 966
;965:
;966:      CG_PositionRotatedEntityOnTag(&barrel, &gun, weapon->weaponModel, "tag_barrel");
ADDRLP4 312
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $566
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 968
;967:
;968:      trap_R_AddRefEntityToScene(&barrel);
ADDRLP4 312
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 969
;969:    }
LABELV $557
line 970
;970:  }
LABELV $554
line 972
;971:
;972:  if (CG_IsParticleSystemValid(&cent->muzzlePS))
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
ARGP4
ADDRLP4 464
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 464
INDIRI4
CNSTI4 0
EQI4 $567
line 973
;973:  {
line 974
;974:    if (ps || cg.renderingThirdPerson || cent->currentState.number != cg.predictedPlayerState.clientNum)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $575
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $575
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $569
LABELV $575
line 975
;975:    {
line 976
;976:      if (noGunModel)
ADDRLP4 308
INDIRI4
CNSTI4 0
EQI4 $576
line 977
;977:        CG_SetAttachmentTag(&cent->muzzlePS->attachment, *parent, parent->hModel, "tag_weapon");
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 608
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 468
ADDRLP4 608
INDIRP4
INDIRB
ASGNB 140
ADDRLP4 468
ARGP4
ADDRLP4 608
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $556
ARGP4
ADDRGP4 CG_SetAttachmentTag
CALLV
pop
ADDRGP4 $577
JUMPV
LABELV $576
line 979
;978:      else
;979:        CG_SetAttachmentTag(&cent->muzzlePS->attachment, gun, weapon->weaponModel, "tag_flash");
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 612
ADDRLP4 4
INDIRB
ASGNB 140
ADDRLP4 612
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $578
ARGP4
ADDRGP4 CG_SetAttachmentTag
CALLV
pop
LABELV $577
line 980
;980:    }
LABELV $569
line 983
;981:
;982:    //if the PS is infinite disable it when not firing
;983:    if (!firing && CG_IsParticleSystemInfinite(cent->muzzlePS))
ADDRLP4 288
INDIRI4
CNSTI4 0
NEI4 $579
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
ARGP4
ADDRLP4 468
ADDRGP4 CG_IsParticleSystemInfinite
CALLI4
ASGNI4
ADDRLP4 468
INDIRI4
CNSTI4 0
EQI4 $579
line 984
;984:      CG_DestroyParticleSystem(&cent->muzzlePS);
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
ARGP4
ADDRGP4 CG_DestroyParticleSystem
CALLV
pop
LABELV $579
line 985
;985:  }
LABELV $567
line 988
;986:
;987:  // add the flash
;988:  if (!weapon->wim[weaponMode].continuousFlash || !firing)
ADDRLP4 468
CNSTI4 0
ASGNI4
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 32
ADDP4
INDIRI4
ADDRLP4 468
INDIRI4
EQI4 $583
ADDRLP4 288
INDIRI4
ADDRLP4 468
INDIRI4
NEI4 $581
LABELV $583
line 989
;989:  {
line 991
;990:    // impulse flash
;991:    if (cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME)
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $584
line 992
;992:      return;
ADDRGP4 $487
JUMPV
LABELV $584
line 993
;993:  }
LABELV $581
line 995
;994:
;995:  memset(&flash, 0, sizeof(flash));
ADDRLP4 148
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 996
;996:  VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 148+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 997
;997:  flash.shadowPlane = parent->shadowPlane;
ADDRLP4 148+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 998
;998:  flash.renderfx = parent->renderfx;
ADDRLP4 148+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1000
;999:
;1000:  flash.hModel = weapon->flashModel;
ADDRLP4 148+8
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1001
;1001:  if (flash.hModel)
ADDRLP4 148+8
INDIRI4
CNSTI4 0
EQI4 $591
line 1002
;1002:  {
line 1003
;1003:    angles[YAW] = 0;
ADDRLP4 292+4
CNSTF4 0
ASGNF4
line 1004
;1004:    angles[PITCH] = 0;
ADDRLP4 292
CNSTF4 0
ASGNF4
line 1005
;1005:    angles[ROLL] = crandom( ) * 10;
ADDRLP4 472
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 292+8
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 472
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 1006
;1006:    AnglesToAxis(angles, flash.axis);
ADDRLP4 292
ARGP4
ADDRLP4 148+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1008
;1007:
;1008:    if (noGunModel)
ADDRLP4 308
INDIRI4
CNSTI4 0
EQI4 $597
line 1009
;1009:      CG_PositionRotatedEntityOnTag(&flash, parent, parent->hModel, "tag_weapon");
ADDRLP4 148
ARGP4
ADDRLP4 476
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 476
INDIRP4
ARGP4
ADDRLP4 476
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $556
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
ADDRGP4 $598
JUMPV
LABELV $597
line 1011
;1010:    else
;1011:      CG_PositionRotatedEntityOnTag(&flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 148
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $578
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
LABELV $598
line 1013
;1012:
;1013:    trap_R_AddRefEntityToScene(&flash);
ADDRLP4 148
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1014
;1014:  }
LABELV $591
line 1016
;1015:
;1016:  if (ps || cg.renderingThirdPerson || cent->currentState.number != cg.predictedPlayerState.clientNum)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $605
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $605
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $599
LABELV $605
line 1017
;1017:  {
line 1021
;1018:
;1019:
;1020:    // make sure we aren't looking at cg.predictedPlayerEntity for LG
;1021:    nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 452
CNSTI4 1724
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1026
;1022:
;1023:    // if the index of the nonPredictedCent is not the same as the clientNum
;1024:    // then this is a fake player (like on teh single player podiums), so
;1025:    // go ahead and use the cent
;1026:    if ((nonPredictedCent - cg_entities) != cent->currentState.clientNum)
ADDRLP4 452
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1724
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $606
line 1027
;1027:    {
line 1028
;1028:      nonPredictedCent = cent;
ADDRLP4 452
ADDRFP4 8
INDIRP4
ASGNP4
line 1029
;1029:    }
LABELV $606
line 1032
;1030:
;1031:    // add lightning bolt
;1032:    CG_LightningBolt(nonPredictedCent, flash.origin);
ADDRLP4 452
INDIRP4
ARGP4
ADDRLP4 148+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1034
;1033:
;1034:    if (weapon->wim[weaponMode].muzzleParticleSystem && cent->muzzlePsTrigger)
ADDRLP4 472
CNSTI4 0
ASGNI4
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 116
ADDP4
INDIRI4
ADDRLP4 472
INDIRI4
EQI4 $609
ADDRFP4 8
INDIRP4
CNSTI4 1672
ADDP4
INDIRI4
ADDRLP4 472
INDIRI4
EQI4 $609
line 1035
;1035:    {
line 1036
;1036:      cent->muzzlePS = CG_SpawnNewParticleSystem(weapon->wim[weaponMode].muzzleParticleSystem);
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 116
ADDP4
INDIRI4
ARGI4
ADDRLP4 476
ADDRGP4 CG_SpawnNewParticleSystem
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
ADDRLP4 476
INDIRP4
ASGNP4
line 1038
;1037:
;1038:      if (CG_IsParticleSystemValid(&cent->muzzlePS))
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
ARGP4
ADDRLP4 480
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 480
INDIRI4
CNSTI4 0
EQI4 $611
line 1039
;1039:      {
line 1040
;1040:        if (noGunModel)
ADDRLP4 308
INDIRI4
CNSTI4 0
EQI4 $613
line 1041
;1041:          CG_SetAttachmentTag(&cent->muzzlePS->attachment, *parent, parent->hModel, "tag_weapon");
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 624
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 484
ADDRLP4 624
INDIRP4
INDIRB
ASGNB 140
ADDRLP4 484
ARGP4
ADDRLP4 624
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $556
ARGP4
ADDRGP4 CG_SetAttachmentTag
CALLV
pop
ADDRGP4 $614
JUMPV
LABELV $613
line 1043
;1042:        else
;1043:          CG_SetAttachmentTag(&cent->muzzlePS->attachment, gun, weapon->weaponModel, "tag_flash");
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 628
ADDRLP4 4
INDIRB
ASGNB 140
ADDRLP4 628
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $578
ARGP4
ADDRGP4 CG_SetAttachmentTag
CALLV
pop
LABELV $614
line 1045
;1044:
;1045:        CG_SetAttachmentCent(&cent->muzzlePS->attachment, cent);
ADDRLP4 768
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 768
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 768
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 1046
;1046:        CG_AttachToTag(&cent->muzzlePS->attachment);
ADDRFP4 8
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToTag
CALLV
pop
line 1047
;1047:      }
LABELV $611
line 1049
;1048:
;1049:      cent->muzzlePsTrigger = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 1672
ADDP4
CNSTI4 0
ASGNI4
line 1050
;1050:    }
LABELV $609
line 1053
;1051:
;1052:    // make a dlight for the flash
;1053:    if (weapon->wim[weaponMode].flashDlightColor[0] || weapon->wim[weaponMode].flashDlightColor[1] || weapon->wim[weaponMode].flashDlightColor[2])
ADDRLP4 476
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
ASGNP4
ADDRLP4 480
CNSTF4 0
ASGNF4
ADDRLP4 476
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 480
INDIRF4
NEF4 $618
ADDRLP4 476
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 480
INDIRF4
NEF4 $618
ADDRLP4 476
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 480
INDIRF4
EQF4 $615
LABELV $618
line 1054
;1054:    {
line 1055
;1055:      trap_R_AddLightToScene(flash.origin, 300 + (rand() & 31), weapon->wim[weaponMode].flashDlightColor[0], weapon->wim[weaponMode].flashDlightColor[1],
ADDRLP4 484
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 148+68
ARGP4
ADDRLP4 484
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
CVIF4 4
ARGF4
ADDRLP4 488
CNSTI4 168
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 144
INDIRP4
CNSTI4 60
ADDP4
ADDP4
ASGNP4
ADDRLP4 488
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 488
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 488
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1057
;1056:          weapon->wim[weaponMode].flashDlightColor[2]);
;1057:    }
LABELV $615
line 1058
;1058:  }
LABELV $599
line 1062
;1059:
;1060:
;1061:
;1062:}
LABELV $487
endproc CG_AddPlayerWeapon 772 20
export CG_AddViewWeapon
proc CG_AddViewWeapon 224 12
line 1073
;1063:
;1064:/*
;1065: ==============
;1066: CG_AddViewWeapon
;1067:
;1068: Add the weapon, and flash for the player's view
;1069: ==============
;1070: */
;1071:void
;1072:CG_AddViewWeapon(playerState_t *ps)
;1073:{
line 1080
;1074:  refEntity_t hand;
;1075:  centity_t *cent;
;1076:  clientInfo_t *ci;
;1077:  float fovOffset;
;1078:  vec3_t angles;
;1079:  weaponInfo_t *wi;
;1080:  weapon_t weapon = ps->weapon;
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 1081
;1081:  weaponMode_t weaponMode = ps->generic1;
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ASGNI4
line 1083
;1082:
;1083:  if (weaponMode <= WPM_NONE || weaponMode >= WPM_NUM_WEAPONMODES)
ADDRLP4 144
INDIRI4
CNSTI4 0
LEI4 $623
ADDRLP4 144
INDIRI4
CNSTI4 5
LTI4 $621
LABELV $623
line 1084
;1084:    weaponMode = WPM_PRIMARY;
ADDRLP4 144
CNSTI4 1
ASGNI4
LABELV $621
line 1086
;1085:
;1086:  CG_RegisterWeapon(weapon);
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1087
;1087:  wi = &cg_weapons[weapon];
ADDRLP4 156
CNSTI4 900
ADDRLP4 152
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1088
;1088:  cent = &cg.predictedPlayerEntity; // &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 140
ADDRGP4 cg+108104
ASGNP4
line 1090
;1089:
;1090:  if ((ps->persistant[PERS_TEAM] == TEAM_SPECTATOR) || (ps->stats[STAT_STATE] & SS_INFESTING) || (ps->stats[STAT_STATE] & SS_HOVELING))
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 1
EQI4 $628
ADDRLP4 184
ADDRLP4 180
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ASGNI4
ADDRLP4 188
CNSTI4 0
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 16
BANDI4
ADDRLP4 188
INDIRI4
NEI4 $628
ADDRLP4 184
INDIRI4
CNSTI4 256
BANDI4
ADDRLP4 188
INDIRI4
EQI4 $625
LABELV $628
line 1091
;1091:    return;
ADDRGP4 $620
JUMPV
LABELV $625
line 1094
;1092:
;1093:  //TA: no weapon carried - can't draw it
;1094:  if (weapon == WP_NONE)
ADDRLP4 152
INDIRI4
CNSTI4 0
NEI4 $629
line 1095
;1095:    return;
ADDRGP4 $620
JUMPV
LABELV $629
line 1097
;1096:
;1097:  if (ps->pm_type == PM_INTERMISSION)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 7
NEI4 $631
line 1098
;1098:    return;
ADDRGP4 $620
JUMPV
LABELV $631
line 1101
;1099:
;1100:  //TA: draw a prospective buildable infront of the player
;1101:  if ((ps->stats[STAT_BUILDABLE] & ~SB_VALID_TOGGLEBIT) > BA_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
CNSTI4 0
LEI4 $633
line 1102
;1102:    CG_GhostBuildable(ps->stats[STAT_BUILDABLE] & ~SB_VALID_TOGGLEBIT);
ADDRFP4 0
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
ARGI4
ADDRGP4 CG_GhostBuildable
CALLV
pop
LABELV $633
line 1105
;1103:
;1104:  // no gun if in third person view
;1105:  if (cg.renderingThirdPerson)
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $635
line 1106
;1106:    return;
ADDRGP4 $620
JUMPV
LABELV $635
line 1109
;1107:
;1108:  // allow the gun to be completely removed
;1109:  if (!cg_drawGun.integer)
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $638
line 1110
;1110:  {
line 1113
;1111:    vec3_t origin;
;1112:
;1113:    VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 192
ADDRGP4 cg+110040+24
INDIRB
ASGNB 12
line 1114
;1114:    VectorMA( origin, -8, cg.refdef.viewaxis[ 2 ], origin );
ADDRLP4 204
CNSTF4 3238002688
ASGNF4
ADDRLP4 192
ADDRLP4 192
INDIRF4
ADDRLP4 204
INDIRF4
ADDRGP4 cg+110040+36+24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+4
ADDRLP4 192+4
INDIRF4
ADDRLP4 204
INDIRF4
ADDRGP4 cg+110040+36+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+8
ADDRLP4 192+8
INDIRF4
CNSTF4 3238002688
ADDRGP4 cg+110040+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1116
;1115:
;1116:    if (cent->muzzlePS)
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $658
line 1117
;1117:      CG_SetAttachmentPoint(&cent->muzzlePS->attachment, origin);
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 192
ARGP4
ADDRGP4 CG_SetAttachmentPoint
CALLV
pop
LABELV $658
line 1120
;1118:
;1119:    //check for particle systems
;1120:    if (wi->wim[weaponMode].muzzleParticleSystem && cent->muzzlePsTrigger)
ADDRLP4 208
CNSTI4 0
ASGNI4
CNSTI4 168
ADDRLP4 144
INDIRI4
MULI4
ADDRLP4 156
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 116
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
EQI4 $660
ADDRLP4 140
INDIRP4
CNSTI4 1672
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
EQI4 $660
line 1121
;1121:    {
line 1122
;1122:      cent->muzzlePS = CG_SpawnNewParticleSystem(wi->wim[weaponMode].muzzleParticleSystem);
CNSTI4 168
ADDRLP4 144
INDIRI4
MULI4
ADDRLP4 156
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 116
ADDP4
INDIRI4
ARGI4
ADDRLP4 212
ADDRGP4 CG_SpawnNewParticleSystem
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
ADDRLP4 212
INDIRP4
ASGNP4
line 1124
;1123:
;1124:      if (CG_IsParticleSystemValid(&cent->muzzlePS))
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
ARGP4
ADDRLP4 216
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
EQI4 $662
line 1125
;1125:      {
line 1126
;1126:        CG_SetAttachmentPoint(&cent->muzzlePS->attachment, origin);
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 192
ARGP4
ADDRGP4 CG_SetAttachmentPoint
CALLV
pop
line 1127
;1127:        CG_SetAttachmentCent(&cent->muzzlePS->attachment, cent);
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentCent
CALLV
pop
line 1128
;1128:        CG_AttachToPoint(&cent->muzzlePS->attachment);
ADDRLP4 140
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToPoint
CALLV
pop
line 1129
;1129:      }
LABELV $662
line 1130
;1130:      cent->muzzlePsTrigger = qfalse;
ADDRLP4 140
INDIRP4
CNSTI4 1672
ADDP4
CNSTI4 0
ASGNI4
line 1131
;1131:    }
LABELV $660
line 1133
;1132:
;1133:    if (cg.predictedPlayerState.eFlags & EF_FIRING)
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $620
line 1134
;1134:    {
line 1136
;1135:      // special hack for lightning gun...
;1136:      VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 192
ADDRGP4 cg+110040+24
INDIRB
ASGNB 12
line 1137
;1137:      VectorMA(origin, -8, cg.refdef.viewaxis[2], origin);
ADDRLP4 212
CNSTF4 3238002688
ASGNF4
ADDRLP4 192
ADDRLP4 192
INDIRF4
ADDRLP4 212
INDIRF4
ADDRGP4 cg+110040+36+24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+4
ADDRLP4 192+4
INDIRF4
ADDRLP4 212
INDIRF4
ADDRGP4 cg+110040+36+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+8
ADDRLP4 192+8
INDIRF4
CNSTF4 3238002688
ADDRGP4 cg+110040+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1138
;1138:      CG_LightningBolt(&cg_entities[ps->clientNum], origin);
CNSTI4 1724
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 192
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1139
;1139:    }
line 1141
;1140:
;1141:    return;
ADDRGP4 $620
JUMPV
LABELV $638
line 1145
;1142:  }
;1143:
;1144:  // don't draw if testing a gun model
;1145:  if (cg.testGun)
ADDRGP4 cg+116208
INDIRI4
CNSTI4 0
EQI4 $685
line 1146
;1146:    return;
ADDRGP4 $620
JUMPV
LABELV $685
line 1151
;1147:
;1148:  // drop gun lower at higher fov
;1149:  //if ( cg_fov.integer > 90 ) {
;1150:  //TA: the client side variable isn't used ( shouldn't iD have done this anyway? )
;1151:  if (cg.refdef.fov_y > 90)
ADDRGP4 cg+110040+20
INDIRF4
CNSTF4 1119092736
LEF4 $688
line 1152
;1152:    fovOffset = -0.4 * (cg.refdef.fov_y - 90);
ADDRLP4 148
CNSTF4 3201092813
ADDRGP4 cg+110040+20
INDIRF4
CNSTF4 1119092736
SUBF4
MULF4
ASGNF4
ADDRGP4 $689
JUMPV
LABELV $688
line 1154
;1153:  else
;1154:    fovOffset = 0;
ADDRLP4 148
CNSTF4 0
ASGNF4
LABELV $689
line 1156
;1155:
;1156:  memset(&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1159
;1157:
;1158:  // set up gun position
;1159:  CG_CalculateWeaponPosition(hand.origin, angles);
ADDRLP4 0+68
ARGP4
ADDRLP4 160
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1161
;1160:
;1161:  VectorMA( hand.origin, cg_gun_x.value, cg.refdef.viewaxis[ 0 ], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+110040+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+110040+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+110040+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1162
;1162:  VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[ 1 ], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+110040+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+110040+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+110040+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1163
;1163:  VectorMA( hand.origin, ( cg_gun_z.value + fovOffset ), cg.refdef.viewaxis[ 2 ], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+110040+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 148
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+110040+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 148
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+110040+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 148
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1165
;1164:
;1165:  AnglesToAxis(angles, hand.axis);
ADDRLP4 160
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1168
;1166:
;1167:  // map torso animations to weapon animations
;1168:  if (cg_gun_frame.integer)
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $765
line 1169
;1169:  {
line 1171
;1170:    // development tool
;1171:    hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 192
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 192
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 192
INDIRI4
ASGNI4
line 1172
;1172:    hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1173
;1173:  }
ADDRGP4 $766
JUMPV
LABELV $765
line 1175
;1174:  else
;1175:  {
line 1177
;1176:    // get clientinfo for animation map
;1177:    ci = &cgs.clientinfo[cent->currentState.clientNum];
ADDRLP4 172
CNSTI4 1760
ADDRLP4 140
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41408
ADDP4
ASGNP4
line 1178
;1178:    hand.frame = CG_MapTorsoToWeaponFrame(ci, cent->pe.torso.frame);
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ARGI4
ADDRLP4 192
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 192
INDIRI4
ASGNI4
line 1179
;1179:    hand.oldframe = CG_MapTorsoToWeaponFrame(ci, cent->pe.torso.oldFrame);
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 196
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 196
INDIRI4
ASGNI4
line 1180
;1180:    hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 140
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1181
;1181:  }
LABELV $766
line 1183
;1182:
;1183:  hand.hModel = wi->handsModel;
ADDRLP4 0+8
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1184
;1184:  hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1187
;1185:
;1186:  // add everything onto the hand
;1187:  CG_AddPlayerWeapon(&hand, ps, &cg.predictedPlayerEntity);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1188
;1188:}
LABELV $620
endproc CG_AddViewWeapon 224 12
proc CG_WeaponSelectable 4 8
line 1205
;1189:
;1190:/*
;1191: ==============================================================================
;1192:
;1193: WEAPON SELECTION
;1194:
;1195: ==============================================================================
;1196: */
;1197:
;1198:/*
;1199: ===============
;1200: CG_WeaponSelectable
;1201: ===============
;1202: */
;1203:static qboolean
;1204:CG_WeaponSelectable(weapon_t weapon)
;1205:{
line 1214
;1206:  //int ammo, clips;
;1207:  //
;1208:  //BG_UnpackAmmoArray( i, cg.snap->ps.ammo, cg.snap->ps.powerups, &ammo, &clips );
;1209:  //
;1210:  //TA: this is a pain in the ass
;1211:  //if( !ammo && !clips && !BG_FindInfinteAmmoForWeapon( i ) )
;1212:  //  return qfalse;
;1213:
;1214:  if (!BG_InventoryContainsWeapon(weapon, cg.snap->ps.stats))
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $780
line 1215
;1215:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $779
JUMPV
LABELV $780
line 1217
;1216:
;1217:  return qtrue;
CNSTI4 1
RETI4
LABELV $779
endproc CG_WeaponSelectable 4 8
proc CG_UpgradeSelectable 4 8
line 1227
;1218:}
;1219:
;1220:/*
;1221: ===============
;1222: CG_UpgradeSelectable
;1223: ===============
;1224: */
;1225:static qboolean
;1226:CG_UpgradeSelectable(upgrade_t upgrade)
;1227:{
line 1228
;1228:  if (!BG_InventoryContainsUpgrade(upgrade, cg.snap->ps.stats))
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 BG_InventoryContainsUpgrade
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $784
line 1229
;1229:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $783
JUMPV
LABELV $784
line 1231
;1230:
;1231:  return qtrue;
CNSTI4 1
RETI4
LABELV $783
endproc CG_UpgradeSelectable 4 8
export CG_DrawItemSelect
proc CG_DrawItemSelect 328 20
line 1243
;1232:}
;1233:
;1234:#define ICON_BORDER 4
;1235:
;1236:/*
;1237: ===================
;1238: CG_DrawItemSelect
;1239: ===================
;1240: */
;1241:void
;1242:CG_DrawItemSelect(rectDef_t *rect, vec4_t color)
;1243:{
line 1245
;1244:  int i;
;1245:  int x = rect->x;
ADDRLP4 284
ADDRFP4 0
INDIRP4
INDIRF4
CVFI4 4
ASGNI4
line 1246
;1246:  int y = rect->y;
ADDRLP4 288
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1247
;1247:  int width = rect->w;
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1248
;1248:  int height = rect->h;
ADDRLP4 296
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1251
;1249:  int iconsize;
;1250:  int items[64];
;1251:  int numItems = 0, selectedItem = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 264
CNSTI4 0
ASGNI4
line 1258
;1252:  int length;
;1253:  int selectWindow;
;1254:  qboolean vertical;
;1255:  centity_t *cent;
;1256:  playerState_t *ps;
;1257:
;1258:  cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 300
CNSTI4 1724
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1259
;1259:  ps = &cg.snap->ps;
ADDRLP4 304
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1262
;1260:
;1261:  // don't display if dead
;1262:  if (cg.predictedPlayerState.stats[STAT_HEALTH] <= 0)
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
GTI4 $790
line 1263
;1263:    return;
ADDRGP4 $787
JUMPV
LABELV $790
line 1265
;1264:
;1265:  if (!(cg.snap->ps.pm_flags & PMF_FOLLOW))
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $794
line 1266
;1266:  {
line 1268
;1267:    // first make sure that whatever it selected is actually selectable
;1268:    if (cg.weaponSelect <= 32 && !CG_WeaponSelectable(cg.weaponSelect))
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
GTI4 $797
ADDRGP4 cg+109940
INDIRI4
ARGI4
ADDRLP4 308
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $797
line 1269
;1269:      CG_NextWeapon_f();
ADDRGP4 CG_NextWeapon_f
CALLV
pop
ADDRGP4 $798
JUMPV
LABELV $797
line 1270
;1270:    else if (cg.weaponSelect > 32 && !CG_UpgradeSelectable(cg.weaponSelect))
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
LEI4 $801
ADDRGP4 cg+109940
INDIRI4
ARGI4
ADDRLP4 312
ADDRGP4 CG_UpgradeSelectable
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 0
NEI4 $801
line 1271
;1271:      CG_NextWeapon_f();
ADDRGP4 CG_NextWeapon_f
CALLV
pop
LABELV $801
LABELV $798
line 1272
;1272:  }
LABELV $794
line 1275
;1273:
;1274:  // showing weapon select clears pickup item display, but not the blend blob
;1275:  cg.itemPickupTime = 0;
ADDRGP4 cg+115684
CNSTI4 0
ASGNI4
line 1277
;1276:
;1277:  if (height > width)
ADDRLP4 296
INDIRI4
ADDRLP4 292
INDIRI4
LEI4 $806
line 1278
;1278:  {
line 1279
;1279:    vertical = qtrue;
ADDRLP4 280
CNSTI4 1
ASGNI4
line 1280
;1280:    iconsize = width;
ADDRLP4 268
ADDRLP4 292
INDIRI4
ASGNI4
line 1281
;1281:    length = height / width;
ADDRLP4 272
ADDRLP4 296
INDIRI4
ADDRLP4 292
INDIRI4
DIVI4
ASGNI4
line 1282
;1282:  }
ADDRGP4 $807
JUMPV
LABELV $806
line 1283
;1283:  else if (height <= width)
ADDRLP4 296
INDIRI4
ADDRLP4 292
INDIRI4
GTI4 $808
line 1284
;1284:  {
line 1285
;1285:    vertical = qfalse;
ADDRLP4 280
CNSTI4 0
ASGNI4
line 1286
;1286:    iconsize = height;
ADDRLP4 268
ADDRLP4 296
INDIRI4
ASGNI4
line 1287
;1287:    length = width / height;
ADDRLP4 272
ADDRLP4 292
INDIRI4
ADDRLP4 296
INDIRI4
DIVI4
ASGNI4
line 1288
;1288:  }
LABELV $808
LABELV $807
line 1290
;1289:
;1290:  selectWindow = length / 2;
ADDRLP4 276
ADDRLP4 272
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 1292
;1291:
;1292:  for(i = WP_NONE + 1;i < WP_NUM_WEAPONS;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $810
line 1293
;1293:  {
line 1294
;1294:    if (!BG_InventoryContainsWeapon(i, cg.snap->ps.stats))
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 308
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $814
line 1295
;1295:      continue;
ADDRGP4 $811
JUMPV
LABELV $814
line 1297
;1296:
;1297:    if (i == cg.weaponSelect)
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109940
INDIRI4
NEI4 $817
line 1298
;1298:      selectedItem = numItems;
ADDRLP4 264
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $817
line 1300
;1299:
;1300:    CG_RegisterWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1301
;1301:    items[numItems] = i;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1302
;1302:    numItems++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1303
;1303:  }
LABELV $811
line 1292
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 30
LTI4 $810
line 1305
;1304:
;1305:  for(i = UP_NONE + 1;i < UP_NUM_UPGRADES;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $820
line 1306
;1306:  {
line 1307
;1307:    if (!BG_InventoryContainsUpgrade(i, cg.snap->ps.stats))
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 308
ADDRGP4 BG_InventoryContainsUpgrade
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $824
line 1308
;1308:      continue;
ADDRGP4 $821
JUMPV
LABELV $824
line 1310
;1309:
;1310:    if (i == cg.weaponSelect - 32)
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
SUBI4
NEI4 $827
line 1311
;1311:      selectedItem = numItems;
ADDRLP4 264
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $827
line 1313
;1312:
;1313:    CG_RegisterUpgrade(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterUpgrade
CALLV
pop
line 1314
;1314:    items[numItems] = i + 32;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 32
ADDI4
ASGNI4
line 1315
;1315:    numItems++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1316
;1316:  }
LABELV $821
line 1305
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $820
line 1318
;1317:
;1318:  for(i = 0;i < length;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $833
JUMPV
LABELV $830
line 1319
;1319:  {
line 1320
;1320:    int displacement = i - selectWindow;
ADDRLP4 312
ADDRLP4 0
INDIRI4
ADDRLP4 276
INDIRI4
SUBI4
ASGNI4
line 1321
;1321:    int item = displacement + selectedItem;
ADDRLP4 308
ADDRLP4 312
INDIRI4
ADDRLP4 264
INDIRI4
ADDI4
ASGNI4
line 1323
;1322:
;1323:    if ((item >= 0) && (item < numItems))
ADDRLP4 308
INDIRI4
CNSTI4 0
LTI4 $834
ADDRLP4 308
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $834
line 1324
;1324:    {
line 1325
;1325:      trap_R_SetColor(color);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1327
;1326:
;1327:      if (items[item] <= 32)
ADDRLP4 308
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
CNSTI4 32
GTI4 $836
line 1328
;1328:        CG_DrawPic(x, y, iconsize, iconsize, cg_weapons[items[item]].weaponIcon);
ADDRLP4 284
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 288
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 320
ADDRLP4 268
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 320
INDIRF4
ARGF4
ADDRLP4 320
INDIRF4
ARGF4
CNSTI4 900
ADDRLP4 308
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons+36
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
ADDRGP4 $837
JUMPV
LABELV $836
line 1329
;1329:      else if (items[item] > 32)
ADDRLP4 308
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
CNSTI4 32
LEI4 $839
line 1330
;1330:        CG_DrawPic(x, y, iconsize, iconsize, cg_upgrades[items[item] - 32].upgradeIcon);
ADDRLP4 284
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 288
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 324
ADDRLP4 268
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 324
INDIRF4
ARGF4
ADDRLP4 324
INDIRF4
ARGF4
CNSTI4 12
ADDRLP4 308
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_upgrades-384+8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
LABELV $839
LABELV $837
line 1332
;1331:
;1332:      trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1333
;1333:    }
LABELV $834
line 1335
;1334:
;1335:    if (vertical)
ADDRLP4 280
INDIRI4
CNSTI4 0
EQI4 $843
line 1336
;1336:      y += iconsize;
ADDRLP4 288
ADDRLP4 288
INDIRI4
ADDRLP4 268
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $844
JUMPV
LABELV $843
line 1338
;1337:    else
;1338:      x += iconsize;
ADDRLP4 284
ADDRLP4 284
INDIRI4
ADDRLP4 268
INDIRI4
ADDI4
ASGNI4
LABELV $844
line 1339
;1339:  }
LABELV $831
line 1318
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $833
ADDRLP4 0
INDIRI4
ADDRLP4 272
INDIRI4
LTI4 $830
line 1340
;1340:}
LABELV $787
endproc CG_DrawItemSelect 328 20
export CG_DrawItemSelectText
proc CG_DrawItemSelectText 40 32
line 1349
;1341:
;1342:/*
;1343: ===================
;1344: CG_DrawItemSelectText
;1345: ===================
;1346: */
;1347:void
;1348:CG_DrawItemSelectText(rectDef_t *rect, float scale, int textStyle)
;1349:{
line 1354
;1350:  int x, w;
;1351:  char *name;
;1352:  float *color;
;1353:
;1354:  color = CG_FadeColor(cg.weaponSelectTime, WEAPON_SELECT_TIME);
ADDRGP4 cg+115692
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 16
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 1355
;1355:  if (!color)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $847
line 1356
;1356:    return;
ADDRGP4 $845
JUMPV
LABELV $847
line 1358
;1357:
;1358:  trap_R_SetColor(color);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1361
;1359:
;1360:  // draw the selected name
;1361:  if (cg.weaponSelect <= 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
GTI4 $849
line 1362
;1362:  {
line 1363
;1363:    if (cg_weapons[cg.weaponSelect].registered && BG_InventoryContainsWeapon(cg.weaponSelect, cg.snap->ps.stats))
CNSTI4 900
ADDRGP4 cg+109940
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
INDIRI4
CNSTI4 0
EQI4 $850
ADDRGP4 cg+109940
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $850
line 1364
;1364:    {
line 1365
;1365:      if ((name = cg_weapons[cg.weaponSelect].humanName))
ADDRLP4 24
CNSTI4 900
ADDRGP4 cg+109940
INDIRI4
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $850
line 1366
;1366:      {
line 1367
;1367:        w = CG_Text_Width(name, scale, 0);
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1368
;1368:        x = rect->x + rect->w / 2;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1073741824
DIVF4
ADDF4
CVFI4 4
ASGNI4
line 1369
;1369:        CG_Text_Paint(x - w / 2, rect->y + rect->h, scale, color, name, 0, 0, textStyle);
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1370
;1370:      }
line 1371
;1371:    }
line 1372
;1372:  }
ADDRGP4 $850
JUMPV
LABELV $849
line 1373
;1373:  else if (cg.weaponSelect > 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
LEI4 $861
line 1374
;1374:  {
line 1375
;1375:    if (cg_upgrades[cg.weaponSelect - 32].registered && BG_InventoryContainsUpgrade(cg.weaponSelect - 32, cg.snap->ps.stats))
CNSTI4 12
ADDRGP4 cg+109940
INDIRI4
MULI4
ADDRGP4 cg_upgrades-384
ADDP4
INDIRI4
CNSTI4 0
EQI4 $864
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
SUBI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 BG_InventoryContainsUpgrade
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $864
line 1376
;1376:    {
line 1377
;1377:      if ((name = cg_upgrades[cg.weaponSelect - 32].humanName))
ADDRLP4 24
CNSTI4 12
ADDRGP4 cg+109940
INDIRI4
MULI4
ADDRGP4 cg_upgrades-384+4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $870
line 1378
;1378:      {
line 1379
;1379:        w = CG_Text_Width(name, scale, 0);
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1380
;1380:        x = rect->x + rect->w / 2;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1073741824
DIVF4
ADDF4
CVFI4 4
ASGNI4
line 1381
;1381:        CG_Text_Paint(x - w / 2, rect->y + rect->h, scale, color, name, 0, 0, textStyle);
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1382
;1382:      }
LABELV $870
line 1383
;1383:    }
LABELV $864
line 1384
;1384:  }
LABELV $861
LABELV $850
line 1386
;1385:
;1386:  trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1387
;1387:}
LABELV $845
endproc CG_DrawItemSelectText 40 32
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 1396
;1388:
;1389:/*
;1390: ===============
;1391: CG_NextWeapon_f
;1392: ===============
;1393: */
;1394:void
;1395:CG_NextWeapon_f(void)
;1396:{
line 1400
;1397:  int i;
;1398:  int original;
;1399:
;1400:  if (!cg.snap)
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $876
line 1401
;1401:    return;
ADDRGP4 $875
JUMPV
LABELV $876
line 1403
;1402:
;1403:  if (cg.snap->ps.pm_flags & PMF_FOLLOW)
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $879
line 1404
;1404:  {
line 1405
;1405:    trap_SendClientCommand("followprev\n");
ADDRGP4 $882
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 1406
;1406:    return;
ADDRGP4 $875
JUMPV
LABELV $879
line 1409
;1407:  }
;1408:
;1409:  cg.weaponSelectTime = cg.time;
ADDRGP4 cg+115692
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1410
;1410:  original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109940
INDIRI4
ASGNI4
line 1412
;1411:
;1412:  for(i = 0;i < 64;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $886
line 1413
;1413:  {
line 1414
;1414:    cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+109940
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1415
;1415:    if (cg.weaponSelect == 64)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 64
NEI4 $891
line 1416
;1416:      cg.weaponSelect = 0;
ADDRGP4 cg+109940
CNSTI4 0
ASGNI4
LABELV $891
line 1418
;1417:
;1418:    if (cg.weaponSelect <= 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
GTI4 $895
line 1419
;1419:    {
line 1420
;1420:      if (CG_WeaponSelectable(cg.weaponSelect))
ADDRGP4 cg+109940
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $896
line 1421
;1421:        break;
ADDRGP4 $888
JUMPV
line 1422
;1422:    }
LABELV $895
line 1423
;1423:    else if (cg.weaponSelect > 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
LEI4 $901
line 1424
;1424:    {
line 1425
;1425:      if (CG_UpgradeSelectable(cg.weaponSelect - 32))
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
SUBI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_UpgradeSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $904
line 1426
;1426:        break;
ADDRGP4 $888
JUMPV
LABELV $904
line 1427
;1427:    }
LABELV $901
LABELV $896
line 1428
;1428:  }
LABELV $887
line 1412
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $886
LABELV $888
line 1430
;1429:
;1430:  if (i == 64)
ADDRLP4 0
INDIRI4
CNSTI4 64
NEI4 $907
line 1431
;1431:    cg.weaponSelect = original;
ADDRGP4 cg+109940
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $907
line 1432
;1432:}
LABELV $875
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 1441
;1433:
;1434:/*
;1435: ===============
;1436: CG_PrevWeapon_f
;1437: ===============
;1438: */
;1439:void
;1440:CG_PrevWeapon_f(void)
;1441:{
line 1445
;1442:  int i;
;1443:  int original;
;1444:
;1445:  if (!cg.snap)
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $911
line 1446
;1446:    return;
ADDRGP4 $910
JUMPV
LABELV $911
line 1448
;1447:
;1448:  if (cg.snap->ps.pm_flags & PMF_FOLLOW)
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $914
line 1449
;1449:  {
line 1450
;1450:    trap_SendClientCommand("follownext\n");
ADDRGP4 $917
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 1451
;1451:    return;
ADDRGP4 $910
JUMPV
LABELV $914
line 1454
;1452:  }
;1453:
;1454:  cg.weaponSelectTime = cg.time;
ADDRGP4 cg+115692
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1455
;1455:  original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109940
INDIRI4
ASGNI4
line 1457
;1456:
;1457:  for(i = 0;i < 64;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $921
line 1458
;1458:  {
line 1459
;1459:    cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+109940
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1460
;1460:    if (cg.weaponSelect == -1)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 -1
NEI4 $926
line 1461
;1461:      cg.weaponSelect = 63;
ADDRGP4 cg+109940
CNSTI4 63
ASGNI4
LABELV $926
line 1463
;1462:
;1463:    if (cg.weaponSelect <= 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
GTI4 $930
line 1464
;1464:    {
line 1465
;1465:      if (CG_WeaponSelectable(cg.weaponSelect))
ADDRGP4 cg+109940
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $931
line 1466
;1466:        break;
ADDRGP4 $923
JUMPV
line 1467
;1467:    }
LABELV $930
line 1468
;1468:    else if (cg.weaponSelect > 32)
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
LEI4 $936
line 1469
;1469:    {
line 1470
;1470:      if (CG_UpgradeSelectable(cg.weaponSelect - 32))
ADDRGP4 cg+109940
INDIRI4
CNSTI4 32
SUBI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_UpgradeSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $939
line 1471
;1471:        break;
ADDRGP4 $923
JUMPV
LABELV $939
line 1472
;1472:    }
LABELV $936
LABELV $931
line 1473
;1473:  }
LABELV $922
line 1457
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $921
LABELV $923
line 1475
;1474:
;1475:  if (i == 64)
ADDRLP4 0
INDIRI4
CNSTI4 64
NEI4 $942
line 1476
;1476:    cg.weaponSelect = original;
ADDRGP4 cg+109940
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $942
line 1477
;1477:}
LABELV $910
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 20 8
line 1486
;1478:
;1479:/*
;1480: ===============
;1481: CG_Weapon_f
;1482: ===============
;1483: */
;1484:void
;1485:CG_Weapon_f(void)
;1486:{
line 1489
;1487:  int num;
;1488:
;1489:  if (!cg.snap)
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $946
line 1490
;1490:    return;
ADDRGP4 $945
JUMPV
LABELV $946
line 1492
;1491:
;1492:  if (cg.snap->ps.pm_flags & PMF_FOLLOW)
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $949
line 1493
;1493:    return;
ADDRGP4 $945
JUMPV
LABELV $949
line 1495
;1494:
;1495:  num = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1497
;1496:
;1497:  if (num < 1 || num > 31)
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $954
ADDRLP4 0
INDIRI4
CNSTI4 31
LEI4 $952
LABELV $954
line 1498
;1498:    return;
ADDRGP4 $945
JUMPV
LABELV $952
line 1500
;1499:
;1500:  cg.weaponSelectTime = cg.time;
ADDRGP4 cg+115692
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1502
;1501:
;1502:  if (!BG_InventoryContainsWeapon(num, cg.snap->ps.stats))
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $957
line 1503
;1503:    return; // don't have the weapon
ADDRGP4 $945
JUMPV
LABELV $957
line 1505
;1504:
;1505:  cg.weaponSelect = num;
ADDRGP4 cg+109940
ADDRLP4 0
INDIRI4
ASGNI4
line 1506
;1506:}
LABELV $945
endproc CG_Weapon_f 20 8
export CG_FireWeapon
proc CG_FireWeapon 28 16
line 1525
;1507:
;1508:/*
;1509: ===================================================================================================
;1510:
;1511: WEAPON EVENTS
;1512:
;1513: ===================================================================================================
;1514: */
;1515:
;1516:/*
;1517: ================
;1518: CG_FireWeapon
;1519:
;1520: Caused by an EV_FIRE_WEAPON event
;1521: ================
;1522: */
;1523:void
;1524:CG_FireWeapon(centity_t *cent, weaponMode_t weaponMode)
;1525:{
line 1531
;1526:  entityState_t *es;
;1527:  int c;
;1528:  weaponInfo_t *wi;
;1529:  weapon_t weaponNum;
;1530:
;1531:  es = &cent->currentState;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
line 1533
;1532:
;1533:  weaponNum = es->weapon;
ADDRLP4 8
ADDRLP4 12
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1535
;1534:
;1535:  if (weaponNum == WP_NONE)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $962
line 1536
;1536:    return;
ADDRGP4 $961
JUMPV
LABELV $962
line 1538
;1537:
;1538:  if (weaponMode <= WPM_NONE || weaponMode >= WPM_NUM_WEAPONMODES)
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LEI4 $966
ADDRLP4 16
INDIRI4
CNSTI4 5
LTI4 $964
LABELV $966
line 1539
;1539:    weaponMode = WPM_PRIMARY;
ADDRFP4 4
CNSTI4 1
ASGNI4
LABELV $964
line 1541
;1540:
;1541:  if (weaponNum >= WP_NUM_WEAPONS)
ADDRLP4 8
INDIRI4
CNSTI4 30
LTI4 $967
line 1542
;1542:  {
line 1543
;1543:    CG_Error("CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS");
ADDRGP4 $969
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1544
;1544:    return;
ADDRGP4 $961
JUMPV
LABELV $967
line 1547
;1545:  }
;1546:
;1547:  wi = &cg_weapons[weaponNum];
ADDRLP4 4
CNSTI4 900
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1551
;1548:
;1549:  // mark the entity as muzzle flashing, so when it is added it will
;1550:  // append the flash to the weapon model
;1551:  cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1553
;1552:
;1553:  if (wi->wim[weaponMode].muzzleParticleSystem)
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $971
line 1554
;1554:  {
line 1555
;1555:    if (!CG_IsParticleSystemValid(&cent->muzzlePS) || !CG_IsParticleSystemInfinite(cent->muzzlePS))
ADDRFP4 0
INDIRP4
CNSTI4 1668
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $975
ADDRFP4 0
INDIRP4
CNSTI4 1668
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 CG_IsParticleSystemInfinite
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $973
LABELV $975
line 1556
;1556:      cent->muzzlePsTrigger = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1672
ADDP4
CNSTI4 1
ASGNI4
LABELV $973
line 1557
;1557:  }
LABELV $971
line 1560
;1558:
;1559:  // play a sound
;1560:  for(c = 0;c < 4;c++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $976
line 1561
;1561:  {
line 1562
;1562:    if (!wi->wim[weaponMode].flashSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 16
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $980
line 1563
;1563:      break;
ADDRGP4 $978
JUMPV
LABELV $980
line 1564
;1564:  }
LABELV $977
line 1560
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $976
LABELV $978
line 1566
;1565:
;1566:  if (c > 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $982
line 1567
;1567:  {
line 1568
;1568:    c = rand() % c;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1569
;1569:    if (wi->wim[weaponMode].flashSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 16
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $984
line 1570
;1570:      trap_S_StartSound(NULL, es->number, CHAN_WEAPON, wi->wim[weaponMode].flashSound[c]);
CNSTP4 0
ARGP4
ADDRLP4 12
INDIRP4
INDIRI4
ARGI4
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 16
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $984
line 1571
;1571:  }
LABELV $982
line 1572
;1572:}
LABELV $961
endproc CG_FireWeapon 28 16
export CG_MissileHitWall
proc CG_MissileHitWall 36 44
line 1583
;1573:
;1574:/*
;1575: =================
;1576: CG_MissileHitWall
;1577:
;1578: Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;1579: =================
;1580: */
;1581:void
;1582:CG_MissileHitWall(weapon_t weaponNum, weaponMode_t weaponMode, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType)
;1583:{
line 1584
;1584:  qhandle_t mark = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1585
;1585:  qhandle_t ps = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1587
;1586:  int c;
;1587:  float radius = 1.0f;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 1588
;1588:  weaponInfo_t *weapon = &cg_weapons[weaponNum];
ADDRLP4 4
CNSTI4 900
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1590
;1589:
;1590:  if (weaponMode <= WPM_NONE || weaponMode >= WPM_NUM_WEAPONMODES)
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
LEI4 $989
ADDRLP4 20
INDIRI4
CNSTI4 5
LTI4 $987
LABELV $989
line 1591
;1591:    weaponMode = WPM_PRIMARY;
ADDRFP4 4
CNSTI4 1
ASGNI4
LABELV $987
line 1593
;1592:
;1593:  mark = weapon->wim[weaponMode].impactMark;
ADDRLP4 16
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 128
ADDP4
INDIRI4
ASGNI4
line 1594
;1594:  radius = weapon->wim[weaponMode].impactMarkSize;
ADDRLP4 12
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 132
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1595
;1595:  ps = weapon->wim[weaponMode].impactParticleSystem;
ADDRLP4 8
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 124
ADDP4
INDIRI4
ASGNI4
line 1597
;1596:
;1597:  if (soundType == IMPACTSOUND_FLESH)
ADDRFP4 20
INDIRI4
CNSTI4 2
NEI4 $990
line 1598
;1598:  {
line 1600
;1599:    //flesh sound
;1600:    for(c = 0;c < 4;c++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $992
line 1601
;1601:    {
line 1602
;1602:      if (!weapon->wim[weaponMode].impactFleshSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 152
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $996
line 1603
;1603:        break;
ADDRGP4 $994
JUMPV
LABELV $996
line 1604
;1604:    }
LABELV $993
line 1600
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $992
LABELV $994
line 1606
;1605:
;1606:    if (c > 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $991
line 1607
;1607:    {
line 1608
;1608:      c = rand() % c;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1609
;1609:      if (weapon->wim[weaponMode].impactFleshSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 152
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $991
line 1610
;1610:        trap_S_StartSound(origin, ENTITYNUM_WORLD, CHAN_AUTO, weapon->wim[weaponMode].impactFleshSound[c]);
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 152
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1611
;1611:    }
line 1612
;1612:  }
ADDRGP4 $991
JUMPV
LABELV $990
line 1614
;1613:  else
;1614:  {
line 1616
;1615:    //normal sound
;1616:    for(c = 0;c < 4;c++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1002
line 1617
;1617:    {
line 1618
;1618:      if (!weapon->wim[weaponMode].impactSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 136
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1006
line 1619
;1619:        break;
ADDRGP4 $1004
JUMPV
LABELV $1006
line 1620
;1620:    }
LABELV $1003
line 1616
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1002
LABELV $1004
line 1622
;1621:
;1622:    if (c > 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1008
line 1623
;1623:    {
line 1624
;1624:      c = rand() % c;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1625
;1625:      if (weapon->wim[weaponMode].impactSound[c])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 136
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1010
line 1626
;1626:        trap_S_StartSound(origin, ENTITYNUM_WORLD, CHAN_AUTO, weapon->wim[weaponMode].impactSound[c]);
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 136
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1010
line 1627
;1627:    }
LABELV $1008
line 1628
;1628:  }
LABELV $991
line 1631
;1629:
;1630:  //create impact particle system
;1631:  if (ps)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1012
line 1632
;1632:  {
line 1633
;1633:    particleSystem_t *partSystem = CG_SpawnNewParticleSystem(ps);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 CG_SpawnNewParticleSystem
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 1634
;1634:    if (CG_IsParticleSystemValid(&partSystem))
ADDRLP4 24
ARGP4
ADDRLP4 32
ADDRGP4 CG_IsParticleSystemValid
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $1014
line 1635
;1635:    {
line 1636
;1636:      CG_SetAttachmentPoint(&partSystem->attachment, origin);
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 CG_SetAttachmentPoint
CALLV
pop
line 1637
;1637:      CG_SetParticleSystemNormal(partSystem, dir);
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 CG_SetParticleSystemNormal
CALLV
pop
line 1638
;1638:      CG_AttachToPoint(&partSystem->attachment);
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 CG_AttachToPoint
CALLV
pop
line 1639
;1639:    }
LABELV $1014
line 1640
;1640:  }
LABELV $1012
line 1645
;1641:
;1642:  //
;1643:  // impact mark
;1644:  //
;1645:  if (radius > 0.0f)
ADDRLP4 12
INDIRF4
CNSTF4 0
LEF4 $1016
line 1646
;1646:    if(weaponNum != WP_LAS_GUN)
ADDRFP4 0
INDIRI4
CNSTI4 9
EQI4 $1018
line 1647
;1647:      CG_ImpactMark(mark, origin, dir, random( ) * 360, 1, 1, 1, 1, qfalse, radius, qfalse);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
LABELV $1018
LABELV $1016
line 1648
;1648:}
LABELV $986
endproc CG_MissileHitWall 36 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 20 24
line 1657
;1649:
;1650:/*
;1651: =================
;1652: CG_MissileHitPlayer
;1653: =================
;1654: */
;1655:void
;1656:CG_MissileHitPlayer(weapon_t weaponNum, weaponMode_t weaponMode, vec3_t origin, vec3_t dir, int entityNum)
;1657:{
line 1659
;1658:  vec3_t normal;
;1659:  weaponInfo_t *weapon = &cg_weapons[weaponNum];
ADDRLP4 12
CNSTI4 900
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1661
;1660:
;1661:  VectorCopy( dir, normal );
ADDRLP4 0
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 1662
;1662:  VectorInverse(normal);
ADDRLP4 0
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 1664
;1663:
;1664:  CG_Bleed(origin, normal, entityNum);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 1666
;1665:
;1666:  if (weaponMode <= WPM_NONE || weaponMode >= WPM_NUM_WEAPONMODES)
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LEI4 $1023
ADDRLP4 16
INDIRI4
CNSTI4 5
LTI4 $1021
LABELV $1023
line 1667
;1667:    weaponMode = WPM_PRIMARY;
ADDRFP4 4
CNSTI4 1
ASGNI4
LABELV $1021
line 1669
;1668:
;1669:  if (weapon->wim[weaponMode].alwaysImpact)
CNSTI4 168
ADDRFP4 4
INDIRI4
MULI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1024
line 1670
;1670:    CG_MissileHitWall(weaponNum, weaponMode, 0, origin, dir, IMPACTSOUND_FLESH);
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
LABELV $1024
line 1671
;1671:}
LABELV $1020
endproc CG_MissileHitPlayer 20 24
export CG_Tracer
proc CG_Tracer 224 16
line 1688
;1672:
;1673:/*
;1674: ============================================================================
;1675:
;1676: BULLETS
;1677:
;1678: ============================================================================
;1679: */
;1680:
;1681:/*
;1682: ===============
;1683: CG_Tracer
;1684: ===============
;1685: */
;1686:void
;1687:CG_Tracer(vec3_t source, vec3_t dest)
;1688:{
line 1697
;1689:  vec3_t forward, right;
;1690:  polyVert_t verts[4];
;1691:  vec3_t line;
;1692:  float len, begin, end;
;1693:  vec3_t start, finish;
;1694:  vec3_t midpoint;
;1695:
;1696:  // tracer
;1697:  VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1698
;1698:  len = VectorNormalize(forward);
ADDRLP4 108
ARGP4
ADDRLP4 196
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 196
INDIRF4
ASGNF4
line 1701
;1699:
;1700:  // start at least a little ways from the muzzle
;1701:  if (len < 100)
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $1029
line 1702
;1702:    return;
ADDRGP4 $1026
JUMPV
LABELV $1029
line 1704
;1703:
;1704:  begin = 50 + random( ) * (len - 60);
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 1705
;1705:  end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 1706
;1706:  if (end > len)
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $1032
line 1707
;1707:    end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
LABELV $1032
line 1709
;1708:
;1709:  VectorMA( source, begin, forward, start );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 1710
;1710:  VectorMA( source, end, forward, finish );
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 212
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 1712
;1711:
;1712:  line[0] = DotProduct( forward, cg.refdef.viewaxis[ 1 ] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+110040+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+110040+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+110040+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1713
;1713:  line[1] = DotProduct( forward, cg.refdef.viewaxis[ 2 ] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+110040+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+110040+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+110040+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1715
;1714:
;1715:  VectorScale( cg.refdef.viewaxis[ 1 ], line[ 1 ], right );
ADDRLP4 96
ADDRGP4 cg+110040+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+110040+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+110040+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 1716
;1716:  VectorMA( right, -line[ 0 ], cg.refdef.viewaxis[ 2 ], right );
ADDRLP4 220
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+110040+36+24
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+110040+36+24+4
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+110040+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1717
;1717:  VectorNormalize(right);
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1719
;1718:
;1719:  VectorMA( finish, cg_tracerWidth.value, right, verts[ 0 ].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1720
;1720:  verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 1721
;1721:  verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 1722
;1722:  verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 1723
;1723:  verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 1724
;1724:  verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 1725
;1725:  verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 1727
;1726:
;1727:  VectorMA( finish, -cg_tracerWidth.value, right, verts[ 1 ].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1728
;1728:  verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 1729
;1729:  verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 1730
;1730:  verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 1731
;1731:  verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 1732
;1732:  verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 1733
;1733:  verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 1735
;1734:
;1735:  VectorMA( start, -cg_tracerWidth.value, right, verts[ 2 ].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1736
;1736:  verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 1737
;1737:  verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 1738
;1738:  verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 1739
;1739:  verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 1740
;1740:  verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 1741
;1741:  verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 1743
;1742:
;1743:  VectorMA( start, cg_tracerWidth.value, right, verts[ 3 ].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1744
;1744:  verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 1745
;1745:  verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 1746
;1746:  verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 1747
;1747:  verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 1748
;1748:  verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 1749
;1749:  verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 1751
;1750:
;1751:  trap_R_AddPolyToScene(cgs.media.tracerShader, 4, verts);
ADDRGP4 cgs+268684+28
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 1753
;1752:
;1753:  midpoint[0] = (start[0] + finish[0]) * 0.5;
ADDRLP4 168
CNSTF4 1056964608
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
MULF4
ASGNF4
line 1754
;1754:  midpoint[1] = (start[1] + finish[1]) * 0.5;
ADDRLP4 168+4
CNSTF4 1056964608
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
MULF4
ASGNF4
line 1755
;1755:  midpoint[2] = (start[2] + finish[2]) * 0.5;
ADDRLP4 168+8
CNSTF4 1056964608
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
MULF4
ASGNF4
line 1758
;1756:
;1757:  // add the tracer sound
;1758:  trap_S_StartSound(midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound);
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+268684+256
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1759
;1759:}
LABELV $1026
endproc CG_Tracer 224 16
proc CG_CalcMuzzlePoint 48 16
line 1768
;1760:
;1761:/*
;1762: ======================
;1763: CG_CalcMuzzlePoint
;1764: ======================
;1765: */
;1766:static qboolean
;1767:CG_CalcMuzzlePoint(int entityNum, vec3_t muzzle)
;1768:{
line 1773
;1769:  vec3_t forward;
;1770:  centity_t *cent;
;1771:  int anim;
;1772:
;1773:  if (entityNum == cg.snap->ps.clientNum)
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1214
line 1774
;1774:  {
line 1775
;1775:    VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 1776
;1776:    muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1777
;1777:    AngleVectors(cg.snap->ps.viewangles, forward, NULL, NULL);
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1778
;1778:    VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1779
;1779:    return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1213
JUMPV
LABELV $1214
line 1782
;1780:  }
;1781:
;1782:  cent = &cg_entities[entityNum];
ADDRLP4 12
CNSTI4 1724
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1784
;1783:
;1784:  if (!cent->currentValid)
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1222
line 1785
;1785:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1213
JUMPV
LABELV $1222
line 1787
;1786:
;1787:  VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1789
;1788:
;1789:  AngleVectors(cent->currentState.apos.trBase, forward, NULL, NULL);
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1790
;1790:  anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1792
;1791:
;1792:  if (anim == LEGS_WALKCR || anim == LEGS_IDLECR)
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1226
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $1224
LABELV $1226
line 1793
;1793:    muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
ADDRGP4 $1225
JUMPV
LABELV $1224
line 1795
;1794:  else
;1795:    muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
LABELV $1225
line 1797
;1796:
;1797:  VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1799
;1798:
;1799:  return qtrue;
CNSTI4 1
RETI4
LABELV $1213
endproc CG_CalcMuzzlePoint 48 16
export CG_Bullet
proc CG_Bullet 20 24
line 1812
;1800:
;1801:}
;1802:
;1803:/*
;1804: ======================
;1805: CG_Bullet
;1806:
;1807: Renders bullet effects.
;1808: ======================
;1809: */
;1810:void
;1811:CG_Bullet(vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum)
;1812:{
line 1817
;1813:  vec3_t start;
;1814:
;1815:  // if the shooter is currently valid, calc a source point and possibly
;1816:  // do trail effects
;1817:  if (sourceEntityNum >= 0 && cg_tracerChance.value > 0)
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $1230
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $1230
line 1818
;1818:  {
line 1819
;1819:    if (CG_CalcMuzzlePoint(sourceEntityNum, start))
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1233
line 1820
;1820:    {
line 1822
;1821:      // draw a tracer
;1822:      if (random( ) < cg_tracerChance.value)
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $1235
line 1823
;1823:        CG_Tracer(start, end);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
LABELV $1235
line 1824
;1824:    }
LABELV $1233
line 1825
;1825:  }
LABELV $1230
line 1828
;1826:
;1827:  // impact splash and mark
;1828:  if (flesh)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1238
line 1829
;1829:    CG_Bleed(end, normal, fleshEntityNum);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
ADDRGP4 $1239
JUMPV
LABELV $1238
line 1831
;1830:  else
;1831:    CG_MissileHitWall(WP_MACHINEGUN, WPM_PRIMARY, 0, end, normal, IMPACTSOUND_DEFAULT);
CNSTI4 3
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
LABELV $1239
line 1832
;1832:}
LABELV $1229
endproc CG_Bullet 20 24
proc CG_ShotgunPattern 156 28
line 1852
;1833:
;1834:/*
;1835: ============================================================================
;1836:
;1837: SHOTGUN TRACING
;1838:
;1839: ============================================================================
;1840: */
;1841:
;1842:/*
;1843: ================
;1844: CG_ShotgunPattern
;1845:
;1846: Perform the same traces the server did to locate the
;1847: hit splashes
;1848: ================
;1849: */
;1850:static void
;1851:CG_ShotgunPattern(vec3_t origin, vec3_t origin2, int seed, int otherEntNum)
;1852:{
line 1861
;1853:  int i;
;1854:  float r, u;
;1855:  vec3_t end;
;1856:  vec3_t forward, right, up;
;1857:  trace_t tr;
;1858:
;1859:  // derive the right and up vectors from the forward vector, because
;1860:  // the client won't have any other information
;1861:  VectorNormalize2(origin2, forward);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 80
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 1862
;1862:  PerpendicularVector(right, forward);
ADDRLP4 92
ARGP4
ADDRLP4 80
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 1863
;1863:  CrossProduct(forward, right, up);
ADDRLP4 80
ARGP4
ADDRLP4 92
ARGP4
ADDRLP4 104
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 1866
;1864:
;1865:  // generate the "random" spread pattern
;1866:  for(i = 0;i < SHOTGUN_PELLETS;i++)
ADDRLP4 116
CNSTI4 0
ASGNI4
LABELV $1241
line 1867
;1867:  {
line 1868
;1868:    r = Q_crandom(&seed) * SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 120
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
CNSTF4 1098907648
CNSTF4 1125515264
ADDRLP4 120
INDIRF4
MULF4
MULF4
ASGNF4
line 1869
;1869:    u = Q_crandom(&seed) * SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 124
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
CNSTF4 1098907648
CNSTF4 1125515264
ADDRLP4 124
INDIRF4
MULF4
MULF4
ASGNF4
line 1870
;1870:    VectorMA( origin, 8192 * 16, forward, end );
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRLP4 128
INDIRP4
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 128
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 80+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRLP4 80+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1871
;1871:    VectorMA( end, r, right, end );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 92+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 92+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1872
;1872:    VectorMA( end, u, up, end );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 104
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 104+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 104+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1874
;1873:
;1874:    CG_Trace(&tr, origin, NULL, NULL, end, otherEntNum, MASK_SHOT);
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 144
CNSTP4 0
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1876
;1875:
;1876:    if (!(tr.surfaceFlags & SURF_NOIMPACT))
ADDRLP4 20+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1261
line 1877
;1877:    {
line 1878
;1878:      if (cg_entities[tr.entityNum].currentState.eType == ET_PLAYER)
CNSTI4 1724
ADDRLP4 20+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1264
line 1879
;1879:        CG_MissileHitPlayer(WP_SHOTGUN, WPM_PRIMARY, tr.endpos, tr.plane.normal, tr.entityNum);
CNSTI4 4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 20+12
ARGP4
ADDRLP4 20+24
ARGP4
ADDRLP4 20+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
ADDRGP4 $1265
JUMPV
LABELV $1264
line 1880
;1880:      else if (tr.surfaceFlags & SURF_METALSTEPS)
ADDRLP4 20+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1271
line 1881
;1881:        CG_MissileHitWall(WP_SHOTGUN, WPM_PRIMARY, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL);
CNSTI4 4
ARGI4
ADDRLP4 148
CNSTI4 1
ASGNI4
ADDRLP4 148
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20+12
ARGP4
ADDRLP4 20+24
ARGP4
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
ADDRGP4 $1272
JUMPV
LABELV $1271
line 1883
;1882:      else
;1883:        CG_MissileHitWall(WP_SHOTGUN, WPM_PRIMARY, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT);
CNSTI4 4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 152
CNSTI4 0
ASGNI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRLP4 20+12
ARGP4
ADDRLP4 20+24
ARGP4
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
LABELV $1272
LABELV $1265
line 1884
;1884:    }
LABELV $1261
line 1885
;1885:  }
LABELV $1242
line 1866
ADDRLP4 116
ADDRLP4 116
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 8
LTI4 $1241
line 1886
;1886:}
LABELV $1240
endproc CG_ShotgunPattern 156 28
export CG_ShotgunFire
proc CG_ShotgunFire 32 16
line 1895
;1887:
;1888:/*
;1889: ==============
;1890: CG_ShotgunFire
;1891: ==============
;1892: */
;1893:void
;1894:CG_ShotgunFire(entityState_t *es)
;1895:{
line 1898
;1896:  vec3_t v;
;1897:
;1898:  VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1899
;1899:  VectorNormalize(v);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1900
;1900:  VectorScale( v, 32, v );
ADDRLP4 20
CNSTF4 1107296256
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 20
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1107296256
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 1901
;1901:  VectorAdd( es->pos.trBase, v, v );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 1903
;1902:
;1903:  CG_ShotgunPattern(es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 1904
;1904:}
LABELV $1278
endproc CG_ShotgunFire 32 16
import trap_GetDemoName
import trap_GetDemoPos
import trap_GetDemoState
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBiSphereTrace
import trap_CM_BiSphereTrace
import trap_CM_TransformedCapsuleTrace
import trap_CM_CapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_LiteralArgs
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_TutorialText
import CG_WritePTRCode
import CG_ReadPTRCode
import CG_DestroyTestTS_f
import CG_TestTS_f
import CG_AddTrails
import CG_IsTrailSystemValid
import CG_DestroyTrailSystem
import CG_SpawnNewTrailSystem
import CG_RegisterTrailSystem
import CG_LoadTrailSystems
import CG_DestroyTestPS_f
import CG_TestPS_f
import CG_ParticleSystemEntity
import CG_AddParticles
import CG_SetParticleSystemNormal
import CG_IsParticleSystemValid
import CG_IsParticleSystemInfinite
import CG_DestroyParticleSystem
import CG_SpawnNewParticleSystem
import CG_RegisterParticleSystem
import CG_LoadParticleSystems
import CG_SetAttachmentOffset
import CG_SetAttachmentParticle
import CG_SetAttachmentTag
import CG_SetAttachmentCent
import CG_SetAttachmentPoint
import CG_AttachToParticle
import CG_AttachToTag
import CG_AttachToCent
import CG_AttachToPoint
import CG_Attached
import CG_AttachmentCentNum
import CG_AttachmentVelocity
import CG_AttachmentAxis
import CG_AttachmentDir
import CG_AttachmentPoint
import CG_DefragmentMemory
import CG_Free
import CG_Alloc
import CG_InitMemory
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_RequestScores
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ProcessSnapshots
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_AlienSense
import CG_Scanner
import CG_UpdateEntityPositions
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_DrawBoundingBox
import CG_PainEvent
import CG_EntityEvent
import CG_CheckEvents
import CG_PredictPlayerState
import CG_BiSphereTrace
import CG_CapTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_ModelDoor
import CG_AnimMapObj
import CG_RunLerpFrame
import CG_AlienBuildableExplosion
import CG_HumanBuildableExplosion
import CG_InitBuildables
import CG_Buildable
import CG_GhostBuildable
import CG_AtHighestClass
import CG_Bleed
import CG_PlayerOnFire
import CG_PlayerDisconnect
import CG_CustomSound
import CG_PrecacheClientInfo
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Corpse
import CG_Player
import CG_ResetPainBlend
import CG_UpdateMediaFraction
import CG_DrawLoadingScreen
import CG_Text_PaintChar
import CG_GetKillerText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_RunMenuScript
import CG_GetValue
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawActive
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawFadePic
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawPlane
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_addSmoothOp
import CG_AddNotifyText
import CG_RemoveNotifyLine
import CG_FileExists
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PlayerCount
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_debugRandom
import ui_humanTeamVoteActive
import ui_alienTeamVoteActive
import ui_voteActive
import ui_loading
import ui_dialog
import ui_stages
import ui_carriage
import ui_currentClass
import cg_painBlendZoom
import cg_painBlendScale
import cg_painBlendMax
import cg_painBlendDownRate
import cg_painBlendUpRate
import cg_tutorial
import cg_disableScannerPlane
import cg_disableWarningDialogs
import cg_debugPVS
import cg_debugTrails
import cg_debugParticles
import cg_lightFlare
import cg_consoleLatency
import cg_depthSortParticles
import cg_wwToggle
import cg_wwFollow
import cg_wwSmoothTime
import cg_debugAlloc
import cg_drawBBOX
import cg_drawSurfNormal
import cg_creepRes
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPersonhax
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRangehax
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_debugMove
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_teslaTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawDemoState
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_buildables
import cg_upgrades
import cg_weapons
import cg_entities
import cg
import cgs
import g_nameBind2
import g_nameBind1
import BindingFromName
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Item_Text_AutoWrapped_Paint
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Display_ExpandMacros
import Init_Display
import String_Report
import String_Init
import String_Alloc
import BG_ClientListParse
import BG_ClientListString
import BG_ClientListRemove
import BG_ClientListAdd
import BG_ClientListTest
import BG_UpgradeClassAvailable
import BG_BuildableIsAllowed
import BG_ClassIsAllowed
import BG_UpgradeIsAllowed
import BG_WeaponIsAllowed
import BG_InitAllowedGameElements
import BG_ParseCSVBuildableList
import BG_ParseCSVClassList
import BG_ParseCSVEquipmentList
import atoi_neg
import atof_neg
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_FindTeamForUpgrade
import BG_FindUsableForUpgrade
import BG_FindPurchasableForUpgrade
import BG_FindIconForUpgrade
import BG_FindHumanNameForUpgrade
import BG_FindUpgradeNumForName
import BG_FindNameForUpgrade
import BG_FindSlotsForUpgrade
import BG_FindStagesForUpgrade
import BG_FindPriceForUpgrade
import BG_FindTeamForWeapon
import BG_FindBuildDelayForWeapon
import BG_FindLongRangedForWeapon
import BG_FindPurchasableForWeapon
import BG_FindZoomFovForWeapon
import BG_WeaponCanZoom
import BG_WeaponHasThirdMode
import BG_WeaponHasAltMode
import BG_FindKnockbackScaleForWeapon
import BG_FindReloadTimeForWeapon
import BG_FindRepeatRate3ForWeapon
import BG_FindRepeatRate2ForWeapon
import BG_FindRepeatRate1ForWeapon
import BG_FindUsesEnergyForWeapon
import BG_FindInfinteAmmoForWeapon
import BG_FindAmmoForWeapon
import BG_FindCrosshairSizeForWeapon
import BG_FindCrosshairForWeapon
import BG_FindIconForWeapon
import BG_FindModelsForWeapon
import BG_FindHumanNameForWeapon
import BG_FindWeaponNumForName
import BG_FindNameForWeapon
import BG_FindSlotsForWeapon
import BG_FindStagesForWeapon
import BG_FindPriceForWeapon
import BG_InitClassOverrides
import BG_FindValueOfClass
import BG_FindCostOfClass
import BG_ClassCanEvolveFromTo
import BG_FindBuildDistForClass
import BG_FindStartWeaponForClass
import BG_ClassHasAbility
import BG_FindSteptimeForClass
import BG_FindKnockbackScaleForClass
import BG_FindJumpMagnitudeForClass
import BG_FindStopSpeedForClass
import BG_FindFrictionForClass
import BG_FindAirAccelerationForClass
import BG_FindAccelerationForClass
import BG_FindSpeedForClass
import BG_FindBobCycleForClass
import BG_FindBobForClass
import BG_FindFovForClass
import BG_FindRegenRateForClass
import BG_FindFallDamageForClass
import BG_FindHealthForClass
import BG_FindViewheightForClass
import BG_FindZOffsetForClass
import BG_FindBBoxForClass
import BG_FindSpriteHeightForClass
import BG_FindStagesForClass
import BG_FindHudNameForClass
import BG_FindShadowScaleForClass
import BG_FindSkinNameForClass
import BG_FindModelScaleForClass
import BG_FindModelNameForClass
import BG_FindHumanNameForClassNum
import BG_FindNameForClassNum
import BG_FindClassNumForName
import BG_InitBuildableOverrides
import BG_FindTransparentTestForBuildable
import BG_FindReplaceableTestForBuildable
import BG_FindUniqueTestForBuildable
import BG_FindDCCTestForBuildable
import BG_FindCreepSizeForBuildable
import BG_FindCreepTestForBuildable
import BG_FindInvertNormalForBuildable
import BG_FindMinNormalForBuildable
import BG_FindProjTypeForBuildable
import BG_FindFireSpeedForBuildable
import BG_FindRangeForBuildable
import BG_FindUsableForBuildable
import BG_FindBuildTimeForBuildable
import BG_FindNextThinkForBuildable
import BG_FindAnimForBuildable
import BG_FindBuildWeaponForBuildable
import BG_FindTeamForBuildable
import BG_FindMODForBuildable
import BG_FindSplashRadiusForBuildable
import BG_FindSplashDamageForBuildable
import BG_FindStagesForBuildable
import BG_FindBuildPointsForBuildable
import BG_FindBounceForBuildable
import BG_FindTrajectoryForBuildable
import BG_FindRegenRateForBuildable
import BG_FindHealthForBuildable
import BG_FindZOffsetForBuildable
import BG_FindBBoxForBuildable
import BG_FindModelScaleForBuildable
import BG_FindModelsForBuildable
import BG_FindEntityNameForBuildable
import BG_FindHumanNameForBuildable
import BG_FindNameForBuildable
import BG_FindBuildNumForEntityName
import BG_FindBuildNumForName
import BG_GetValueOfEquipment
import BG_GetValueOfHuman
import BG_PositionBuildableRelativeToPlayer
import BG_RotateAxis
import BG_UpgradeIsActive
import BG_DeactivateUpgrade
import BG_ActivateUpgrade
import BG_InventoryContainsUpgrade
import BG_RemoveUpgradeFromInventory
import BG_AddUpgradeToInventory
import BG_InventoryContainsWeapon
import BG_RemoveWeaponFromInventory
import BG_AddWeaponToInventory
import BG_WeaponIsFull
import BG_PackAmmoArray
import BG_UnpackAmmoArray
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isintegral
import Q_isanumber
import Q_isdigit
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Com_HexStrToInt
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import DistanceBetweenLineSegments
import DistanceBetweenLineSegmentsSquared
import VectorMaxComponent
import VectorMinComponent
import pointToLineDistance
import VectorDistance
import ProjectPointOntoVector
import GetPerpendicularViewVector
import Q_isnan
import PerpendicularVector
import AngleVectors
import VectorMatrixMultiply
import MatrixMultiply
import MakeNormalVectors
import RotateAroundAxe
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AxisToAngles
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import rint
import pow
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $969
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $917
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $882
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 112
byte 1 114
byte 1 101
byte 1 118
byte 1 10
byte 1 0
align 1
LABELV $578
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $566
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $556
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $390
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 101
byte 1 118
byte 1 50
byte 1 122
byte 1 97
byte 1 112
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $374
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $371
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $370
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $362
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 10
byte 1 0
align 1
LABELV $361
byte 1 100
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 73
byte 1 110
byte 1 51
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $358
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 99
byte 1 114
byte 1 111
byte 1 115
byte 1 115
byte 1 104
byte 1 97
byte 1 105
byte 1 114
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $349
byte 1 99
byte 1 114
byte 1 111
byte 1 115
byte 1 115
byte 1 104
byte 1 97
byte 1 105
byte 1 114
byte 1 0
align 1
LABELV $346
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $341
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $336
byte 1 105
byte 1 100
byte 1 108
byte 1 101
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $333
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $330
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $329
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $328
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $327
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $322
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $319
byte 1 116
byte 1 101
byte 1 114
byte 1 116
byte 1 105
byte 1 97
byte 1 114
byte 1 121
byte 1 0
align 1
LABELV $316
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 97
byte 1 114
byte 1 121
byte 1 0
align 1
LABELV $313
byte 1 112
byte 1 114
byte 1 105
byte 1 109
byte 1 97
byte 1 114
byte 1 121
byte 1 0
align 1
LABELV $310
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 0
align 1
LABELV $307
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 100
byte 1 101
byte 1 99
byte 1 108
byte 1 97
byte 1 114
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 0
align 1
LABELV $304
byte 1 123
byte 1 0
align 1
LABELV $294
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $288
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 0
align 1
LABELV $287
byte 1 125
byte 1 0
align 1
LABELV $276
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $271
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $266
byte 1 102
byte 1 105
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $259
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 68
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $250
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 68
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 67
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $247
byte 1 99
byte 1 111
byte 1 110
byte 1 116
byte 1 105
byte 1 110
byte 1 117
byte 1 111
byte 1 117
byte 1 115
byte 1 70
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $238
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 68
byte 1 76
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 67
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $235
byte 1 97
byte 1 108
byte 1 119
byte 1 97
byte 1 121
byte 1 115
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 0
align 1
LABELV $224
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 70
byte 1 108
byte 1 101
byte 1 115
byte 1 104
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $213
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 83
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $210
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 32
byte 1 109
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $201
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 0
align 1
LABELV $198
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $193
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 0
align 1
LABELV $190
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $185
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 0
align 1
LABELV $182
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $177
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 83
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 0
align 1
LABELV $174
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 115
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $169
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 0
align 1
LABELV $158
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 65
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $155
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 82
byte 1 111
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $152
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 115
byte 1 112
byte 1 114
byte 1 105
byte 1 116
byte 1 101
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $143
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 83
byte 1 112
byte 1 114
byte 1 105
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $140
byte 1 94
byte 1 49
byte 1 69
byte 1 82
byte 1 82
byte 1 79
byte 1 82
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $135
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $132
byte 1 0
align 1
LABELV $106
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 117
byte 1 112
byte 1 103
byte 1 114
byte 1 97
byte 1 100
byte 1 101
byte 1 32
byte 1 37
byte 1 105
byte 1 0
