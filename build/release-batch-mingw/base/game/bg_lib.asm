code
proc swapfunc 24 0
file "..\..\..\..\src/game/bg_lib.c"
line 103
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:Copyright (C) 2000-2006 Tim Angus
;5:
;6:This file is part of Tremulous.
;7:
;8:Tremulous is free software; you can redistribute it
;9:and/or modify it under the terms of the GNU General Public License as
;10:published by the Free Software Foundation; either version 2 of the License,
;11:or (at your option) any later version.
;12:
;13:Tremulous is distributed in the hope that it will be
;14:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;15:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;16:GNU General Public License for more details.
;17:
;18:You should have received a copy of the GNU General Public License
;19:along with Tremulous; if not, write to the Free Software
;20:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;21:===========================================================================
;22:*/
;23:
;24:// bg_lib.c -- standard C library replacement routines used by code
;25:// compiled for the virtual machine
;26:
;27:
;28:#ifdef Q3_VM
;29:
;30:#include "../qcommon/q_shared.h"
;31:
;32:/*-
;33: * Copyright (c) 1992, 1993
;34: *  The Regents of the University of California.  All rights reserved.
;35: *
;36: * Redistribution and use in source and binary forms, with or without
;37: * modification, are permitted provided that the following conditions
;38: * are met:
;39: * 1. Redistributions of source code must retain the above copyright
;40: *    notice, this list of conditions and the following disclaimer.
;41: * 2. Redistributions in binary form must reproduce the above copyright
;42: *    notice, this list of conditions and the following disclaimer in the
;43: *    documentation and/or other materials provided with the distribution.
;44: * 3. All advertising materials mentioning features or use of this software
;45: *    must display the following acknowledgement:
;46: *  This product includes software developed by the University of
;47: *  California, Berkeley and its contributors.
;48: * 4. Neither the name of the University nor the names of its contributors
;49: *    may be used to endorse or promote products derived from this software
;50: *    without specific prior written permission.
;51: *
;52: * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
;53: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;54: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;55: * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
;56: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;57: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;58: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;59: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;60: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;61: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;62: * SUCH DAMAGE.
;63: */
;64:
;65:#include "bg_lib.h"
;66:
;67:#if defined(LIBC_SCCS) && !defined(lint)
;68:#if 0
;69:static char sccsid[] = "@(#)qsort.c 8.1 (Berkeley) 6/4/93";
;70:#endif
;71:static const char rcsid[] =
;72:  "$Id: bg_lib.c 1099 2008-07-10 21:04:16Z tma $";
;73:#endif /* LIBC_SCCS and not lint */
;74:
;75:static char* med3(char *, char *, char *, cmp_t *);
;76:static void  swapfunc(char *, char *, int, int);
;77:
;78:#ifndef min
;79:#define min(a, b) (a) < (b) ? a : b
;80:#endif
;81:
;82:/*
;83: * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
;84: */
;85:#define swapcode(TYPE, parmi, parmj, n) {     \
;86:  long i = (n) / sizeof (TYPE);       \
;87:  register TYPE *pi = (TYPE *) (parmi);     \
;88:  register TYPE *pj = (TYPE *) (parmj);     \
;89:  do {            \
;90:    register TYPE t = *pi;    \
;91:    *pi++ = *pj;        \
;92:    *pj++ = t;        \
;93:        } while (--i > 0);        \
;94:}
;95:
;96:#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
;97:  es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;
;98:
;99:static void
;100:swapfunc(a, b, n, swaptype)
;101:  char *a, *b;
;102:  int n, swaptype;
;103:{
line 104
;104:  if(swaptype <= 1)
ADDRFP4 12
INDIRI4
CNSTI4 1
GTI4 $25
line 105
;105:    swapcode(long, a, b, n)
ADDRLP4 8
ADDRFP4 8
INDIRI4
CVIU4 4
CNSTI4 2
RSHU4
CVUI4 4
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
LABELV $27
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
LABELV $28
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $27
ADDRGP4 $26
JUMPV
LABELV $25
line 107
;106:  else
;107:    swapcode(char, a, b, n)
ADDRLP4 8
ADDRFP4 8
INDIRI4
CVIU4 4
CVUI4 4
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
LABELV $30
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 16
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 20
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 12
INDIRI1
ASGNI1
LABELV $31
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $30
LABELV $26
line 108
;108:}
LABELV $24
endproc swapfunc 24 0
proc med3 40 8
line 124
;109:
;110:#define swap(a, b)          \
;111:  if (swaptype == 0) {        \
;112:    long t = *(long *)(a);      \
;113:    *(long *)(a) = *(long *)(b);    \
;114:    *(long *)(b) = t;     \
;115:  } else            \
;116:    swapfunc(a, b, es, swaptype)
;117:
;118:#define vecswap(a, b, n)  if ((n) > 0) swapfunc(a, b, n, swaptype)
;119:
;120:static char *
;121:med3(a, b, c, cmp)
;122:  char *a, *b, *c;
;123:  cmp_t *cmp;
;124:{
line 125
;125:  return cmp(a, b) < 0 ?
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
GEI4 $39
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 24
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $41
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $42
JUMPV
LABELV $41
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 28
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
GEI4 $43
ADDRLP4 8
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 $44
JUMPV
LABELV $43
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
LABELV $44
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
LABELV $42
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
ADDRGP4 $40
JUMPV
LABELV $39
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 32
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
LEI4 $45
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $46
JUMPV
LABELV $45
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 36
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $47
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $48
JUMPV
LABELV $47
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
LABELV $48
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $46
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
LABELV $40
ADDRLP4 0
INDIRP4
RETP4
LABELV $33
endproc med3 40 8
export qsort
proc qsort 104 16
line 135
;126:         (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a ))
;127:              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));
;128:}
;129:
;130:void
;131:qsort(a, n, es, cmp)
;132:  void *a;
;133:  size_t n, es;
;134:  cmp_t *cmp;
;135:{
LABELV $50
line 139
;136:  char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
;137:  int d, r, swaptype, swap_cnt;
;138:
;139:loop: SWAPINIT(a, es);
ADDRLP4 52
CNSTU4 3
ASGNU4
ADDRLP4 56
CNSTU4 0
ASGNU4
ADDRFP4 0
INDIRP4
CVPU4 4
CVUI4 4
CVIU4 4
ADDRLP4 52
INDIRU4
BANDU4
ADDRLP4 56
INDIRU4
NEU4 $55
ADDRFP4 8
INDIRI4
CVIU4 4
ADDRLP4 52
INDIRU4
BANDU4
ADDRLP4 56
INDIRU4
EQU4 $53
LABELV $55
ADDRLP4 44
CNSTI4 2
ASGNI4
ADDRGP4 $54
JUMPV
LABELV $53
ADDRFP4 8
INDIRI4
CVIU4 4
CNSTU4 4
NEU4 $56
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRGP4 $57
JUMPV
LABELV $56
ADDRLP4 48
CNSTI4 1
ASGNI4
LABELV $57
ADDRLP4 44
ADDRLP4 48
INDIRI4
ASGNI4
LABELV $54
ADDRLP4 16
ADDRLP4 44
INDIRI4
ASGNI4
line 140
;140:  swap_cnt = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 141
;141:  if (n < 7) {
ADDRFP4 4
INDIRI4
CNSTI4 7
GEI4 $58
line 142
;142:    for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es)
ADDRLP4 32
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRGP4 $63
JUMPV
LABELV $60
line 143
;143:      for (pl = pm; pl > (char *)a && cmp(pl - es, pl) > 0;
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
ADDRGP4 $67
JUMPV
LABELV $64
line 145
;144:           pl -= es)
;145:        swap(pl, pl - es);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $68
ADDRLP4 60
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ADDRLP4 60
INDIRI4
ASGNI4
ADDRGP4 $69
JUMPV
LABELV $68
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 64
INDIRI4
SUBP4
ARGP4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $69
LABELV $65
line 144
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ASGNP4
LABELV $67
line 143
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
LEU4 $70
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
GTI4 $64
LABELV $70
LABELV $61
line 142
ADDRLP4 32
ADDRFP4 8
INDIRI4
ADDRLP4 32
INDIRP4
ADDP4
ASGNP4
LABELV $63
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
CVPU4 4
LTU4 $60
line 146
;146:    return;
ADDRGP4 $49
JUMPV
LABELV $58
line 148
;147:  }
;148:  pm = (char *)a + (n / 2) * es;
ADDRLP4 32
ADDRFP4 4
INDIRI4
CNSTI4 2
DIVI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 149
;149:  if (n > 7) {
ADDRFP4 4
INDIRI4
CNSTI4 7
LEI4 $71
line 150
;150:    pl = a;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 151
;151:    pn = (char *)a + (n - 1) * es;
ADDRLP4 36
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 152
;152:    if (n > 40) {
ADDRFP4 4
INDIRI4
CNSTI4 40
LEI4 $73
line 153
;153:      d = (n / 8) * es;
ADDRLP4 40
ADDRFP4 4
INDIRI4
CNSTI4 8
DIVI4
ADDRFP4 8
INDIRI4
MULI4
ASGNI4
line 154
;154:      pl = med3(pl, pl + d, pl + 2 * d, cmp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ARGP4
ADDRLP4 64
INDIRI4
CNSTI4 1
LSHI4
ADDRLP4 0
INDIRP4
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 155
;155:      pm = med3(pm - d, pm, pm + d, cmp);
ADDRLP4 76
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 32
INDIRP4
ADDRLP4 76
INDIRI4
SUBP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 76
INDIRI4
ADDRLP4 32
INDIRP4
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 80
INDIRP4
ASGNP4
line 156
;156:      pn = med3(pn - 2 * d, pn - d, pn, cmp);
ADDRLP4 88
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
ADDRLP4 88
INDIRI4
CNSTI4 1
LSHI4
SUBP4
ARGP4
ADDRLP4 36
INDIRP4
ADDRLP4 88
INDIRI4
SUBP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 92
INDIRP4
ASGNP4
line 157
;157:    }
LABELV $73
line 158
;158:    pm = med3(pl, pm, pn, cmp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 60
INDIRP4
ASGNP4
line 159
;159:  }
LABELV $71
line 160
;160:  swap(a, pm);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $75
ADDRLP4 60
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRP4
ADDRLP4 60
INDIRI4
ASGNI4
ADDRGP4 $76
JUMPV
LABELV $75
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $76
line 161
;161:  pa = pb = (char *)a + es;
ADDRLP4 60
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 60
INDIRP4
ASGNP4
line 163
;162:
;163:  pc = pd = (char *)a + (n - 1) * es;
ADDRLP4 64
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 24
ADDRLP4 64
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 64
INDIRP4
ASGNP4
line 164
;164:  for (;;) {
ADDRGP4 $82
JUMPV
LABELV $81
line 165
;165:    while (pb <= pc && (r = cmp(pb, a)) <= 0) {
line 166
;166:      if (r == 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $84
line 167
;167:        swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 168
;168:        swap(pa, pb);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $86
ADDRLP4 68
ADDRLP4 20
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 68
INDIRI4
ASGNI4
ADDRGP4 $87
JUMPV
LABELV $86
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $87
line 169
;169:        pa += es;
ADDRLP4 20
ADDRFP4 8
INDIRI4
ADDRLP4 20
INDIRP4
ADDP4
ASGNP4
line 170
;170:      }
LABELV $84
line 171
;171:      pb += es;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
line 172
;172:    }
LABELV $82
line 165
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
GTU4 $88
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 72
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
LEI4 $81
LABELV $88
ADDRGP4 $90
JUMPV
LABELV $89
line 173
;173:    while (pb <= pc && (r = cmp(pc, a)) >= 0) {
line 174
;174:      if (r == 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $92
line 175
;175:        swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 176
;176:        swap(pc, pd);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $94
ADDRLP4 76
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 76
INDIRI4
ASGNI4
ADDRGP4 $95
JUMPV
LABELV $94
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $95
line 177
;177:        pd -= es;
ADDRLP4 24
ADDRLP4 24
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ASGNP4
line 178
;178:      }
LABELV $92
line 179
;179:      pc -= es;
ADDRLP4 8
ADDRLP4 8
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ASGNP4
line 180
;180:    }
LABELV $90
line 173
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
GTU4 $96
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
GEI4 $89
LABELV $96
line 181
;181:    if (pb > pc)
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
LEU4 $97
line 182
;182:      break;
ADDRGP4 $79
JUMPV
LABELV $97
line 183
;183:    swap(pb, pc);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $99
ADDRLP4 84
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 84
INDIRI4
ASGNI4
ADDRGP4 $100
JUMPV
LABELV $99
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $100
line 184
;184:    swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 185
;185:    pb += es;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
line 186
;186:    pc -= es;
ADDRLP4 8
ADDRLP4 8
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ASGNP4
line 187
;187:  }
line 164
ADDRGP4 $82
JUMPV
LABELV $79
line 188
;188:  if (swap_cnt == 0) {  /* Switch to insertion sort */
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $101
line 189
;189:    for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es)
ADDRLP4 32
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRGP4 $106
JUMPV
LABELV $103
line 190
;190:      for (pl = pm; pl > (char *)a && cmp(pl - es, pl) > 0;
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
ADDRGP4 $110
JUMPV
LABELV $107
line 192
;191:           pl -= es)
;192:        swap(pl, pl - es);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $111
ADDRLP4 68
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ADDRLP4 68
INDIRI4
ASGNI4
ADDRGP4 $112
JUMPV
LABELV $111
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 72
INDIRI4
SUBP4
ARGP4
ADDRLP4 72
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $112
LABELV $108
line 191
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ASGNP4
LABELV $110
line 190
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
LEU4 $113
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRI4
SUBP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
GTI4 $107
LABELV $113
LABELV $104
line 189
ADDRLP4 32
ADDRFP4 8
INDIRI4
ADDRLP4 32
INDIRP4
ADDP4
ASGNP4
LABELV $106
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
CVPU4 4
LTU4 $103
line 193
;193:    return;
ADDRGP4 $49
JUMPV
LABELV $101
line 196
;194:  }
;195:
;196:  pn = (char *)a + n * es;
ADDRLP4 36
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 197
;197:  r = min(pa - (char *)a, pb - pa);
ADDRLP4 72
ADDRLP4 20
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 72
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 72
INDIRU4
SUBU4
CVUI4 4
GEI4 $115
ADDRLP4 68
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRGP4 $116
JUMPV
LABELV $115
ADDRLP4 68
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 20
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
LABELV $116
ADDRLP4 12
ADDRLP4 68
INDIRI4
ASGNI4
line 198
;198:  vecswap(a, pb - r, r);
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $117
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $117
line 199
;199:  r = min(pd - pc, pn - pd - es);
ADDRLP4 84
ADDRLP4 24
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 84
INDIRU4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 84
INDIRU4
SUBU4
CVUI4 4
ADDRFP4 8
INDIRI4
SUBI4
GEI4 $120
ADDRLP4 80
ADDRLP4 24
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRGP4 $121
JUMPV
LABELV $120
ADDRLP4 80
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 24
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRFP4 8
INDIRI4
SUBI4
ASGNI4
LABELV $121
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 200
;200:  vecswap(pb, pn - r, r);
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $122
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $122
line 201
;201:  if ((r = pb - pa) > es)
ADDRLP4 92
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 20
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRLP4 12
ADDRLP4 92
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $124
line 202
;202:    qsort(a, r / es, es, cmp);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 96
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 96
INDIRI4
DIVI4
ARGI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 qsort
CALLV
pop
LABELV $124
line 203
;203:  if ((r = pd - pc) > es) {
ADDRLP4 100
ADDRLP4 24
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRLP4 12
ADDRLP4 100
INDIRI4
ASGNI4
ADDRLP4 100
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $126
line 205
;204:    /* Iterate rather than recurse to save stack space */
;205:    a = pn - r;
ADDRFP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ASGNP4
line 206
;206:    n = r / es;
ADDRFP4 4
ADDRLP4 12
INDIRI4
ADDRFP4 8
INDIRI4
DIVI4
ASGNI4
line 207
;207:    goto loop;
ADDRGP4 $50
JUMPV
LABELV $126
line 210
;208:  }
;209:/*    qsort(pn - r, r / es, es, cmp);*/
;210:}
LABELV $49
endproc qsort 104 16
export strlen
proc strlen 4 0
line 216
;211:
;212://==================================================================================
;213:
;214:
;215:size_t strlen( const char *string )
;216:{
line 219
;217:  const char  *s;
;218:
;219:  s = string;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $130
JUMPV
LABELV $129
line 221
;220:  while( *s )
;221:    s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $130
line 220
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $129
line 223
;222:
;223:  return s - string;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
RETI4
LABELV $128
endproc strlen 4 0
export strcat
proc strcat 16 0
line 228
;224:}
;225:
;226:
;227:char *strcat( char *strDestination, const char *strSource )
;228:{
line 231
;229:  char  *s;
;230:
;231:  s = strDestination;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $134
JUMPV
LABELV $133
line 233
;232:  while( *s )
;233:    s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $134
line 232
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $133
ADDRGP4 $137
JUMPV
LABELV $136
line 236
;234:
;235:  while( *strSource )
;236:    *s++ = *strSource++;
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI1
ASGNI1
LABELV $137
line 235
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $136
line 238
;237:
;238:  *s = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 239
;239:  return strDestination;
ADDRFP4 0
INDIRP4
RETP4
LABELV $132
endproc strcat 16 0
export strcpy
proc strcpy 16 0
line 243
;240:}
;241:
;242:char *strcpy( char *strDestination, const char *strSource )
;243:{
line 246
;244:  char *s;
;245:
;246:  s = strDestination;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $141
JUMPV
LABELV $140
line 249
;247:
;248:  while( *strSource )
;249:    *s++ = *strSource++;
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI1
ASGNI1
LABELV $141
line 248
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $140
line 251
;250:
;251:  *s = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 252
;252:  return strDestination;
ADDRFP4 0
INDIRP4
RETP4
LABELV $139
endproc strcpy 16 0
export strcmp
proc strcmp 12 0
line 257
;253:}
;254:
;255:
;256:int strcmp( const char *string1, const char *string2 )
;257:{
ADDRGP4 $145
JUMPV
LABELV $144
line 259
;258:  while( *string1 == *string2 && *string1 && *string2 )
;259:  {
line 260
;260:    string1++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 261
;261:    string2++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 262
;262:  }
LABELV $145
line 258
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $148
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $148
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $144
LABELV $148
line 264
;263:
;264:  return *string1 - *string2;
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
SUBI4
RETI4
LABELV $143
endproc strcmp 12 0
export strrchr
proc strrchr 16 4
line 268
;265:}
;266:
;267:char *strrchr( const char *string, int c )
;268:{
line 269
;269:  int   i, length = strlen( string );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
line 272
;270:  char  *p;
;271:
;272:  for( i = length - 1; i >= 0; i-- )
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $153
JUMPV
LABELV $150
line 273
;273:  {
line 274
;274:    p = (char *)&string[ i ];
ADDRLP4 4
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 276
;275:
;276:    if( *p == c )
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRI4
NEI4 $154
line 277
;277:      return (char *)p;
ADDRLP4 4
INDIRP4
RETP4
ADDRGP4 $149
JUMPV
LABELV $154
line 278
;278:  }
LABELV $151
line 272
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $153
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $150
line 280
;279:
;280:  return (char *)0;
CNSTP4 0
RETP4
LABELV $149
endproc strrchr 16 4
export strchr
proc strchr 0 0
line 284
;281:}
;282:
;283:char *strchr( const char *string, int c )
;284:{
ADDRGP4 $158
JUMPV
LABELV $157
line 286
;285:  while( *string )
;286:  {
line 287
;287:    if( *string == c )
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRI4
NEI4 $160
line 288
;288:      return ( char * )string;
ADDRFP4 0
INDIRP4
RETP4
ADDRGP4 $156
JUMPV
LABELV $160
line 290
;289:
;290:    string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 291
;291:  }
LABELV $158
line 285
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $157
line 292
;292:  return (char *)0;
CNSTP4 0
RETP4
LABELV $156
endproc strchr 0 0
export strstr
proc strstr 8 0
line 296
;293:}
;294:
;295:char *strstr( const char *string, const char *strCharSet )
;296:{
ADDRGP4 $164
JUMPV
LABELV $163
line 298
;297:  while( *string )
;298:  {
line 301
;299:    int   i;
;300:
;301:    for( i = 0; strCharSet[ i ]; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $169
JUMPV
LABELV $166
line 302
;302:    {
line 303
;303:      if( string[ i ] != strCharSet[ i ] )
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
EQI4 $170
line 304
;304:        break;
ADDRGP4 $168
JUMPV
LABELV $170
line 305
;305:    }
LABELV $167
line 301
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $169
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $166
LABELV $168
line 307
;306:
;307:    if( !strCharSet[ i ] )
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $172
line 308
;308:      return (char *)string;
ADDRFP4 0
INDIRP4
RETP4
ADDRGP4 $162
JUMPV
LABELV $172
line 310
;309:
;310:    string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 311
;311:  }
LABELV $164
line 297
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $163
line 312
;312:  return (char *)0;
CNSTP4 0
RETP4
LABELV $162
endproc strstr 8 0
export tolower
proc tolower 4 0
line 316
;313:}
;314:
;315:int tolower( int c )
;316:{
line 317
;317:  if( c >= 'A' && c <= 'Z' )
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 65
LTI4 $175
ADDRLP4 0
INDIRI4
CNSTI4 90
GTI4 $175
line 318
;318:    c += 'a' - 'A';
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 32
ADDI4
ASGNI4
LABELV $175
line 320
;319:
;320:  return c;
ADDRFP4 0
INDIRI4
RETI4
LABELV $174
endproc tolower 4 0
export toupper
proc toupper 4 0
line 325
;321:}
;322:
;323:
;324:int toupper( int c )
;325:{
line 326
;326:  if( c >= 'a' && c <= 'z' )
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 97
LTI4 $178
ADDRLP4 0
INDIRI4
CNSTI4 122
GTI4 $178
line 327
;327:    c += 'A' - 'a';
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 -32
ADDI4
ASGNI4
LABELV $178
line 329
;328:
;329:  return c;
ADDRFP4 0
INDIRI4
RETI4
LABELV $177
endproc toupper 4 0
export memmove
proc memmove 8 0
line 333
;330:}
;331:
;332:void *memmove( void *dest, const void *src, size_t count )
;333:{
line 336
;334:  int   i;
;335:
;336:  if( dest > src )
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
LEU4 $181
line 337
;337:  {
line 338
;338:    for( i = count - 1; i >= 0; i-- )
ADDRLP4 0
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $186
JUMPV
LABELV $183
line 339
;339:      ( (char *)dest )[ i ] = ( (char *)src )[ i ];
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
LABELV $184
line 338
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $186
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $183
line 340
;340:  }
ADDRGP4 $182
JUMPV
LABELV $181
line 342
;341:  else
;342:  {
line 343
;343:    for( i = 0; i < count; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $190
JUMPV
LABELV $187
line 344
;344:      ( (char *)dest )[ i ] = ( (char *)src )[ i ];
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
LABELV $188
line 343
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $190
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $187
line 345
;345:  }
LABELV $182
line 347
;346:
;347:  return dest;
ADDRFP4 0
INDIRP4
RETP4
LABELV $180
endproc memmove 8 0
export rint
proc rint 8 4
line 810
;348:}
;349:
;350:
;351:#if 0
;352:
;353:double floor( double x ) {
;354:  return (int)(x + 0x40000000) - 0x40000000;
;355:}
;356:
;357:void *memset( void *dest, int c, size_t count ) {
;358:  while ( count-- ) {
;359:    ((char *)dest)[count] = c;
;360:  }
;361:  return dest;
;362:}
;363:
;364:void *memcpy( void *dest, const void *src, size_t count ) {
;365:  while ( count-- ) {
;366:    ((char *)dest)[count] = ((char *)src)[count];
;367:  }
;368:  return dest;
;369:}
;370:
;371:char *strncpy( char *strDest, const char *strSource, size_t count ) {
;372:  char  *s;
;373:
;374:  s = strDest;
;375:  while ( *strSource && count ) {
;376:    *s++ = *strSource++;
;377:    count--;
;378:  }
;379:  while ( count-- ) {
;380:    *s++ = 0;
;381:  }
;382:  return strDest;
;383:}
;384:
;385:double sqrt( double x ) {
;386:  float y;
;387:  float delta;
;388:  float maxError;
;389:
;390:  if ( x <= 0 ) {
;391:    return 0;
;392:  }
;393:
;394:  // initial guess
;395:  y = x / 2;
;396:
;397:  // refine
;398:  maxError = x * 0.001;
;399:
;400:  do {
;401:    delta = ( y * y ) - x;
;402:    y -= delta / ( 2 * y );
;403:  } while ( delta > maxError || delta < -maxError );
;404:
;405:  return y;
;406:}
;407:
;408:
;409:float sintable[1024] = {
;410:0.000000,0.001534,0.003068,0.004602,0.006136,0.007670,0.009204,0.010738,
;411:0.012272,0.013805,0.015339,0.016873,0.018407,0.019940,0.021474,0.023008,
;412:0.024541,0.026075,0.027608,0.029142,0.030675,0.032208,0.033741,0.035274,
;413:0.036807,0.038340,0.039873,0.041406,0.042938,0.044471,0.046003,0.047535,
;414:0.049068,0.050600,0.052132,0.053664,0.055195,0.056727,0.058258,0.059790,
;415:0.061321,0.062852,0.064383,0.065913,0.067444,0.068974,0.070505,0.072035,
;416:0.073565,0.075094,0.076624,0.078153,0.079682,0.081211,0.082740,0.084269,
;417:0.085797,0.087326,0.088854,0.090381,0.091909,0.093436,0.094963,0.096490,
;418:0.098017,0.099544,0.101070,0.102596,0.104122,0.105647,0.107172,0.108697,
;419:0.110222,0.111747,0.113271,0.114795,0.116319,0.117842,0.119365,0.120888,
;420:0.122411,0.123933,0.125455,0.126977,0.128498,0.130019,0.131540,0.133061,
;421:0.134581,0.136101,0.137620,0.139139,0.140658,0.142177,0.143695,0.145213,
;422:0.146730,0.148248,0.149765,0.151281,0.152797,0.154313,0.155828,0.157343,
;423:0.158858,0.160372,0.161886,0.163400,0.164913,0.166426,0.167938,0.169450,
;424:0.170962,0.172473,0.173984,0.175494,0.177004,0.178514,0.180023,0.181532,
;425:0.183040,0.184548,0.186055,0.187562,0.189069,0.190575,0.192080,0.193586,
;426:0.195090,0.196595,0.198098,0.199602,0.201105,0.202607,0.204109,0.205610,
;427:0.207111,0.208612,0.210112,0.211611,0.213110,0.214609,0.216107,0.217604,
;428:0.219101,0.220598,0.222094,0.223589,0.225084,0.226578,0.228072,0.229565,
;429:0.231058,0.232550,0.234042,0.235533,0.237024,0.238514,0.240003,0.241492,
;430:0.242980,0.244468,0.245955,0.247442,0.248928,0.250413,0.251898,0.253382,
;431:0.254866,0.256349,0.257831,0.259313,0.260794,0.262275,0.263755,0.265234,
;432:0.266713,0.268191,0.269668,0.271145,0.272621,0.274097,0.275572,0.277046,
;433:0.278520,0.279993,0.281465,0.282937,0.284408,0.285878,0.287347,0.288816,
;434:0.290285,0.291752,0.293219,0.294685,0.296151,0.297616,0.299080,0.300543,
;435:0.302006,0.303468,0.304929,0.306390,0.307850,0.309309,0.310767,0.312225,
;436:0.313682,0.315138,0.316593,0.318048,0.319502,0.320955,0.322408,0.323859,
;437:0.325310,0.326760,0.328210,0.329658,0.331106,0.332553,0.334000,0.335445,
;438:0.336890,0.338334,0.339777,0.341219,0.342661,0.344101,0.345541,0.346980,
;439:0.348419,0.349856,0.351293,0.352729,0.354164,0.355598,0.357031,0.358463,
;440:0.359895,0.361326,0.362756,0.364185,0.365613,0.367040,0.368467,0.369892,
;441:0.371317,0.372741,0.374164,0.375586,0.377007,0.378428,0.379847,0.381266,
;442:0.382683,0.384100,0.385516,0.386931,0.388345,0.389758,0.391170,0.392582,
;443:0.393992,0.395401,0.396810,0.398218,0.399624,0.401030,0.402435,0.403838,
;444:0.405241,0.406643,0.408044,0.409444,0.410843,0.412241,0.413638,0.415034,
;445:0.416430,0.417824,0.419217,0.420609,0.422000,0.423390,0.424780,0.426168,
;446:0.427555,0.428941,0.430326,0.431711,0.433094,0.434476,0.435857,0.437237,
;447:0.438616,0.439994,0.441371,0.442747,0.444122,0.445496,0.446869,0.448241,
;448:0.449611,0.450981,0.452350,0.453717,0.455084,0.456449,0.457813,0.459177,
;449:0.460539,0.461900,0.463260,0.464619,0.465976,0.467333,0.468689,0.470043,
;450:0.471397,0.472749,0.474100,0.475450,0.476799,0.478147,0.479494,0.480839,
;451:0.482184,0.483527,0.484869,0.486210,0.487550,0.488889,0.490226,0.491563,
;452:0.492898,0.494232,0.495565,0.496897,0.498228,0.499557,0.500885,0.502212,
;453:0.503538,0.504863,0.506187,0.507509,0.508830,0.510150,0.511469,0.512786,
;454:0.514103,0.515418,0.516732,0.518045,0.519356,0.520666,0.521975,0.523283,
;455:0.524590,0.525895,0.527199,0.528502,0.529804,0.531104,0.532403,0.533701,
;456:0.534998,0.536293,0.537587,0.538880,0.540171,0.541462,0.542751,0.544039,
;457:0.545325,0.546610,0.547894,0.549177,0.550458,0.551738,0.553017,0.554294,
;458:0.555570,0.556845,0.558119,0.559391,0.560662,0.561931,0.563199,0.564466,
;459:0.565732,0.566996,0.568259,0.569521,0.570781,0.572040,0.573297,0.574553,
;460:0.575808,0.577062,0.578314,0.579565,0.580814,0.582062,0.583309,0.584554,
;461:0.585798,0.587040,0.588282,0.589521,0.590760,0.591997,0.593232,0.594466,
;462:0.595699,0.596931,0.598161,0.599389,0.600616,0.601842,0.603067,0.604290,
;463:0.605511,0.606731,0.607950,0.609167,0.610383,0.611597,0.612810,0.614022,
;464:0.615232,0.616440,0.617647,0.618853,0.620057,0.621260,0.622461,0.623661,
;465:0.624859,0.626056,0.627252,0.628446,0.629638,0.630829,0.632019,0.633207,
;466:0.634393,0.635578,0.636762,0.637944,0.639124,0.640303,0.641481,0.642657,
;467:0.643832,0.645005,0.646176,0.647346,0.648514,0.649681,0.650847,0.652011,
;468:0.653173,0.654334,0.655493,0.656651,0.657807,0.658961,0.660114,0.661266,
;469:0.662416,0.663564,0.664711,0.665856,0.667000,0.668142,0.669283,0.670422,
;470:0.671559,0.672695,0.673829,0.674962,0.676093,0.677222,0.678350,0.679476,
;471:0.680601,0.681724,0.682846,0.683965,0.685084,0.686200,0.687315,0.688429,
;472:0.689541,0.690651,0.691759,0.692866,0.693971,0.695075,0.696177,0.697278,
;473:0.698376,0.699473,0.700569,0.701663,0.702755,0.703845,0.704934,0.706021,
;474:0.707107,0.708191,0.709273,0.710353,0.711432,0.712509,0.713585,0.714659,
;475:0.715731,0.716801,0.717870,0.718937,0.720003,0.721066,0.722128,0.723188,
;476:0.724247,0.725304,0.726359,0.727413,0.728464,0.729514,0.730563,0.731609,
;477:0.732654,0.733697,0.734739,0.735779,0.736817,0.737853,0.738887,0.739920,
;478:0.740951,0.741980,0.743008,0.744034,0.745058,0.746080,0.747101,0.748119,
;479:0.749136,0.750152,0.751165,0.752177,0.753187,0.754195,0.755201,0.756206,
;480:0.757209,0.758210,0.759209,0.760207,0.761202,0.762196,0.763188,0.764179,
;481:0.765167,0.766154,0.767139,0.768122,0.769103,0.770083,0.771061,0.772036,
;482:0.773010,0.773983,0.774953,0.775922,0.776888,0.777853,0.778817,0.779778,
;483:0.780737,0.781695,0.782651,0.783605,0.784557,0.785507,0.786455,0.787402,
;484:0.788346,0.789289,0.790230,0.791169,0.792107,0.793042,0.793975,0.794907,
;485:0.795837,0.796765,0.797691,0.798615,0.799537,0.800458,0.801376,0.802293,
;486:0.803208,0.804120,0.805031,0.805940,0.806848,0.807753,0.808656,0.809558,
;487:0.810457,0.811355,0.812251,0.813144,0.814036,0.814926,0.815814,0.816701,
;488:0.817585,0.818467,0.819348,0.820226,0.821103,0.821977,0.822850,0.823721,
;489:0.824589,0.825456,0.826321,0.827184,0.828045,0.828904,0.829761,0.830616,
;490:0.831470,0.832321,0.833170,0.834018,0.834863,0.835706,0.836548,0.837387,
;491:0.838225,0.839060,0.839894,0.840725,0.841555,0.842383,0.843208,0.844032,
;492:0.844854,0.845673,0.846491,0.847307,0.848120,0.848932,0.849742,0.850549,
;493:0.851355,0.852159,0.852961,0.853760,0.854558,0.855354,0.856147,0.856939,
;494:0.857729,0.858516,0.859302,0.860085,0.860867,0.861646,0.862424,0.863199,
;495:0.863973,0.864744,0.865514,0.866281,0.867046,0.867809,0.868571,0.869330,
;496:0.870087,0.870842,0.871595,0.872346,0.873095,0.873842,0.874587,0.875329,
;497:0.876070,0.876809,0.877545,0.878280,0.879012,0.879743,0.880471,0.881197,
;498:0.881921,0.882643,0.883363,0.884081,0.884797,0.885511,0.886223,0.886932,
;499:0.887640,0.888345,0.889048,0.889750,0.890449,0.891146,0.891841,0.892534,
;500:0.893224,0.893913,0.894599,0.895284,0.895966,0.896646,0.897325,0.898001,
;501:0.898674,0.899346,0.900016,0.900683,0.901349,0.902012,0.902673,0.903332,
;502:0.903989,0.904644,0.905297,0.905947,0.906596,0.907242,0.907886,0.908528,
;503:0.909168,0.909806,0.910441,0.911075,0.911706,0.912335,0.912962,0.913587,
;504:0.914210,0.914830,0.915449,0.916065,0.916679,0.917291,0.917901,0.918508,
;505:0.919114,0.919717,0.920318,0.920917,0.921514,0.922109,0.922701,0.923291,
;506:0.923880,0.924465,0.925049,0.925631,0.926210,0.926787,0.927363,0.927935,
;507:0.928506,0.929075,0.929641,0.930205,0.930767,0.931327,0.931884,0.932440,
;508:0.932993,0.933544,0.934093,0.934639,0.935184,0.935726,0.936266,0.936803,
;509:0.937339,0.937872,0.938404,0.938932,0.939459,0.939984,0.940506,0.941026,
;510:0.941544,0.942060,0.942573,0.943084,0.943593,0.944100,0.944605,0.945107,
;511:0.945607,0.946105,0.946601,0.947094,0.947586,0.948075,0.948561,0.949046,
;512:0.949528,0.950008,0.950486,0.950962,0.951435,0.951906,0.952375,0.952842,
;513:0.953306,0.953768,0.954228,0.954686,0.955141,0.955594,0.956045,0.956494,
;514:0.956940,0.957385,0.957826,0.958266,0.958703,0.959139,0.959572,0.960002,
;515:0.960431,0.960857,0.961280,0.961702,0.962121,0.962538,0.962953,0.963366,
;516:0.963776,0.964184,0.964590,0.964993,0.965394,0.965793,0.966190,0.966584,
;517:0.966976,0.967366,0.967754,0.968139,0.968522,0.968903,0.969281,0.969657,
;518:0.970031,0.970403,0.970772,0.971139,0.971504,0.971866,0.972226,0.972584,
;519:0.972940,0.973293,0.973644,0.973993,0.974339,0.974684,0.975025,0.975365,
;520:0.975702,0.976037,0.976370,0.976700,0.977028,0.977354,0.977677,0.977999,
;521:0.978317,0.978634,0.978948,0.979260,0.979570,0.979877,0.980182,0.980485,
;522:0.980785,0.981083,0.981379,0.981673,0.981964,0.982253,0.982539,0.982824,
;523:0.983105,0.983385,0.983662,0.983937,0.984210,0.984480,0.984749,0.985014,
;524:0.985278,0.985539,0.985798,0.986054,0.986308,0.986560,0.986809,0.987057,
;525:0.987301,0.987544,0.987784,0.988022,0.988258,0.988491,0.988722,0.988950,
;526:0.989177,0.989400,0.989622,0.989841,0.990058,0.990273,0.990485,0.990695,
;527:0.990903,0.991108,0.991311,0.991511,0.991710,0.991906,0.992099,0.992291,
;528:0.992480,0.992666,0.992850,0.993032,0.993212,0.993389,0.993564,0.993737,
;529:0.993907,0.994075,0.994240,0.994404,0.994565,0.994723,0.994879,0.995033,
;530:0.995185,0.995334,0.995481,0.995625,0.995767,0.995907,0.996045,0.996180,
;531:0.996313,0.996443,0.996571,0.996697,0.996820,0.996941,0.997060,0.997176,
;532:0.997290,0.997402,0.997511,0.997618,0.997723,0.997825,0.997925,0.998023,
;533:0.998118,0.998211,0.998302,0.998390,0.998476,0.998559,0.998640,0.998719,
;534:0.998795,0.998870,0.998941,0.999011,0.999078,0.999142,0.999205,0.999265,
;535:0.999322,0.999378,0.999431,0.999481,0.999529,0.999575,0.999619,0.999660,
;536:0.999699,0.999735,0.999769,0.999801,0.999831,0.999858,0.999882,0.999905,
;537:0.999925,0.999942,0.999958,0.999971,0.999981,0.999989,0.999995,0.999999
;538:};
;539:
;540:double sin( double x ) {
;541:  int index;
;542:  int quad;
;543:
;544:  index = 1024 * x / (M_PI * 0.5);
;545:  quad = ( index >> 10 ) & 3;
;546:  index &= 1023;
;547:  switch ( quad ) {
;548:  case 0:
;549:    return sintable[index];
;550:  case 1:
;551:    return sintable[1023-index];
;552:  case 2:
;553:    return -sintable[index];
;554:  case 3:
;555:    return -sintable[1023-index];
;556:  }
;557:  return 0;
;558:}
;559:
;560:
;561:double cos( double x ) {
;562:  int index;
;563:  int quad;
;564:
;565:  index = 1024 * x / (M_PI * 0.5);
;566:  quad = ( index >> 10 ) & 3;
;567:  index &= 1023;
;568:  switch ( quad ) {
;569:  case 3:
;570:    return sintable[index];
;571:  case 0:
;572:    return sintable[1023-index];
;573:  case 1:
;574:    return -sintable[index];
;575:  case 2:
;576:    return -sintable[1023-index];
;577:  }
;578:  return 0;
;579:}
;580:
;581:
;582:/*
;583:void create_acostable( void ) {
;584:  int i;
;585:  FILE *fp;
;586:  float a;
;587:
;588:  fp = fopen("c:\\acostable.txt", "w");
;589:  fprintf(fp, "float acostable[] = {");
;590:  for (i = 0; i < 1024; i++) {
;591:    if (!(i & 7))
;592:      fprintf(fp, "\n");
;593:    a = acos( (float) -1 + i / 512 );
;594:    fprintf(fp, "%1.8f,", a);
;595:  }
;596:  fprintf(fp, "\n}\n");
;597:  fclose(fp);
;598:}
;599:*/
;600:
;601:
;602:float acostable[] = {
;603:3.14159265,3.07908248,3.05317551,3.03328655,3.01651113,3.00172442,2.98834964,2.97604422,
;604:2.96458497,2.95381690,2.94362719,2.93393068,2.92466119,2.91576615,2.90720289,2.89893629,
;605:2.89093699,2.88318015,2.87564455,2.86831188,2.86116621,2.85419358,2.84738169,2.84071962,
;606:2.83419760,2.82780691,2.82153967,2.81538876,2.80934770,2.80341062,2.79757211,2.79182724,
;607:2.78617145,2.78060056,2.77511069,2.76969824,2.76435988,2.75909250,2.75389319,2.74875926,
;608:2.74368816,2.73867752,2.73372510,2.72882880,2.72398665,2.71919677,2.71445741,2.70976688,
;609:2.70512362,2.70052613,2.69597298,2.69146283,2.68699438,2.68256642,2.67817778,2.67382735,
;610:2.66951407,2.66523692,2.66099493,2.65678719,2.65261279,2.64847088,2.64436066,2.64028133,
;611:2.63623214,2.63221238,2.62822133,2.62425835,2.62032277,2.61641398,2.61253138,2.60867440,
;612:2.60484248,2.60103507,2.59725167,2.59349176,2.58975488,2.58604053,2.58234828,2.57867769,
;613:2.57502832,2.57139977,2.56779164,2.56420354,2.56063509,2.55708594,2.55355572,2.55004409,
;614:2.54655073,2.54307530,2.53961750,2.53617701,2.53275354,2.52934680,2.52595650,2.52258238,
;615:2.51922417,2.51588159,2.51255441,2.50924238,2.50594525,2.50266278,2.49939476,2.49614096,
;616:2.49290115,2.48967513,2.48646269,2.48326362,2.48007773,2.47690482,2.47374472,2.47059722,
;617:2.46746215,2.46433933,2.46122860,2.45812977,2.45504269,2.45196720,2.44890314,2.44585034,
;618:2.44280867,2.43977797,2.43675809,2.43374890,2.43075025,2.42776201,2.42478404,2.42181622,
;619:2.41885841,2.41591048,2.41297232,2.41004380,2.40712480,2.40421521,2.40131491,2.39842379,
;620:2.39554173,2.39266863,2.38980439,2.38694889,2.38410204,2.38126374,2.37843388,2.37561237,
;621:2.37279910,2.36999400,2.36719697,2.36440790,2.36162673,2.35885335,2.35608768,2.35332964,
;622:2.35057914,2.34783610,2.34510044,2.34237208,2.33965094,2.33693695,2.33423003,2.33153010,
;623:2.32883709,2.32615093,2.32347155,2.32079888,2.31813284,2.31547337,2.31282041,2.31017388,
;624:2.30753373,2.30489988,2.30227228,2.29965086,2.29703556,2.29442632,2.29182309,2.28922580,
;625:2.28663439,2.28404881,2.28146900,2.27889490,2.27632647,2.27376364,2.27120637,2.26865460,
;626:2.26610827,2.26356735,2.26103177,2.25850149,2.25597646,2.25345663,2.25094195,2.24843238,
;627:2.24592786,2.24342836,2.24093382,2.23844420,2.23595946,2.23347956,2.23100444,2.22853408,
;628:2.22606842,2.22360742,2.22115104,2.21869925,2.21625199,2.21380924,2.21137096,2.20893709,
;629:2.20650761,2.20408248,2.20166166,2.19924511,2.19683280,2.19442469,2.19202074,2.18962092,
;630:2.18722520,2.18483354,2.18244590,2.18006225,2.17768257,2.17530680,2.17293493,2.17056692,
;631:2.16820274,2.16584236,2.16348574,2.16113285,2.15878367,2.15643816,2.15409630,2.15175805,
;632:2.14942338,2.14709226,2.14476468,2.14244059,2.14011997,2.13780279,2.13548903,2.13317865,
;633:2.13087163,2.12856795,2.12626757,2.12397047,2.12167662,2.11938600,2.11709859,2.11481435,
;634:2.11253326,2.11025530,2.10798044,2.10570867,2.10343994,2.10117424,2.09891156,2.09665185,
;635:2.09439510,2.09214129,2.08989040,2.08764239,2.08539725,2.08315496,2.08091550,2.07867884,
;636:2.07644495,2.07421383,2.07198545,2.06975978,2.06753681,2.06531651,2.06309887,2.06088387,
;637:2.05867147,2.05646168,2.05425445,2.05204979,2.04984765,2.04764804,2.04545092,2.04325628,
;638:2.04106409,2.03887435,2.03668703,2.03450211,2.03231957,2.03013941,2.02796159,2.02578610,
;639:2.02361292,2.02144204,2.01927344,2.01710710,2.01494300,2.01278113,2.01062146,2.00846399,
;640:2.00630870,2.00415556,2.00200457,1.99985570,1.99770895,1.99556429,1.99342171,1.99128119,
;641:1.98914271,1.98700627,1.98487185,1.98273942,1.98060898,1.97848051,1.97635399,1.97422942,
;642:1.97210676,1.96998602,1.96786718,1.96575021,1.96363511,1.96152187,1.95941046,1.95730088,
;643:1.95519310,1.95308712,1.95098292,1.94888050,1.94677982,1.94468089,1.94258368,1.94048818,
;644:1.93839439,1.93630228,1.93421185,1.93212308,1.93003595,1.92795046,1.92586659,1.92378433,
;645:1.92170367,1.91962459,1.91754708,1.91547113,1.91339673,1.91132385,1.90925250,1.90718266,
;646:1.90511432,1.90304746,1.90098208,1.89891815,1.89685568,1.89479464,1.89273503,1.89067683,
;647:1.88862003,1.88656463,1.88451060,1.88245794,1.88040664,1.87835668,1.87630806,1.87426076,
;648:1.87221477,1.87017008,1.86812668,1.86608457,1.86404371,1.86200412,1.85996577,1.85792866,
;649:1.85589277,1.85385809,1.85182462,1.84979234,1.84776125,1.84573132,1.84370256,1.84167495,
;650:1.83964848,1.83762314,1.83559892,1.83357582,1.83155381,1.82953289,1.82751305,1.82549429,
;651:1.82347658,1.82145993,1.81944431,1.81742973,1.81541617,1.81340362,1.81139207,1.80938151,
;652:1.80737194,1.80536334,1.80335570,1.80134902,1.79934328,1.79733848,1.79533460,1.79333164,
;653:1.79132959,1.78932843,1.78732817,1.78532878,1.78333027,1.78133261,1.77933581,1.77733985,
;654:1.77534473,1.77335043,1.77135695,1.76936428,1.76737240,1.76538132,1.76339101,1.76140148,
;655:1.75941271,1.75742470,1.75543743,1.75345090,1.75146510,1.74948002,1.74749565,1.74551198,
;656:1.74352900,1.74154672,1.73956511,1.73758417,1.73560389,1.73362426,1.73164527,1.72966692,
;657:1.72768920,1.72571209,1.72373560,1.72175971,1.71978441,1.71780969,1.71583556,1.71386199,
;658:1.71188899,1.70991653,1.70794462,1.70597325,1.70400241,1.70203209,1.70006228,1.69809297,
;659:1.69612416,1.69415584,1.69218799,1.69022062,1.68825372,1.68628727,1.68432127,1.68235571,
;660:1.68039058,1.67842588,1.67646160,1.67449772,1.67253424,1.67057116,1.66860847,1.66664615,
;661:1.66468420,1.66272262,1.66076139,1.65880050,1.65683996,1.65487975,1.65291986,1.65096028,
;662:1.64900102,1.64704205,1.64508338,1.64312500,1.64116689,1.63920905,1.63725148,1.63529416,
;663:1.63333709,1.63138026,1.62942366,1.62746728,1.62551112,1.62355517,1.62159943,1.61964388,
;664:1.61768851,1.61573332,1.61377831,1.61182346,1.60986877,1.60791422,1.60595982,1.60400556,
;665:1.60205142,1.60009739,1.59814349,1.59618968,1.59423597,1.59228235,1.59032882,1.58837536,
;666:1.58642196,1.58446863,1.58251535,1.58056211,1.57860891,1.57665574,1.57470259,1.57274945,
;667:1.57079633,1.56884320,1.56689007,1.56493692,1.56298375,1.56103055,1.55907731,1.55712403,
;668:1.55517069,1.55321730,1.55126383,1.54931030,1.54735668,1.54540297,1.54344917,1.54149526,
;669:1.53954124,1.53758710,1.53563283,1.53367843,1.53172389,1.52976919,1.52781434,1.52585933,
;670:1.52390414,1.52194878,1.51999323,1.51803748,1.51608153,1.51412537,1.51216900,1.51021240,
;671:1.50825556,1.50629849,1.50434117,1.50238360,1.50042576,1.49846765,1.49650927,1.49455060,
;672:1.49259163,1.49063237,1.48867280,1.48671291,1.48475270,1.48279215,1.48083127,1.47887004,
;673:1.47690845,1.47494650,1.47298419,1.47102149,1.46905841,1.46709493,1.46513106,1.46316677,
;674:1.46120207,1.45923694,1.45727138,1.45530538,1.45333893,1.45137203,1.44940466,1.44743682,
;675:1.44546850,1.44349969,1.44153038,1.43956057,1.43759024,1.43561940,1.43364803,1.43167612,
;676:1.42970367,1.42773066,1.42575709,1.42378296,1.42180825,1.41983295,1.41785705,1.41588056,
;677:1.41390346,1.41192573,1.40994738,1.40796840,1.40598877,1.40400849,1.40202755,1.40004594,
;678:1.39806365,1.39608068,1.39409701,1.39211264,1.39012756,1.38814175,1.38615522,1.38416795,
;679:1.38217994,1.38019117,1.37820164,1.37621134,1.37422025,1.37222837,1.37023570,1.36824222,
;680:1.36624792,1.36425280,1.36225684,1.36026004,1.35826239,1.35626387,1.35426449,1.35226422,
;681:1.35026307,1.34826101,1.34625805,1.34425418,1.34224937,1.34024364,1.33823695,1.33622932,
;682:1.33422072,1.33221114,1.33020059,1.32818904,1.32617649,1.32416292,1.32214834,1.32013273,
;683:1.31811607,1.31609837,1.31407960,1.31205976,1.31003885,1.30801684,1.30599373,1.30396951,
;684:1.30194417,1.29991770,1.29789009,1.29586133,1.29383141,1.29180031,1.28976803,1.28773456,
;685:1.28569989,1.28366400,1.28162688,1.27958854,1.27754894,1.27550809,1.27346597,1.27142257,
;686:1.26937788,1.26733189,1.26528459,1.26323597,1.26118602,1.25913471,1.25708205,1.25502803,
;687:1.25297262,1.25091583,1.24885763,1.24679802,1.24473698,1.24267450,1.24061058,1.23854519,
;688:1.23647833,1.23440999,1.23234015,1.23026880,1.22819593,1.22612152,1.22404557,1.22196806,
;689:1.21988898,1.21780832,1.21572606,1.21364219,1.21155670,1.20946958,1.20738080,1.20529037,
;690:1.20319826,1.20110447,1.19900898,1.19691177,1.19481283,1.19271216,1.19060973,1.18850553,
;691:1.18639955,1.18429178,1.18218219,1.18007079,1.17795754,1.17584244,1.17372548,1.17160663,
;692:1.16948589,1.16736324,1.16523866,1.16311215,1.16098368,1.15885323,1.15672081,1.15458638,
;693:1.15244994,1.15031147,1.14817095,1.14602836,1.14388370,1.14173695,1.13958808,1.13743709,
;694:1.13528396,1.13312866,1.13097119,1.12881153,1.12664966,1.12448556,1.12231921,1.12015061,
;695:1.11797973,1.11580656,1.11363107,1.11145325,1.10927308,1.10709055,1.10490563,1.10271831,
;696:1.10052856,1.09833638,1.09614174,1.09394462,1.09174500,1.08954287,1.08733820,1.08513098,
;697:1.08292118,1.08070879,1.07849378,1.07627614,1.07405585,1.07183287,1.06960721,1.06737882,
;698:1.06514770,1.06291382,1.06067715,1.05843769,1.05619540,1.05395026,1.05170226,1.04945136,
;699:1.04719755,1.04494080,1.04268110,1.04041841,1.03815271,1.03588399,1.03361221,1.03133735,
;700:1.02905939,1.02677830,1.02449407,1.02220665,1.01991603,1.01762219,1.01532509,1.01302471,
;701:1.01072102,1.00841400,1.00610363,1.00378986,1.00147268,0.99915206,0.99682798,0.99450039,
;702:0.99216928,0.98983461,0.98749636,0.98515449,0.98280898,0.98045980,0.97810691,0.97575030,
;703:0.97338991,0.97102573,0.96865772,0.96628585,0.96391009,0.96153040,0.95914675,0.95675912,
;704:0.95436745,0.95197173,0.94957191,0.94716796,0.94475985,0.94234754,0.93993099,0.93751017,
;705:0.93508504,0.93265556,0.93022170,0.92778341,0.92534066,0.92289341,0.92044161,0.91798524,
;706:0.91552424,0.91305858,0.91058821,0.90811309,0.90563319,0.90314845,0.90065884,0.89816430,
;707:0.89566479,0.89316028,0.89065070,0.88813602,0.88561619,0.88309116,0.88056088,0.87802531,
;708:0.87548438,0.87293806,0.87038629,0.86782901,0.86526619,0.86269775,0.86012366,0.85754385,
;709:0.85495827,0.85236686,0.84976956,0.84716633,0.84455709,0.84194179,0.83932037,0.83669277,
;710:0.83405893,0.83141877,0.82877225,0.82611928,0.82345981,0.82079378,0.81812110,0.81544172,
;711:0.81275556,0.81006255,0.80736262,0.80465570,0.80194171,0.79922057,0.79649221,0.79375655,
;712:0.79101352,0.78826302,0.78550497,0.78273931,0.77996593,0.77718475,0.77439569,0.77159865,
;713:0.76879355,0.76598029,0.76315878,0.76032891,0.75749061,0.75464376,0.75178826,0.74892402,
;714:0.74605092,0.74316887,0.74027775,0.73737744,0.73446785,0.73154885,0.72862033,0.72568217,
;715:0.72273425,0.71977644,0.71680861,0.71383064,0.71084240,0.70784376,0.70483456,0.70181469,
;716:0.69878398,0.69574231,0.69268952,0.68962545,0.68654996,0.68346288,0.68036406,0.67725332,
;717:0.67413051,0.67099544,0.66784794,0.66468783,0.66151492,0.65832903,0.65512997,0.65191753,
;718:0.64869151,0.64545170,0.64219789,0.63892987,0.63564741,0.63235028,0.62903824,0.62571106,
;719:0.62236849,0.61901027,0.61563615,0.61224585,0.60883911,0.60541564,0.60197515,0.59851735,
;720:0.59504192,0.59154856,0.58803694,0.58450672,0.58095756,0.57738911,0.57380101,0.57019288,
;721:0.56656433,0.56291496,0.55924437,0.55555212,0.55183778,0.54810089,0.54434099,0.54055758,
;722:0.53675018,0.53291825,0.52906127,0.52517867,0.52126988,0.51733431,0.51337132,0.50938028,
;723:0.50536051,0.50131132,0.49723200,0.49312177,0.48897987,0.48480547,0.48059772,0.47635573,
;724:0.47207859,0.46776530,0.46341487,0.45902623,0.45459827,0.45012983,0.44561967,0.44106652,
;725:0.43646903,0.43182577,0.42713525,0.42239588,0.41760600,0.41276385,0.40786755,0.40291513,
;726:0.39790449,0.39283339,0.38769946,0.38250016,0.37723277,0.37189441,0.36648196,0.36099209,
;727:0.35542120,0.34976542,0.34402054,0.33818204,0.33224495,0.32620390,0.32005298,0.31378574,
;728:0.30739505,0.30087304,0.29421096,0.28739907,0.28042645,0.27328078,0.26594810,0.25841250,
;729:0.25065566,0.24265636,0.23438976,0.22582651,0.21693146,0.20766198,0.19796546,0.18777575,
;730:0.17700769,0.16554844,0.15324301,0.13986823,0.12508152,0.10830610,0.08841715,0.06251018,
;731:};
;732:
;733:double acos( double x ) {
;734:  int index;
;735:
;736:  if (x < -1)
;737:    x = -1;
;738:  if (x > 1)
;739:    x = 1;
;740:  index = (float) (1.0 + x) * 511.9;
;741:  return acostable[index];
;742:}
;743:
;744:
;745:double atan2( double y, double x ) {
;746:  float base;
;747:  float temp;
;748:  float dir;
;749:  float test;
;750:  int   i;
;751:
;752:  if ( x < 0 ) {
;753:    if ( y >= 0 ) {
;754:      // quad 1
;755:      base = M_PI / 2;
;756:      temp = x;
;757:      x = y;
;758:      y = -temp;
;759:    } else {
;760:      // quad 2
;761:      base = M_PI;
;762:      x = -x;
;763:      y = -y;
;764:    }
;765:  } else {
;766:    if ( y < 0 ) {
;767:      // quad 3
;768:      base = 3 * M_PI / 2;
;769:      temp = x;
;770:      x = -y;
;771:      y = temp;
;772:    }
;773:  }
;774:
;775:  if ( y > x ) {
;776:    base += M_PI/2;
;777:    temp = x;
;778:    x = y;
;779:    y = temp;
;780:    dir = -1;
;781:  } else {
;782:    dir = 1;
;783:  }
;784:
;785:  // calcualte angle in octant 0
;786:  if ( x == 0 ) {
;787:    return base;
;788:  }
;789:  y /= x;
;790:
;791:  for ( i = 0 ; i < 512 ; i++ ) {
;792:    test = sintable[i] / sintable[1023-i];
;793:    if ( test > y ) {
;794:      break;
;795:    }
;796:  }
;797:
;798:  return base + dir * i * ( M_PI/2048);
;799:}
;800:
;801:
;802:#endif
;803:
;804:/*
;805:===============
;806:rint
;807:===============
;808:*/
;809:double rint( double v )
;810:{
line 811
;811:  if( v >= 0.5f )
ADDRFP4 0
INDIRF4
CNSTF4 1056964608
LTF4 $192
line 812
;812:    return ceil( v );
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 ceil
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
RETF4
ADDRGP4 $191
JUMPV
LABELV $192
line 814
;813:  else
;814:    return floor( v );
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 floor
CALLF4
ASGNF4
ADDRLP4 4
INDIRF4
RETF4
LABELV $191
endproc rint 8 4
export tan
proc tan 8 4
line 818
;815:}
;816:
;817:double tan( double x )
;818:{
line 819
;819:  return sin( x ) / cos( x );
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 sin
CALLF4
ASGNF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
DIVF4
RETF4
LABELV $194
endproc tan 8 4
lit
align 4
LABELV pi
byte 4 1078530010
align 4
LABELV pio2_hi
byte 4 1070141402
align 4
LABELV pio2_lo
byte 4 866263400
align 4
LABELV pS0
byte 4 1042983595
align 4
LABELV pS1
byte 4 3198595216
align 4
LABELV pS2
byte 4 1045301928
align 4
LABELV pS3
byte 4 3173257542
align 4
LABELV pS4
byte 4 978288388
align 4
LABELV pS5
byte 4 940699400
align 4
LABELV qS1
byte 4 3222917433
align 4
LABELV qS2
byte 4 1073829677
align 4
LABELV qS3
byte 4 3207607137
align 4
LABELV qS4
byte 4 1033750062
export acos
code
proc acos 68 4
line 882
;820:}
;821:
;822:/*
;823: * ====================================================
;824: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
;825: *
;826: * Developed at SunPro, a Sun Microsystems, Inc. business.
;827: * Permission to use, copy, modify, and distribute this
;828: * software is freely granted, provided that this notice
;829: * is preserved.
;830: * ====================================================
;831: */
;832:
;833:typedef union
;834:{
;835:  float value;
;836:  unsigned int word;
;837:} ieee_float_shape_type;
;838:
;839:/* Get a 32 bit int from a float.  */
;840:
;841:#define GET_FLOAT_WORD(i,d)   \
;842:do {                          \
;843:  ieee_float_shape_type gf_u; \
;844:  gf_u.value = (d);           \
;845:  (i) = gf_u.word;            \
;846:} while (0)
;847:
;848:/* Set a float from a 32 bit int.  */
;849:
;850:#define SET_FLOAT_WORD(d,i)   \
;851:do {                          \
;852:  ieee_float_shape_type sf_u; \
;853:  sf_u.word = (i);            \
;854:  (d) = sf_u.value;           \
;855:} while (0)
;856:
;857:/* A union which permits us to convert between a float and a 32 bit
;858:   int.  */
;859:
;860://acos
;861:static const float
;862:pi      =  3.1415925026e+00, /* 0x40490fda */
;863:pio2_hi =  1.5707962513e+00, /* 0x3fc90fda */
;864:pio2_lo =  7.5497894159e-08, /* 0x33a22168 */
;865:pS0     =  1.6666667163e-01, /* 0x3e2aaaab */
;866:pS1     = -3.2556581497e-01, /* 0xbea6b090 */
;867:pS2     =  2.0121252537e-01, /* 0x3e4e0aa8 */
;868:pS3     = -4.0055535734e-02, /* 0xbd241146 */
;869:pS4     =  7.9153501429e-04, /* 0x3a4f7f04 */
;870:pS5     =  3.4793309169e-05, /* 0x3811ef08 */
;871:qS1     = -2.4033949375e+00, /* 0xc019d139 */
;872:qS2     =  2.0209457874e+00, /* 0x4001572d */
;873:qS3     = -6.8828397989e-01, /* 0xbf303361 */
;874:qS4     =  7.7038154006e-02; /* 0x3d9dc62e */
;875:
;876:/*
;877:==================
;878:acos
;879:==================
;880:*/
;881:double acos( double x )
;882:{
LABELV $197
line 886
;883:  float z, subp, p, q, r, w, s, c, df;
;884:  int hx, ix;
;885:
;886:  GET_FLOAT_WORD( hx, x );
ADDRLP4 44
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 44
INDIRU4
CVUI4 4
ASGNI4
LABELV $198
line 887
;887:  ix = hx & 0x7fffffff;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 889
;888:
;889:  if( ix == 0x3f800000 )
ADDRLP4 12
INDIRI4
CNSTI4 1065353216
NEI4 $200
line 890
;890:  {   // |x|==1
line 891
;891:    if( hx > 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $202
line 892
;892:      return 0.0; // acos(1) = 0
CNSTF4 0
RETF4
ADDRGP4 $196
JUMPV
LABELV $202
line 894
;893:    else
;894:      return pi + (float)2.0 * pio2_lo; // acos(-1)= pi
ADDRGP4 pi
INDIRF4
CNSTF4 1073741824
ADDRGP4 pio2_lo
INDIRF4
MULF4
ADDF4
RETF4
ADDRGP4 $196
JUMPV
LABELV $200
line 896
;895:  }
;896:  else if( ix > 0x3f800000 )
ADDRLP4 12
INDIRI4
CNSTI4 1065353216
LEI4 $204
line 897
;897:  { // |x| >= 1
line 898
;898:    return (x-x)/(x-x);   // acos(|x|>1) is NaN
ADDRLP4 44
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 48
ADDRLP4 44
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
ASGNF4
ADDRLP4 48
INDIRF4
ADDRLP4 48
INDIRF4
DIVF4
RETF4
ADDRGP4 $196
JUMPV
LABELV $204
line 901
;899:  }
;900:
;901:  if( ix < 0x3f000000 )
ADDRLP4 12
INDIRI4
CNSTI4 1056964608
GEI4 $206
line 902
;902:  { // |x| < 0.5
line 903
;903:    if( ix <= 0x23000000 )
ADDRLP4 12
INDIRI4
CNSTI4 587202560
GTI4 $208
line 904
;904:      return pio2_hi + pio2_lo;//if|x|<2**-57
ADDRGP4 pio2_hi
INDIRF4
ADDRGP4 pio2_lo
INDIRF4
ADDF4
RETF4
ADDRGP4 $196
JUMPV
LABELV $208
line 906
;905:
;906:    z = x * x;
ADDRLP4 44
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 44
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
line 907
;907:    subp = pS3 + z * ( pS4 + z * pS5 );
ADDRLP4 16
ADDRGP4 pS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS5
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
ASGNF4
line 909
;908:    // chop up expression to keep mac register based stack happy
;909:    p = z * ( pS0 + z * ( pS1 + z * ( pS2 + z * subp ) ) );
ADDRLP4 20
ADDRLP4 4
INDIRF4
ADDRGP4 pS0
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ASGNF4
line 910
;910:    q = 1.0 + z * ( qS1 + z * ( qS2 + z * ( qS3 + z * qS4 ) ) );
ADDRLP4 24
ADDRLP4 4
INDIRF4
ADDRGP4 qS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS4
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 911
;911:    r = p / q;
ADDRLP4 28
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
DIVF4
ASGNF4
line 912
;912:    return pio2_hi - ( x - ( pio2_lo - x * r ) );
ADDRLP4 60
ADDRFP4 0
INDIRF4
ASGNF4
ADDRGP4 pio2_hi
INDIRF4
ADDRLP4 60
INDIRF4
ADDRGP4 pio2_lo
INDIRF4
ADDRLP4 60
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
SUBF4
SUBF4
SUBF4
RETF4
ADDRGP4 $196
JUMPV
LABELV $206
line 914
;913:  }
;914:  else if( hx < 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $210
line 915
;915:  {   // x < -0.5
line 916
;916:    z = ( 1.0 + x ) * (float)0.5;
ADDRLP4 4
CNSTF4 1056964608
ADDRFP4 0
INDIRF4
CNSTF4 1065353216
ADDF4
MULF4
ASGNF4
line 917
;917:    subp = pS3 + z * ( pS4 + z * pS5 );
ADDRLP4 16
ADDRGP4 pS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS5
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
ASGNF4
line 919
;918:    // chop up expression to keep mac register based stack happy
;919:    p = z * ( pS0 + z * ( pS1 + z * ( pS2 + z * subp ) ) );
ADDRLP4 20
ADDRLP4 4
INDIRF4
ADDRGP4 pS0
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ASGNF4
line 920
;920:    q = 1.0 + z * ( qS1 + z * ( qS2 + z * ( qS3 + z * qS4 ) ) );
ADDRLP4 24
ADDRLP4 4
INDIRF4
ADDRGP4 qS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS4
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 921
;921:    s = sqrt( z );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 56
INDIRF4
ASGNF4
line 922
;922:    r = p / q;
ADDRLP4 28
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
DIVF4
ASGNF4
line 923
;923:    w = r * s - pio2_lo;
ADDRLP4 36
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDRGP4 pio2_lo
INDIRF4
SUBF4
ASGNF4
line 924
;924:    return pi - (float)2.0 * ( s + w );
ADDRGP4 pi
INDIRF4
CNSTF4 1073741824
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
ADDF4
MULF4
SUBF4
RETF4
ADDRGP4 $196
JUMPV
LABELV $210
line 927
;925:  }
;926:  else
;927:  {     // x > 0.5
line 929
;928:    int idf;
;929:    z = ( 1.0 - x ) * (float)0.5;
ADDRLP4 4
CNSTF4 1056964608
CNSTF4 1065353216
ADDRFP4 0
INDIRF4
SUBF4
MULF4
ASGNF4
line 930
;930:    s = sqrt( z );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 48
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 48
INDIRF4
ASGNF4
line 931
;931:    df = s;
ADDRLP4 8
ADDRLP4 32
INDIRF4
ASGNF4
LABELV $212
line 932
;932:    GET_FLOAT_WORD( idf, df );
ADDRLP4 52
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 44
ADDRLP4 52
INDIRU4
CVUI4 4
ASGNI4
LABELV $213
LABELV $215
line 933
;933:    SET_FLOAT_WORD( df, idf & 0xfffff000 );
ADDRLP4 52
ADDRLP4 44
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 8
ADDRLP4 52
INDIRF4
ASGNF4
LABELV $216
line 934
;934:    c  = ( z - df * df ) / ( s + df );
ADDRLP4 40
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
SUBF4
ADDRLP4 32
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
DIVF4
ASGNF4
line 935
;935:    subp = pS3 + z * ( pS4 + z * pS5 );
ADDRLP4 16
ADDRGP4 pS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS5
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
ASGNF4
line 937
;936:    // chop up expression to keep mac register based stack happy
;937:    p = z * ( pS0 + z * ( pS1 + z * ( pS2 + z * subp ) ) );
ADDRLP4 20
ADDRLP4 4
INDIRF4
ADDRGP4 pS0
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ASGNF4
line 938
;938:    q = 1.0 + z * ( qS1 + z * ( qS2 + z * ( qS3 + z * qS4 ) ) );
ADDRLP4 24
ADDRLP4 4
INDIRF4
ADDRGP4 qS1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 qS4
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 939
;939:    r = p / q;
ADDRLP4 28
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
DIVF4
ASGNF4
line 940
;940:    w = r * s + c;
ADDRLP4 36
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDRLP4 40
INDIRF4
ADDF4
ASGNF4
line 941
;941:    return (double)( 2.0 * ( df + w ) );
CNSTF4 1073741824
ADDRLP4 8
INDIRF4
ADDRLP4 36
INDIRF4
ADDF4
MULF4
RETF4
LABELV $196
endproc acos 68 4
lit
align 4
LABELV bp
byte 4 1065353216
byte 4 1069547520
align 4
LABELV dp_h
byte 4 0
byte 4 1058390016
align 4
LABELV dp_l
byte 4 0
byte 4 902942684
align 4
LABELV huge
byte 4 1900671690
align 4
LABELV tiny
byte 4 228737632
align 4
LABELV zero
byte 4 0
align 4
LABELV one
byte 4 1065353216
align 4
LABELV two
byte 4 1073741824
align 4
LABELV two24
byte 4 1266679808
align 4
LABELV two25
byte 4 1275068416
align 4
LABELV twom25
byte 4 855638016
align 4
LABELV L1
byte 4 1058642330
align 4
LABELV L2
byte 4 1054567863
align 4
LABELV L3
byte 4 1051372203
align 4
LABELV L4
byte 4 1049338629
align 4
LABELV L5
byte 4 1047278165
align 4
LABELV L6
byte 4 1045688642
align 4
LABELV P1
byte 4 1042983595
align 4
LABELV P2
byte 4 3140881249
align 4
LABELV P3
byte 4 948613973
align 4
LABELV P4
byte 4 3051219470
align 4
LABELV P5
byte 4 858897228
align 4
LABELV lg2
byte 4 1060205080
align 4
LABELV lg2_h
byte 4 1060205056
align 4
LABELV lg2_l
byte 4 901758604
align 4
LABELV ovt
byte 4 859351612
align 4
LABELV cp
byte 4 1064712271
align 4
LABELV cp_h
byte 4 1064712192
align 4
LABELV cp_l
byte 4 916308896
align 4
LABELV ivln2
byte 4 1069066811
align 4
LABELV ivln2_h
byte 4 1069066752
align 4
LABELV ivln2_l
byte 4 921478512
code
proc copysignf 12 0
line 987
;942:  }
;943:}
;944:
;945://pow
;946:static const float
;947:bp[ ]   = { 1.0, 1.5, },
;948:dp_h[ ] = { 0.0, 5.84960938e-01, }, /* 0x3f15c000 */
;949:dp_l[ ] = { 0.0, 1.56322085e-06, }, /* 0x35d1cfdc */
;950:huge    =  1.0e+30,
;951:tiny    =  1.0e-30,
;952:zero    =  0.0,
;953:one     =  1.0,
;954:two     =  2.0,
;955:two24   =  16777216.0,  /* 0x4b800000 */
;956:two25   =  3.355443200e+07, /* 0x4c000000 */
;957:twom25  =  2.9802322388e-08,  /* 0x33000000 */
;958:  /* poly coefs for (3/2)*(log(x)-2s-2/3*s**3 */
;959:L1      =  6.0000002384e-01, /* 0x3f19999a */
;960:L2      =  4.2857143283e-01, /* 0x3edb6db7 */
;961:L3      =  3.3333334327e-01, /* 0x3eaaaaab */
;962:L4      =  2.7272811532e-01, /* 0x3e8ba305 */
;963:L5      =  2.3066075146e-01, /* 0x3e6c3255 */
;964:L6      =  2.0697501302e-01, /* 0x3e53f142 */
;965:P1      =  1.6666667163e-01, /* 0x3e2aaaab */
;966:P2      = -2.7777778450e-03, /* 0xbb360b61 */
;967:P3      =  6.6137559770e-05, /* 0x388ab355 */
;968:P4      = -1.6533901999e-06, /* 0xb5ddea0e */
;969:P5      =  4.1381369442e-08, /* 0x3331bb4c */
;970:lg2     =  6.9314718246e-01, /* 0x3f317218 */
;971:lg2_h   =  6.93145752e-01, /* 0x3f317200 */
;972:lg2_l   =  1.42860654e-06, /* 0x35bfbe8c */
;973:ovt     =  4.2995665694e-08, /* -(128-log2(ovfl+.5ulp)) */
;974:cp      =  9.6179670095e-01, /* 0x3f76384f =2/(3ln2) */
;975:cp_h    =  9.6179199219e-01, /* 0x3f763800 =head of cp */
;976:cp_l    =  4.7017383622e-06, /* 0x369dc3a0 =tail of cp_h */
;977:ivln2   =  1.4426950216e+00, /* 0x3fb8aa3b =1/ln2 */
;978:ivln2_h =  1.4426879883e+00, /* 0x3fb8aa00 =16b 1/ln2*/
;979:ivln2_l =  7.0526075433e-06; /* 0x36eca570 =1/ln2 tail*/
;980:
;981:/*
;982:==================
;983:copysignf
;984:==================
;985:*/
;986:static float copysignf( float x, float y )
;987:{
LABELV $219
line 990
;988:  unsigned int ix, iy;
;989:
;990:  GET_FLOAT_WORD( ix, x );
ADDRLP4 8
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRU4
ASGNU4
LABELV $220
LABELV $222
line 991
;991:  GET_FLOAT_WORD( iy, y );
ADDRLP4 8
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 8
INDIRU4
ASGNU4
LABELV $223
LABELV $225
line 992
;992:  SET_FLOAT_WORD( x, ( ix & 0x7fffffff ) | ( iy & 0x80000000 ) );
ADDRLP4 8
ADDRLP4 0
INDIRU4
CNSTU4 2147483647
BANDU4
ADDRLP4 4
INDIRU4
CNSTU4 2147483648
BANDU4
BORU4
ASGNU4
ADDRFP4 0
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $226
line 993
;993:  return x;
ADDRFP4 0
INDIRF4
RETF4
LABELV $218
endproc copysignf 12 0
proc __scalbnf 40 8
line 1002
;994:}
;995:
;996:/*
;997:==================
;998:__scalbnf
;999:==================
;1000:*/
;1001:static float __scalbnf( float x, int n )
;1002:{
LABELV $229
line 1005
;1003:  int k, ix;
;1004:
;1005:  GET_FLOAT_WORD( ix, x );
ADDRLP4 8
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRU4
CVUI4 4
ASGNI4
LABELV $230
line 1007
;1006:
;1007:  k = ( ix & 0x7f800000 ) >> 23;    /* extract exponent */
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2139095040
BANDI4
CNSTI4 23
RSHI4
ASGNI4
line 1009
;1008:
;1009:  if( k == 0 )
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $232
line 1010
;1010:  {       /* 0 or subnormal x */
line 1011
;1011:    if( ( ix & 0x7fffffff ) == 0 )
ADDRLP4 0
INDIRI4
CNSTI4 2147483647
BANDI4
CNSTI4 0
NEI4 $234
line 1012
;1012:      return x; /* +-0 */
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $234
line 1014
;1013:
;1014:    x *= two25;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRGP4 two25
INDIRF4
MULF4
ASGNF4
LABELV $236
line 1015
;1015:    GET_FLOAT_WORD( ix, x );
ADDRLP4 8
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 8
INDIRU4
CVUI4 4
ASGNI4
LABELV $237
line 1016
;1016:    k = ( ( ix & 0x7f800000 ) >> 23 ) - 25;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2139095040
BANDI4
CNSTI4 23
RSHI4
CNSTI4 25
SUBI4
ASGNI4
line 1017
;1017:  }
LABELV $232
line 1018
;1018:  if( k == 0xff )
ADDRLP4 4
INDIRI4
CNSTI4 255
NEI4 $239
line 1019
;1019:    return x+x;    /* NaN or Inf */
ADDRLP4 8
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $239
line 1021
;1020:
;1021:  k = k + n;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 1023
;1022:
;1023:  if( n > 50000 || k > 0xfe )
ADDRFP4 4
INDIRI4
CNSTI4 50000
GTI4 $243
ADDRLP4 4
INDIRI4
CNSTI4 254
LEI4 $241
LABELV $243
line 1024
;1024:    return huge * copysignf( huge, x ); /* overflow  */
ADDRLP4 12
ADDRGP4 huge
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 copysignf
CALLF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $241
line 1025
;1025:  if ( n < -50000 )
ADDRFP4 4
INDIRI4
CNSTI4 -50000
GEI4 $244
line 1026
;1026:    return tiny * copysignf( tiny, x );  /*underflow*/
ADDRLP4 20
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 copysignf
CALLF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $244
line 1027
;1027:  if( k > 0 )        /* normal result */
ADDRLP4 4
INDIRI4
CNSTI4 0
LEI4 $246
line 1028
;1028:  {
LABELV $248
line 1029
;1029:    SET_FLOAT_WORD( x, ( ix & 0x807fffff ) | ( k << 23 ) );
ADDRLP4 28
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 2155872255
BANDU4
ADDRLP4 4
INDIRI4
CNSTI4 23
LSHI4
CVIU4 4
BORU4
ASGNU4
ADDRFP4 0
ADDRLP4 28
INDIRF4
ASGNF4
LABELV $249
line 1030
;1030:    return x;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $246
line 1032
;1031:  }
;1032:  if( k <= -25 )
ADDRLP4 4
INDIRI4
CNSTI4 -25
GTI4 $251
line 1033
;1033:    return tiny * copysignf( tiny, x );  /*underflow*/
ADDRLP4 28
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 copysignf
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
RETF4
ADDRGP4 $228
JUMPV
LABELV $251
line 1035
;1034:
;1035:  k += 25;        /* subnormal result */
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 25
ADDI4
ASGNI4
LABELV $253
line 1036
;1036:  SET_FLOAT_WORD( x, ( ix & 0x807fffff ) | ( k << 23 ) );
ADDRLP4 36
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 2155872255
BANDU4
ADDRLP4 4
INDIRI4
CNSTI4 23
LSHI4
CVIU4 4
BORU4
ASGNU4
ADDRFP4 0
ADDRLP4 36
INDIRF4
ASGNF4
LABELV $254
line 1037
;1037:  return x * twom25;
ADDRFP4 0
INDIRF4
ADDRGP4 twom25
INDIRF4
MULF4
RETF4
LABELV $228
endproc __scalbnf 40 8
export pow
proc pow 180 8
line 1046
;1038:}
;1039:
;1040:/*
;1041:==================
;1042:pow
;1043:==================
;1044:*/
;1045:float pow( float x, float y )
;1046:{
line 1055
;1047:  float z, ax, z_h, z_l, p_h, p_l;
;1048:  float y1, subt1, t1, t2, subr, r, s, t, u, v, w;
;1049:  int i, j, k, yisint, n;
;1050:  int hx, hy, ix, iy, is;
;1051:
;1052:  /*TA: for some reason the Q3 VM goes apeshit when x = 1.0
;1053:        and y > 1.0. Curiously this doesn't happen with gcc
;1054:        hence this hack*/
;1055:  if( x == 1.0 )
ADDRFP4 0
INDIRF4
CNSTF4 1065353216
NEF4 $257
line 1056
;1056:    return x;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $257
LABELV $259
line 1058
;1057:
;1058:  GET_FLOAT_WORD( hx, x );
ADDRLP4 108
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 32
ADDRLP4 108
INDIRU4
CVUI4 4
ASGNI4
LABELV $260
LABELV $262
line 1059
;1059:  GET_FLOAT_WORD( hy, y );
ADDRLP4 108
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 36
ADDRLP4 108
INDIRU4
CVUI4 4
ASGNI4
LABELV $263
line 1060
;1060:  ix = hx & 0x7fffffff;
ADDRLP4 20
ADDRLP4 32
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 1061
;1061:  iy = hy & 0x7fffffff;
ADDRLP4 60
ADDRLP4 36
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 1064
;1062:
;1063:  /* y==zero: x**0 = 1 */
;1064:  if( iy == 0 )
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $265
line 1065
;1065:    return one;
ADDRGP4 one
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $265
line 1068
;1066:
;1067:  /* +-NaN return x+y */
;1068:  if( ix > 0x7f800000 || iy > 0x7f800000 )
ADDRLP4 108
CNSTI4 2139095040
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 108
INDIRI4
GTI4 $269
ADDRLP4 60
INDIRI4
ADDRLP4 108
INDIRI4
LEI4 $267
LABELV $269
line 1069
;1069:    return x + y;
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRF4
ADDF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $267
line 1076
;1070:
;1071:  /* determine if y is an odd int when x < 0
;1072:   * yisint = 0 ... y is not an integer
;1073:   * yisint = 1 ... y is an odd int
;1074:   * yisint = 2 ... y is an even int
;1075:   */
;1076:  yisint = 0;
ADDRLP4 80
CNSTI4 0
ASGNI4
line 1077
;1077:  if( hx < 0 )
ADDRLP4 32
INDIRI4
CNSTI4 0
GEI4 $270
line 1078
;1078:  {
line 1079
;1079:    if( iy >= 0x4b800000 )
ADDRLP4 60
INDIRI4
CNSTI4 1266679808
LTI4 $272
line 1080
;1080:      yisint = 2; /* even integer y */
ADDRLP4 80
CNSTI4 2
ASGNI4
ADDRGP4 $273
JUMPV
LABELV $272
line 1081
;1081:    else if( iy >= 0x3f800000 )
ADDRLP4 60
INDIRI4
CNSTI4 1065353216
LTI4 $274
line 1082
;1082:    {
line 1083
;1083:      k = ( iy >> 23 ) - 0x7f;     /* exponent */
ADDRLP4 28
ADDRLP4 60
INDIRI4
CNSTI4 23
RSHI4
CNSTI4 127
SUBI4
ASGNI4
line 1084
;1084:      j = iy >> ( 23 - k );
ADDRLP4 12
ADDRLP4 60
INDIRI4
CNSTI4 23
ADDRLP4 28
INDIRI4
SUBI4
RSHI4
ASGNI4
line 1085
;1085:      if( ( j << ( 23 - k ) ) == iy )
ADDRLP4 12
INDIRI4
CNSTI4 23
ADDRLP4 28
INDIRI4
SUBI4
LSHI4
ADDRLP4 60
INDIRI4
NEI4 $276
line 1086
;1086:        yisint = 2 - ( j & 1 );
ADDRLP4 80
CNSTI4 2
ADDRLP4 12
INDIRI4
CNSTI4 1
BANDI4
SUBI4
ASGNI4
LABELV $276
line 1087
;1087:    }
LABELV $274
LABELV $273
line 1088
;1088:  }
LABELV $270
line 1091
;1089:
;1090:  /* special value of y */
;1091:  if( iy == 0x7f800000 )
ADDRLP4 60
INDIRI4
CNSTI4 2139095040
NEI4 $278
line 1092
;1092:  { /* y is +-inf */
line 1093
;1093:    if( ix == 0x3f800000 )
ADDRLP4 20
INDIRI4
CNSTI4 1065353216
NEI4 $280
line 1094
;1094:      return  y - y;  /* inf**+-1 is NaN */
ADDRLP4 112
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 112
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $280
line 1095
;1095:    else if( ix > 0x3f800000 )/* (|x|>1)**+-inf = inf,0 */
ADDRLP4 20
INDIRI4
CNSTI4 1065353216
LEI4 $282
line 1096
;1096:      return ( hy >= 0 ) ? y : zero;
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $285
ADDRLP4 116
ADDRFP4 4
INDIRF4
ASGNF4
ADDRGP4 $286
JUMPV
LABELV $285
ADDRLP4 116
ADDRGP4 zero
INDIRF4
ASGNF4
LABELV $286
ADDRLP4 116
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $282
line 1098
;1097:    else      /* (|x|<1)**-,+inf = inf,0 */
;1098:      return ( hy < 0 ) ? -y : zero;
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $288
ADDRLP4 120
ADDRFP4 4
INDIRF4
NEGF4
ASGNF4
ADDRGP4 $289
JUMPV
LABELV $288
ADDRLP4 120
ADDRGP4 zero
INDIRF4
ASGNF4
LABELV $289
ADDRLP4 120
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $278
line 1101
;1099:  }
;1100:
;1101:  if( iy == 0x3f800000 )
ADDRLP4 60
INDIRI4
CNSTI4 1065353216
NEI4 $290
line 1102
;1102:  {  /* y is  +-1 */
line 1103
;1103:    if( hy < 0 )
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $292
line 1104
;1104:      return one / x;
ADDRGP4 one
INDIRF4
ADDRFP4 0
INDIRF4
DIVF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $292
line 1106
;1105:    else
;1106:      return x;
ADDRFP4 0
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $290
line 1109
;1107:  }
;1108:
;1109:  if( hy == 0x40000000 )
ADDRLP4 36
INDIRI4
CNSTI4 1073741824
NEI4 $294
line 1110
;1110:    return x * x; /* y is  2 */
ADDRLP4 112
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 112
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $294
line 1112
;1111:
;1112:  if( hy == 0x3f000000 )
ADDRLP4 36
INDIRI4
CNSTI4 1056964608
NEI4 $296
line 1113
;1113:  {  /* y is  0.5 */
line 1114
;1114:    if( hx >= 0 ) /* x >= +0 */
ADDRLP4 32
INDIRI4
CNSTI4 0
LTI4 $298
line 1115
;1115:      return sqrt( x );
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 116
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 116
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $298
line 1116
;1116:  }
LABELV $296
line 1118
;1117:
;1118:  ax = fabs( x );
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 116
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 116
INDIRF4
ASGNF4
line 1121
;1119:
;1120:  /* special value of x */
;1121:  if( ix == 0x7f800000 || ix == 0 || ix == 0x3f800000 )
ADDRLP4 20
INDIRI4
CNSTI4 2139095040
EQI4 $303
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $303
ADDRLP4 20
INDIRI4
CNSTI4 1065353216
NEI4 $300
LABELV $303
line 1122
;1122:  {
line 1123
;1123:    z = ax;     /*x is +-0,+-inf,+-1*/
ADDRLP4 8
ADDRLP4 48
INDIRF4
ASGNF4
line 1124
;1124:    if( hy < 0 )
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $304
line 1125
;1125:      z = one / z; /* z = (1/|x|) */
ADDRLP4 8
ADDRGP4 one
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ASGNF4
LABELV $304
line 1126
;1126:    if( hx < 0 )
ADDRLP4 32
INDIRI4
CNSTI4 0
GEI4 $306
line 1127
;1127:    {
line 1128
;1128:      if( ( ( ix - 0x3f800000 ) | yisint ) == 0 )
ADDRLP4 20
INDIRI4
CNSTI4 1065353216
SUBI4
ADDRLP4 80
INDIRI4
BORI4
CNSTI4 0
NEI4 $308
line 1129
;1129:        z = ( z - z ) / ( z - z ); /* (-1)**non-int is NaN */
ADDRLP4 128
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8
ADDRLP4 128
INDIRF4
ADDRLP4 128
INDIRF4
DIVF4
ASGNF4
ADDRGP4 $309
JUMPV
LABELV $308
line 1130
;1130:      else if( yisint == 1 )
ADDRLP4 80
INDIRI4
CNSTI4 1
NEI4 $310
line 1131
;1131:        z = -z;   /* (x<0)**odd = -(|x|**odd) */
ADDRLP4 8
ADDRLP4 8
INDIRF4
NEGF4
ASGNF4
LABELV $310
LABELV $309
line 1132
;1132:    }
LABELV $306
line 1134
;1133:
;1134:    return z;
ADDRLP4 8
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $300
line 1138
;1135:  }
;1136:
;1137:  /* (x<0)**(non-int) is NaN */
;1138:  if( ( ( ( (unsigned int)hx >> 31 ) - 1 ) | yisint ) == 0 )
ADDRLP4 32
INDIRI4
CVIU4 4
CNSTI4 31
RSHU4
CNSTU4 1
SUBU4
ADDRLP4 80
INDIRI4
CVIU4 4
BORU4
CNSTU4 0
NEU4 $312
line 1139
;1139:    return ( x - x ) / ( x - x );
ADDRLP4 124
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 128
ADDRLP4 124
INDIRF4
ADDRLP4 124
INDIRF4
SUBF4
ASGNF4
ADDRLP4 128
INDIRF4
ADDRLP4 128
INDIRF4
DIVF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $312
line 1142
;1140:
;1141:  /* |y| is huge */
;1142:  if( iy > 0x4d000000 )
ADDRLP4 60
INDIRI4
CNSTI4 1291845632
LEI4 $314
line 1143
;1143:  { /* if |y| > 2**27 */
line 1145
;1144:    /* over/underflow if x is not close to one */
;1145:    if( ix < 0x3f7ffff8 )
ADDRLP4 20
INDIRI4
CNSTI4 1065353208
GEI4 $316
line 1146
;1146:      return ( hy < 0 ) ? huge * huge : tiny * tiny;
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $319
ADDRLP4 136
ADDRGP4 huge
INDIRF4
ASGNF4
ADDRLP4 132
ADDRLP4 136
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ASGNF4
ADDRGP4 $320
JUMPV
LABELV $319
ADDRLP4 140
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 132
ADDRLP4 140
INDIRF4
ADDRLP4 140
INDIRF4
MULF4
ASGNF4
LABELV $320
ADDRLP4 132
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $316
line 1148
;1147:
;1148:    if( ix > 0x3f800007 )
ADDRLP4 20
INDIRI4
CNSTI4 1065353223
LEI4 $321
line 1149
;1149:      return ( hy > 0 ) ? huge * huge : tiny * tiny;
ADDRLP4 36
INDIRI4
CNSTI4 0
LEI4 $324
ADDRLP4 148
ADDRGP4 huge
INDIRF4
ASGNF4
ADDRLP4 144
ADDRLP4 148
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
ADDRGP4 $325
JUMPV
LABELV $324
ADDRLP4 152
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 144
ADDRLP4 152
INDIRF4
ADDRLP4 152
INDIRF4
MULF4
ASGNF4
LABELV $325
ADDRLP4 144
INDIRF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $321
line 1152
;1150:  /* now |1-x| is tiny <= 2**-20, suffice to compute
;1151:     log(x) by x-x^2/2+x^3/3-x^4/4 */
;1152:    t = x - 1;    /* t has 20 trailing zeros */
ADDRLP4 4
ADDRFP4 0
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 1153
;1153:    w = ( t * t ) * ( (float)0.5 - t * ( (float)0.333333333333 - t * (float)0.25 ) );
ADDRLP4 76
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1056964608
ADDRLP4 4
INDIRF4
CNSTF4 1051372203
CNSTF4 1048576000
ADDRLP4 4
INDIRF4
MULF4
SUBF4
MULF4
SUBF4
MULF4
ASGNF4
line 1154
;1154:    u = ivln2_h * t;  /* ivln2_h has 16 sig. bits */
ADDRLP4 52
ADDRGP4 ivln2_h
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1155
;1155:    v = t * ivln2_l - w * ivln2;
ADDRLP4 56
ADDRLP4 4
INDIRF4
ADDRGP4 ivln2_l
INDIRF4
MULF4
ADDRLP4 76
INDIRF4
ADDRGP4 ivln2
INDIRF4
MULF4
SUBF4
ASGNF4
line 1156
;1156:    t1 = u + v;
ADDRLP4 16
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
ADDF4
ASGNF4
LABELV $326
line 1157
;1157:    GET_FLOAT_WORD( is, t1 );
ADDRLP4 160
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 160
INDIRU4
CVUI4 4
ASGNI4
LABELV $327
LABELV $329
line 1158
;1158:    SET_FLOAT_WORD( t1, is & 0xfffff000 );
ADDRLP4 160
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 16
ADDRLP4 160
INDIRF4
ASGNF4
LABELV $330
line 1159
;1159:    t2 = v - ( t1 - u );
ADDRLP4 92
ADDRLP4 56
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1160
;1160:  }
ADDRGP4 $315
JUMPV
LABELV $314
line 1162
;1161:  else
;1162:  {
line 1164
;1163:    float s2, s_h, s_l, t_h, t_l;
;1164:    n = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 1166
;1165:    /* take care subnormal number */
;1166:    if( ix < 0x00800000 )
ADDRLP4 20
INDIRI4
CNSTI4 8388608
GEI4 $332
line 1167
;1167:    {
line 1168
;1168:      ax *= two24;
ADDRLP4 48
ADDRLP4 48
INDIRF4
ADDRGP4 two24
INDIRF4
MULF4
ASGNF4
line 1169
;1169:      n -= 24;
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 24
SUBI4
ASGNI4
LABELV $334
line 1170
;1170:      GET_FLOAT_WORD( ix, ax );
ADDRLP4 152
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 20
ADDRLP4 152
INDIRU4
CVUI4 4
ASGNI4
LABELV $335
line 1171
;1171:    }
LABELV $332
line 1173
;1172:
;1173:    n  += ( ( ix ) >> 23 ) - 0x7f;
ADDRLP4 44
ADDRLP4 44
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 23
RSHI4
CNSTI4 127
SUBI4
ADDI4
ASGNI4
line 1174
;1174:    j  = ix & 0x007fffff;
ADDRLP4 12
ADDRLP4 20
INDIRI4
CNSTI4 8388607
BANDI4
ASGNI4
line 1177
;1175:
;1176:    /* determine interval */
;1177:    ix = j | 0x3f800000;    /* normalize ix */
ADDRLP4 20
ADDRLP4 12
INDIRI4
CNSTI4 1065353216
BORI4
ASGNI4
line 1178
;1178:    if( j <= 0x1cc471 )
ADDRLP4 12
INDIRI4
CNSTI4 1885297
GTI4 $337
line 1179
;1179:      k = 0;  /* |x|<sqrt(3/2) */
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRGP4 $338
JUMPV
LABELV $337
line 1180
;1180:    else if( j < 0x5db3d7 )
ADDRLP4 12
INDIRI4
CNSTI4 6140887
GEI4 $339
line 1181
;1181:      k = 1;  /* |x|<sqrt(3)   */
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $340
JUMPV
LABELV $339
line 1183
;1182:    else
;1183:    {
line 1184
;1184:      k = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 1185
;1185:      n += 1;
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1186
;1186:      ix -= 0x00800000;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 8388608
SUBI4
ASGNI4
line 1187
;1187:    }
LABELV $340
LABELV $338
LABELV $341
line 1188
;1188:    SET_FLOAT_WORD( ax, ix );
ADDRLP4 152
ADDRLP4 20
INDIRI4
CVIU4 4
ASGNU4
ADDRLP4 48
ADDRLP4 152
INDIRF4
ASGNF4
LABELV $342
line 1191
;1189:
;1190:    /* compute s = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */
;1191:    u = ax - bp[ k ];   /* bp[0]=1.0, bp[1]=1.5 */
ADDRLP4 52
ADDRLP4 48
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 bp
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1192
;1192:    v = one / ( ax + bp[ k ] );
ADDRLP4 56
ADDRGP4 one
INDIRF4
ADDRLP4 48
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 bp
ADDP4
INDIRF4
ADDF4
DIVF4
ASGNF4
line 1193
;1193:    s = u * v;
ADDRLP4 64
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ASGNF4
line 1194
;1194:    s_h = s;
ADDRLP4 136
ADDRLP4 64
INDIRF4
ASGNF4
LABELV $344
line 1195
;1195:    GET_FLOAT_WORD( is, s_h );
ADDRLP4 152
ADDRLP4 136
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 152
INDIRU4
CVUI4 4
ASGNI4
LABELV $345
LABELV $347
line 1196
;1196:    SET_FLOAT_WORD( s_h, is & 0xfffff000 );
ADDRLP4 152
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 136
ADDRLP4 152
INDIRF4
ASGNF4
LABELV $348
LABELV $350
line 1198
;1197:    /* t_h=ax+bp[k] High */
;1198:    SET_FLOAT_WORD( t_h, ( ( ix >> 1 ) | 0x20000000 ) + 0x0040000 + ( k << 21 ) );
ADDRLP4 152
ADDRLP4 20
INDIRI4
CNSTI4 1
RSHI4
CNSTI4 536870912
BORI4
CNSTI4 262144
ADDI4
ADDRLP4 28
INDIRI4
CNSTI4 21
LSHI4
ADDI4
CVIU4 4
ASGNU4
ADDRLP4 132
ADDRLP4 152
INDIRF4
ASGNF4
LABELV $351
line 1199
;1199:    t_l = ax - ( t_h - bp[ k ] );
ADDRLP4 144
ADDRLP4 48
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 bp
ADDP4
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1200
;1200:    s_l = v * ( ( u - s_h * t_h ) - s_h * t_l );
ADDRLP4 148
ADDRLP4 56
INDIRF4
ADDRLP4 52
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 132
INDIRF4
MULF4
SUBF4
ADDRLP4 136
INDIRF4
ADDRLP4 144
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 1202
;1201:    /* compute log(ax) */
;1202:    s2 = s * s;
ADDRLP4 140
ADDRLP4 64
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ASGNF4
line 1203
;1203:    subr = L3 + s2 * ( L4 + s2 * ( L5 + s2 * L6 ) );
ADDRLP4 104
ADDRGP4 L3
INDIRF4
ADDRLP4 140
INDIRF4
ADDRGP4 L4
INDIRF4
ADDRLP4 140
INDIRF4
ADDRGP4 L5
INDIRF4
ADDRLP4 140
INDIRF4
ADDRGP4 L6
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1205
;1204:    // chop up expression to keep mac register based stack happy
;1205:    r = s2 * s2 * ( L1 + s2 * ( L2 + s2 * subr ) );
ADDRLP4 72
ADDRLP4 140
INDIRF4
ADDRLP4 140
INDIRF4
MULF4
ADDRGP4 L1
INDIRF4
ADDRLP4 140
INDIRF4
ADDRGP4 L2
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 104
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
ASGNF4
line 1206
;1206:    r += s_l * ( s_h + s );
ADDRLP4 72
ADDRLP4 72
INDIRF4
ADDRLP4 148
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 64
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1207
;1207:    s2  = s_h * s_h;
ADDRLP4 140
ADDRLP4 136
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ASGNF4
line 1208
;1208:    t_h = (float)3.0 + s2 + r;
ADDRLP4 132
ADDRLP4 140
INDIRF4
CNSTF4 1077936128
ADDF4
ADDRLP4 72
INDIRF4
ADDF4
ASGNF4
LABELV $353
line 1209
;1209:    GET_FLOAT_WORD( is, t_h );
ADDRLP4 172
ADDRLP4 132
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 172
INDIRU4
CVUI4 4
ASGNI4
LABELV $354
LABELV $356
line 1210
;1210:    SET_FLOAT_WORD( t_h, is & 0xfffff000 );
ADDRLP4 172
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 132
ADDRLP4 172
INDIRF4
ASGNF4
LABELV $357
line 1211
;1211:    t_l = r - ( ( t_h - (float)3.0 ) - s2 );
ADDRLP4 144
ADDRLP4 72
INDIRF4
ADDRLP4 132
INDIRF4
CNSTF4 1077936128
SUBF4
ADDRLP4 140
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1213
;1212:    /* u+v = s*(1+...) */
;1213:    u = s_h * t_h;
ADDRLP4 52
ADDRLP4 136
INDIRF4
ADDRLP4 132
INDIRF4
MULF4
ASGNF4
line 1214
;1214:    v = s_l * t_h + t_l * s;
ADDRLP4 56
ADDRLP4 148
INDIRF4
ADDRLP4 132
INDIRF4
MULF4
ADDRLP4 144
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
line 1216
;1215:    /* 2/(3log2)*(s+...) */
;1216:    p_h = u + v;
ADDRLP4 24
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
ADDF4
ASGNF4
LABELV $359
line 1217
;1217:    GET_FLOAT_WORD( is, p_h );
ADDRLP4 172
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 172
INDIRU4
CVUI4 4
ASGNI4
LABELV $360
LABELV $362
line 1218
;1218:    SET_FLOAT_WORD( p_h, is & 0xfffff000 );
ADDRLP4 172
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 24
ADDRLP4 172
INDIRF4
ASGNF4
LABELV $363
line 1219
;1219:    p_l = v - ( p_h - u );
ADDRLP4 68
ADDRLP4 56
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1220
;1220:    z_h = cp_h * p_h;   /* cp_h+cp_l = 2/(3*log2) */
ADDRLP4 96
ADDRGP4 cp_h
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 1221
;1221:    z_l = cp_l * p_h + p_l * cp + dp_l[ k ];
ADDRLP4 100
ADDRGP4 cp_l
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 68
INDIRF4
ADDRGP4 cp
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 dp_l
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1223
;1222:    /* log2(ax) = (s+..)*2/(3*log2) = n + dp_h + z_h + z_l */
;1223:    t = (float)n;
ADDRLP4 4
ADDRLP4 44
INDIRI4
CVIF4 4
ASGNF4
line 1224
;1224:    t1 = ( ( ( z_h + z_l ) + dp_h[ k ] ) + t );
ADDRLP4 16
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRF4
ADDF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 dp_h
ADDP4
INDIRF4
ADDF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
LABELV $365
line 1225
;1225:    GET_FLOAT_WORD( is, t1 );
ADDRLP4 172
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 172
INDIRU4
CVUI4 4
ASGNI4
LABELV $366
LABELV $368
line 1226
;1226:    SET_FLOAT_WORD( t1, is & 0xfffff000 );
ADDRLP4 172
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 16
ADDRLP4 172
INDIRF4
ASGNF4
LABELV $369
line 1227
;1227:    t2 = z_l - ( ( ( t1 - t ) - dp_h[ k ] ) - z_h );
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 dp_h
ADDP4
INDIRF4
SUBF4
ADDRLP4 96
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1228
;1228:  }
LABELV $315
line 1230
;1229:
;1230:  s = one; /* s (sign of result -ve**odd) = -1 else = 1 */
ADDRLP4 64
ADDRGP4 one
INDIRF4
ASGNF4
line 1231
;1231:  if( ( ( ( (unsigned int)hx >> 31 ) - 1 ) | ( yisint - 1 ) ) == 0 )
ADDRLP4 32
INDIRI4
CVIU4 4
CNSTI4 31
RSHU4
CNSTU4 1
SUBU4
ADDRLP4 80
INDIRI4
CNSTI4 1
SUBI4
CVIU4 4
BORU4
CNSTU4 0
NEU4 $371
line 1232
;1232:    s = -one; /* (-ve)**(odd int) */
ADDRLP4 64
ADDRGP4 one
INDIRF4
NEGF4
ASGNF4
LABELV $371
LABELV $373
line 1235
;1233:
;1234:  /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
;1235:  GET_FLOAT_WORD( is, y );
ADDRLP4 132
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 132
INDIRU4
CVUI4 4
ASGNI4
LABELV $374
LABELV $376
line 1236
;1236:  SET_FLOAT_WORD( y1, is & 0xfffff000 );
ADDRLP4 132
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 40
ADDRLP4 132
INDIRF4
ASGNF4
LABELV $377
line 1237
;1237:  p_l = ( y - y1 ) * t1 + y * t2;
ADDRLP4 132
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 68
ADDRLP4 132
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 132
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
line 1238
;1238:  p_h = y1 * t1;
ADDRLP4 24
ADDRLP4 40
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ASGNF4
line 1239
;1239:  z = p_l + p_h;
ADDRLP4 8
ADDRLP4 68
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
LABELV $379
line 1240
;1240:  GET_FLOAT_WORD( j, z );
ADDRLP4 136
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 136
INDIRU4
CVUI4 4
ASGNI4
LABELV $380
line 1242
;1241:
;1242:  if( j > 0x43000000 )       /* if z > 128 */
ADDRLP4 12
INDIRI4
CNSTI4 1124073472
LEI4 $382
line 1243
;1243:    return s * huge * huge;       /* overflow */
ADDRLP4 136
ADDRGP4 huge
INDIRF4
ASGNF4
ADDRLP4 64
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDRLP4 136
INDIRF4
MULF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $382
line 1244
;1244:  else if( j == 0x43000000 )
ADDRLP4 12
INDIRI4
CNSTI4 1124073472
NEI4 $384
line 1245
;1245:  {     /* if z == 128 */
line 1246
;1246:    if( p_l + ovt > z - p_h )
ADDRLP4 68
INDIRF4
ADDRGP4 ovt
INDIRF4
ADDF4
ADDRLP4 8
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
LEF4 $385
line 1247
;1247:      return s * huge * huge; /* overflow */
ADDRLP4 140
ADDRGP4 huge
INDIRF4
ASGNF4
ADDRLP4 64
INDIRF4
ADDRLP4 140
INDIRF4
MULF4
ADDRLP4 140
INDIRF4
MULF4
RETF4
ADDRGP4 $256
JUMPV
line 1248
;1248:  }
LABELV $384
line 1249
;1249:  else if( ( j & 0x7fffffff ) > 0x43160000 )   /* z <= -150 */
ADDRLP4 12
INDIRI4
CNSTI4 2147483647
BANDI4
CNSTI4 1125515264
LEI4 $388
line 1250
;1250:    return s * tiny * tiny;       /* underflow */
ADDRLP4 140
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 64
INDIRF4
ADDRLP4 140
INDIRF4
MULF4
ADDRLP4 140
INDIRF4
MULF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $388
line 1251
;1251:  else if( (unsigned int)j == 0xc3160000 )
ADDRLP4 12
INDIRI4
CVIU4 4
CNSTU4 3272998912
NEU4 $390
line 1252
;1252:  { /* z == -150 */
line 1253
;1253:    if( p_l <= z - p_h )
ADDRLP4 68
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
GTF4 $392
line 1254
;1254:      return s * tiny * tiny;    /* underflow */
ADDRLP4 144
ADDRGP4 tiny
INDIRF4
ASGNF4
ADDRLP4 64
INDIRF4
ADDRLP4 144
INDIRF4
MULF4
ADDRLP4 144
INDIRF4
MULF4
RETF4
ADDRGP4 $256
JUMPV
LABELV $392
line 1255
;1255:  }
LABELV $390
LABELV $385
line 1260
;1256:
;1257:  /*
;1258:   * compute 2**(p_h+p_l)
;1259:   */
;1260:  i = j & 0x7fffffff;
ADDRLP4 84
ADDRLP4 12
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 1261
;1261:  k = ( i >> 23 ) - 0x7f;
ADDRLP4 28
ADDRLP4 84
INDIRI4
CNSTI4 23
RSHI4
CNSTI4 127
SUBI4
ASGNI4
line 1262
;1262:  n = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 1264
;1263:
;1264:  if( i > 0x3f000000 )
ADDRLP4 84
INDIRI4
CNSTI4 1056964608
LEI4 $394
line 1265
;1265:  {    /* if |z| > 0.5, set n = [z+0.5] */
line 1266
;1266:    n = j + ( 0x00800000 >> ( k + 1 ) );
ADDRLP4 44
ADDRLP4 12
INDIRI4
CNSTI4 8388608
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
RSHI4
ADDI4
ASGNI4
line 1267
;1267:    k = ( ( n & 0x7fffffff ) >> 23 ) - 0x7f;  /* new k for n */
ADDRLP4 28
ADDRLP4 44
INDIRI4
CNSTI4 2147483647
BANDI4
CNSTI4 23
RSHI4
CNSTI4 127
SUBI4
ASGNI4
LABELV $396
line 1268
;1268:    SET_FLOAT_WORD( t, n & ~( 0x007fffff >> k ) );
ADDRLP4 144
ADDRLP4 44
INDIRI4
CNSTI4 8388607
ADDRLP4 28
INDIRI4
RSHI4
BCOMI4
BANDI4
CVIU4 4
ASGNU4
ADDRLP4 4
ADDRLP4 144
INDIRF4
ASGNF4
LABELV $397
line 1269
;1269:    n = ( ( n & 0x007fffff ) | 0x00800000 ) >> ( 23 - k );
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 8388607
BANDI4
CNSTI4 8388608
BORI4
CNSTI4 23
ADDRLP4 28
INDIRI4
SUBI4
RSHI4
ASGNI4
line 1271
;1270:
;1271:    if( j < 0 )
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $399
line 1272
;1272:      n = -n;
ADDRLP4 44
ADDRLP4 44
INDIRI4
NEGI4
ASGNI4
LABELV $399
line 1274
;1273:
;1274:    p_h -= t;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 1275
;1275:  }
LABELV $394
line 1277
;1276:
;1277:  t = p_l + p_h;
ADDRLP4 4
ADDRLP4 68
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
LABELV $401
line 1278
;1278:  GET_FLOAT_WORD( is, t );
ADDRLP4 144
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 144
INDIRU4
CVUI4 4
ASGNI4
LABELV $402
LABELV $404
line 1279
;1279:  SET_FLOAT_WORD( t, is & 0xfffff000 );
ADDRLP4 144
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4294963200
BANDU4
ASGNU4
ADDRLP4 4
ADDRLP4 144
INDIRF4
ASGNF4
LABELV $405
line 1280
;1280:  u = t * lg2_h;
ADDRLP4 52
ADDRLP4 4
INDIRF4
ADDRGP4 lg2_h
INDIRF4
MULF4
ASGNF4
line 1281
;1281:  v = ( p_l - ( t - p_h ) ) * lg2 + t * lg2_l;
ADDRLP4 56
ADDRLP4 68
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
SUBF4
ADDRGP4 lg2
INDIRF4
MULF4
ADDRLP4 4
INDIRF4
ADDRGP4 lg2_l
INDIRF4
MULF4
ADDF4
ASGNF4
line 1282
;1282:  z = u + v;
ADDRLP4 8
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
ADDF4
ASGNF4
line 1283
;1283:  w = v - ( z - u );
ADDRLP4 76
ADDRLP4 56
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
SUBF4
ASGNF4
line 1284
;1284:  t = z * z;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ASGNF4
line 1285
;1285:  subt1 = P3 + t * ( P4 + t * P5 );
ADDRLP4 88
ADDRGP4 P3
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 P4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 P5
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1287
;1286:  // chop up expression to keep mac register based stack happy
;1287:  t1 = z - t * ( P1 + t * ( P2 + t * subt1 ) );
ADDRLP4 16
ADDRLP4 8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 P1
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 P2
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 88
INDIRF4
MULF4
ADDF4
MULF4
ADDF4
MULF4
SUBF4
ASGNF4
line 1288
;1288:  r = ( z * t1 ) / ( t1 - two ) - ( w + z * w );
ADDRLP4 72
ADDRLP4 8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 16
INDIRF4
ADDRGP4 two
INDIRF4
SUBF4
DIVF4
ADDRLP4 76
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 76
INDIRF4
MULF4
ADDF4
SUBF4
ASGNF4
line 1289
;1289:  z = one - ( r - z );
ADDRLP4 8
ADDRGP4 one
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 8
INDIRF4
SUBF4
SUBF4
ASGNF4
LABELV $407
line 1290
;1290:  GET_FLOAT_WORD( j, z );
ADDRLP4 172
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 172
INDIRU4
CVUI4 4
ASGNI4
LABELV $408
line 1291
;1291:  j += (n << 23 );
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 44
INDIRI4
CNSTI4 23
LSHI4
ADDI4
ASGNI4
line 1293
;1292:
;1293:  if( ( j >> 23 ) <= 0 )
ADDRLP4 12
INDIRI4
CNSTI4 23
RSHI4
CNSTI4 0
GTI4 $410
line 1294
;1294:    z = __scalbnf( z, n );  /* subnormal output */
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 __scalbnf
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 172
INDIRF4
ASGNF4
ADDRGP4 $411
JUMPV
LABELV $410
LABELV $412
line 1296
;1295:  else
;1296:    SET_FLOAT_WORD( z, j );
ADDRLP4 176
ADDRLP4 12
INDIRI4
CVIU4 4
ASGNU4
ADDRLP4 8
ADDRLP4 176
INDIRF4
ASGNF4
LABELV $413
LABELV $411
line 1298
;1297:
;1298:  return s * z;
ADDRLP4 64
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
RETF4
LABELV $256
endproc pow 180 8
data
align 4
LABELV randSeed
byte 4 0
export srand
code
proc srand 0 0
line 1306
;1299:}
;1300:
;1301:
;1302:
;1303:static int randSeed = 0;
;1304:
;1305:void srand( unsigned seed )
;1306:{
line 1307
;1307:  randSeed = seed;
ADDRGP4 randSeed
ADDRFP4 0
INDIRU4
CVUI4 4
ASGNI4
line 1308
;1308:}
LABELV $415
endproc srand 0 0
export rand
proc rand 4 0
line 1311
;1309:
;1310:int rand( void )
;1311:{
line 1312
;1312:  randSeed = ( 69069 * randSeed + 1 );
ADDRLP4 0
ADDRGP4 randSeed
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 69069
ADDRLP4 0
INDIRP4
INDIRI4
MULI4
CNSTI4 1
ADDI4
ASGNI4
line 1313
;1313:  return randSeed & 0x7fff;
ADDRGP4 randSeed
INDIRI4
CNSTI4 32767
BANDI4
RETI4
LABELV $416
endproc rand 4 0
export atof
proc atof 32 0
line 1317
;1314:}
;1315:
;1316:double atof( const char *string )
;1317:{
ADDRGP4 $419
JUMPV
LABELV $418
line 1324
;1318:  float sign;
;1319:  float value;
;1320:  int   c;
;1321:
;1322:  // skip whitespace
;1323:  while( *string <= ' ' )
;1324:  {
line 1325
;1325:    if( !*string )
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $421
line 1326
;1326:      return 0;
CNSTF4 0
RETF4
ADDRGP4 $417
JUMPV
LABELV $421
line 1328
;1327:
;1328:    string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1329
;1329:  }
LABELV $419
line 1323
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $418
line 1332
;1330:
;1331:  // check sign
;1332:  switch( *string )
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 43
EQI4 $426
ADDRLP4 12
INDIRI4
CNSTI4 45
EQI4 $427
ADDRGP4 $423
JUMPV
line 1333
;1333:  {
LABELV $426
line 1335
;1334:    case '+':
;1335:      string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1336
;1336:      sign = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 1337
;1337:      break;
ADDRGP4 $424
JUMPV
LABELV $427
line 1340
;1338:
;1339:    case '-':
;1340:      string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1341
;1341:      sign = -1;
ADDRLP4 8
CNSTF4 3212836864
ASGNF4
line 1342
;1342:      break;
ADDRGP4 $424
JUMPV
LABELV $423
line 1345
;1343:
;1344:    default:
;1345:      sign = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 1346
;1346:      break;
LABELV $424
line 1350
;1347:  }
;1348:
;1349:  // read digits
;1350:  value = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 1351
;1351:  c = string[ 0 ];
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1353
;1352:
;1353:  if( c != '.' )
ADDRLP4 0
INDIRI4
CNSTI4 46
EQI4 $428
line 1354
;1354:  {
LABELV $430
line 1356
;1355:    do
;1356:    {
line 1357
;1357:      c = *string++;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1358
;1358:      if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $435
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $433
LABELV $435
line 1359
;1359:        break;
ADDRGP4 $429
JUMPV
LABELV $433
line 1361
;1360:
;1361:      c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1362
;1362:      value = value * 10 + c;
ADDRLP4 4
CNSTF4 1092616192
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1363
;1363:    } while( 1 );
LABELV $431
ADDRGP4 $430
JUMPV
line 1364
;1364:  }
ADDRGP4 $429
JUMPV
LABELV $428
line 1366
;1365:  else
;1366:    string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $429
line 1369
;1367:
;1368:  // check for decimal point
;1369:  if( c == '.' )
ADDRLP4 0
INDIRI4
CNSTI4 46
NEI4 $436
line 1370
;1370:  {
line 1373
;1371:    double fraction;
;1372:
;1373:    fraction = 0.1;
ADDRLP4 20
CNSTF4 1036831949
ASGNF4
LABELV $438
line 1375
;1374:    do
;1375:    {
line 1376
;1376:      c = *string++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1377
;1377:      if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $443
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $441
LABELV $443
line 1378
;1378:        break;
ADDRGP4 $440
JUMPV
LABELV $441
line 1380
;1379:
;1380:      c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1381
;1381:      value += c * fraction;
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 1382
;1382:      fraction *= 0.1;
ADDRLP4 20
CNSTF4 1036831949
ADDRLP4 20
INDIRF4
MULF4
ASGNF4
line 1383
;1383:    } while( 1 );
LABELV $439
ADDRGP4 $438
JUMPV
LABELV $440
line 1385
;1384:
;1385:  }
LABELV $436
line 1389
;1386:
;1387:  // not handling 10e10 notation...
;1388:
;1389:  return value * sign;
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
RETF4
LABELV $417
endproc atof 32 0
export _atof
proc _atof 36 0
line 1393
;1390:}
;1391:
;1392:double _atof( const char **stringPtr )
;1393:{
line 1397
;1394:  const char  *string;
;1395:  float sign;
;1396:  float value;
;1397:  int   c = '0';
ADDRLP4 0
CNSTI4 48
ASGNI4
line 1399
;1398:
;1399:  string = *stringPtr;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $446
JUMPV
LABELV $445
line 1403
;1400:
;1401:  // skip whitespace
;1402:  while( *string <= ' ' )
;1403:  {
line 1404
;1404:    if( !*string )
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $448
line 1405
;1405:    {
line 1406
;1406:      *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 1407
;1407:      return 0;
CNSTF4 0
RETF4
ADDRGP4 $444
JUMPV
LABELV $448
line 1410
;1408:    }
;1409:
;1410:    string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1411
;1411:  }
LABELV $446
line 1402
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $445
line 1414
;1412:
;1413:  // check sign
;1414:  switch( *string )
ADDRLP4 16
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 43
EQI4 $453
ADDRLP4 16
INDIRI4
CNSTI4 45
EQI4 $454
ADDRGP4 $450
JUMPV
line 1415
;1415:  {
LABELV $453
line 1417
;1416:    case '+':
;1417:      string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1418
;1418:      sign = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 1419
;1419:      break;
ADDRGP4 $451
JUMPV
LABELV $454
line 1422
;1420:
;1421:    case '-':
;1422:      string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1423
;1423:      sign = -1;
ADDRLP4 12
CNSTF4 3212836864
ASGNF4
line 1424
;1424:      break;
ADDRGP4 $451
JUMPV
LABELV $450
line 1427
;1425:
;1426:    default:
;1427:      sign = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 1428
;1428:      break;
LABELV $451
line 1432
;1429:  }
;1430:
;1431:  // read digits
;1432:  value = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 1433
;1433:  if( string[ 0 ] != '.' )
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 46
EQI4 $455
line 1434
;1434:  {
LABELV $457
line 1436
;1435:    do
;1436:    {
line 1437
;1437:      c = *string++;
ADDRLP4 24
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1438
;1438:      if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $462
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $460
LABELV $462
line 1439
;1439:        break;
ADDRGP4 $459
JUMPV
LABELV $460
line 1441
;1440:
;1441:      c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1442
;1442:      value = value * 10 + c;
ADDRLP4 8
CNSTF4 1092616192
ADDRLP4 8
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1443
;1443:    } while( 1 );
LABELV $458
ADDRGP4 $457
JUMPV
LABELV $459
line 1444
;1444:  }
LABELV $455
line 1447
;1445:
;1446:  // check for decimal point
;1447:  if( c == '.' )
ADDRLP4 0
INDIRI4
CNSTI4 46
NEI4 $463
line 1448
;1448:  {
line 1451
;1449:    double fraction;
;1450:
;1451:    fraction = 0.1;
ADDRLP4 24
CNSTF4 1036831949
ASGNF4
LABELV $465
line 1453
;1452:    do
;1453:    {
line 1454
;1454:      c = *string++;
ADDRLP4 28
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1455
;1455:      if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $470
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $468
LABELV $470
line 1456
;1456:        break;
ADDRGP4 $467
JUMPV
LABELV $468
line 1458
;1457:
;1458:      c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1459
;1459:      value += c * fraction;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1460
;1460:      fraction *= 0.1;
ADDRLP4 24
CNSTF4 1036831949
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 1461
;1461:    } while( 1 );
LABELV $466
ADDRGP4 $465
JUMPV
LABELV $467
line 1463
;1462:
;1463:  }
LABELV $463
line 1466
;1464:
;1465:  // not handling 10e10 notation...
;1466:  *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 1468
;1467:
;1468:  return value * sign;
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
RETF4
LABELV $444
endproc _atof 36 0
export atoi
proc atoi 28 0
line 1473
;1469:}
;1470:
;1471:
;1472:int atoi( const char *string )
;1473:{
ADDRGP4 $473
JUMPV
LABELV $472
line 1480
;1474:  int   sign;
;1475:  int   value;
;1476:  int   c;
;1477:
;1478:  // skip whitespace
;1479:  while( *string <= ' ' )
;1480:  {
line 1481
;1481:    if( !*string )
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $475
line 1482
;1482:      return 0;
CNSTI4 0
RETI4
ADDRGP4 $471
JUMPV
LABELV $475
line 1484
;1483:
;1484:    string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1485
;1485:  }
LABELV $473
line 1479
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $472
line 1488
;1486:
;1487:  // check sign
;1488:  switch( *string )
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 43
EQI4 $480
ADDRLP4 12
INDIRI4
CNSTI4 45
EQI4 $481
ADDRGP4 $477
JUMPV
line 1489
;1489:  {
LABELV $480
line 1491
;1490:    case '+':
;1491:      string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1492
;1492:      sign = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1493
;1493:      break;
ADDRGP4 $478
JUMPV
LABELV $481
line 1496
;1494:
;1495:    case '-':
;1496:      string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1497
;1497:      sign = -1;
ADDRLP4 8
CNSTI4 -1
ASGNI4
line 1498
;1498:      break;
ADDRGP4 $478
JUMPV
LABELV $477
line 1501
;1499:
;1500:    default:
;1501:      sign = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1502
;1502:      break;
LABELV $478
line 1506
;1503:  }
;1504:
;1505:  // read digits
;1506:  value = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $482
line 1508
;1507:  do
;1508:  {
line 1509
;1509:    c = *string++;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1510
;1510:    if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $487
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $485
LABELV $487
line 1511
;1511:      break;
ADDRGP4 $484
JUMPV
LABELV $485
line 1513
;1512:
;1513:    c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1514
;1514:    value = value * 10 + c;
ADDRLP4 4
CNSTI4 10
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 1515
;1515:  } while( 1 );
LABELV $483
ADDRGP4 $482
JUMPV
LABELV $484
line 1519
;1516:
;1517:  // not handling 10e10 notation...
;1518:
;1519:  return value * sign;
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
RETI4
LABELV $471
endproc atoi 28 0
export _atoi
proc _atoi 32 0
line 1524
;1520:}
;1521:
;1522:
;1523:int _atoi( const char **stringPtr )
;1524:{
line 1530
;1525:  int   sign;
;1526:  int   value;
;1527:  int   c;
;1528:  const char  *string;
;1529:
;1530:  string = *stringPtr;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $490
JUMPV
LABELV $489
line 1534
;1531:
;1532:  // skip whitespace
;1533:  while( *string <= ' ' )
;1534:  {
line 1535
;1535:    if( !*string )
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $492
line 1536
;1536:      return 0;
CNSTI4 0
RETI4
ADDRGP4 $488
JUMPV
LABELV $492
line 1538
;1537:
;1538:    string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1539
;1539:  }
LABELV $490
line 1533
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $489
line 1542
;1540:
;1541:  // check sign
;1542:  switch( *string )
ADDRLP4 16
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 43
EQI4 $497
ADDRLP4 16
INDIRI4
CNSTI4 45
EQI4 $498
ADDRGP4 $494
JUMPV
line 1543
;1543:  {
LABELV $497
line 1545
;1544:    case '+':
;1545:      string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1546
;1546:      sign = 1;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 1547
;1547:      break;
ADDRGP4 $495
JUMPV
LABELV $498
line 1550
;1548:
;1549:    case '-':
;1550:      string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1551
;1551:      sign = -1;
ADDRLP4 12
CNSTI4 -1
ASGNI4
line 1552
;1552:      break;
ADDRGP4 $495
JUMPV
LABELV $494
line 1555
;1553:
;1554:    default:
;1555:      sign = 1;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 1556
;1556:      break;
LABELV $495
line 1560
;1557:  }
;1558:
;1559:  // read digits
;1560:  value = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $499
line 1562
;1561:  do
;1562:  {
line 1563
;1563:    c = *string++;
ADDRLP4 24
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1564
;1564:    if( c < '0' || c > '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $504
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $502
LABELV $504
line 1565
;1565:      break;
ADDRGP4 $501
JUMPV
LABELV $502
line 1567
;1566:
;1567:    c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 1568
;1568:    value = value * 10 + c;
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 1569
;1569:  } while( 1 );
LABELV $500
ADDRGP4 $499
JUMPV
LABELV $501
line 1573
;1570:
;1571:  // not handling 10e10 notation...
;1572:
;1573:  *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 1575
;1574:
;1575:  return value * sign;
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
MULI4
RETI4
LABELV $488
endproc _atoi 32 0
export abs
proc abs 4 0
line 1579
;1576:}
;1577:
;1578:int abs( int n )
;1579:{
line 1580
;1580:  return n < 0 ? -n : n;
ADDRFP4 0
INDIRI4
CNSTI4 0
GEI4 $507
ADDRLP4 0
ADDRFP4 0
INDIRI4
NEGI4
ASGNI4
ADDRGP4 $508
JUMPV
LABELV $507
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
LABELV $508
ADDRLP4 0
INDIRI4
RETI4
LABELV $505
endproc abs 4 0
export fabs
proc fabs 4 0
line 1584
;1581:}
;1582:
;1583:double fabs( double x )
;1584:{
line 1585
;1585:  return x < 0 ? -x : x;
ADDRFP4 0
INDIRF4
CNSTF4 0
GEF4 $511
ADDRLP4 0
ADDRFP4 0
INDIRF4
NEGF4
ASGNF4
ADDRGP4 $512
JUMPV
LABELV $511
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
LABELV $512
ADDRLP4 0
INDIRF4
RETF4
LABELV $509
endproc fabs 4 0
export _hextoi
proc _hextoi 32 0
line 1589
;1586:}
;1587:
;1588:unsigned int _hextoi( const char **stringPtr )
;1589:{
line 1595
;1590:  unsigned int value;
;1591:  int          c;
;1592:  int          i;
;1593:  const char   *string;
;1594:
;1595:  string = *stringPtr;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $515
JUMPV
LABELV $514
line 1599
;1596:
;1597:  // skip whitespace
;1598:  while( *string <= ' ' )
;1599:  {
line 1600
;1600:    if( !*string )
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $517
line 1601
;1601:      return 0;
CNSTU4 0
RETU4
ADDRGP4 $513
JUMPV
LABELV $517
line 1603
;1602:
;1603:    string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1604
;1604:  }
LABELV $515
line 1598
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $514
line 1606
;1605:
;1606:  value = 0;
ADDRLP4 8
CNSTU4 0
ASGNU4
line 1607
;1607:  i = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $520
JUMPV
LABELV $519
line 1609
;1608:  while( i++ < 8 && ( c = *string++ ) )
;1609:  {
line 1610
;1610:    if ( c >= '0' && c <= '9' )
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $522
ADDRLP4 0
INDIRI4
CNSTI4 57
GTI4 $522
line 1611
;1611:    {
line 1612
;1612:      value = value * 16 + c - '0';
ADDRLP4 8
ADDRLP4 8
INDIRU4
CNSTI4 4
LSHU4
ADDRLP4 0
INDIRI4
CVIU4 4
ADDU4
CNSTU4 48
SUBU4
ASGNU4
line 1613
;1613:      continue;
ADDRGP4 $520
JUMPV
LABELV $522
line 1615
;1614:    }
;1615:    else if ( c >= 'a' && c <= 'f' )
ADDRLP4 0
INDIRI4
CNSTI4 97
LTI4 $524
ADDRLP4 0
INDIRI4
CNSTI4 102
GTI4 $524
line 1616
;1616:    {
line 1617
;1617:      value = value * 16 + 10 + c - 'a';
ADDRLP4 8
ADDRLP4 8
INDIRU4
CNSTI4 4
LSHU4
CNSTU4 10
ADDU4
ADDRLP4 0
INDIRI4
CVIU4 4
ADDU4
CNSTU4 97
SUBU4
ASGNU4
line 1618
;1618:      continue;
ADDRGP4 $520
JUMPV
LABELV $524
line 1620
;1619:    }
;1620:    else if ( c >= 'A' && c <= 'F' )
ADDRLP4 0
INDIRI4
CNSTI4 65
LTI4 $521
ADDRLP4 0
INDIRI4
CNSTI4 70
GTI4 $521
line 1621
;1621:    {
line 1622
;1622:      value = value * 16 + 10 + c - 'A';
ADDRLP4 8
ADDRLP4 8
INDIRU4
CNSTI4 4
LSHU4
CNSTU4 10
ADDU4
ADDRLP4 0
INDIRI4
CVIU4 4
ADDU4
CNSTU4 65
SUBU4
ASGNU4
line 1623
;1623:      continue;
line 1626
;1624:    }
;1625:    else
;1626:      break;
LABELV $520
line 1608
ADDRLP4 16
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 8
GEI4 $528
ADDRLP4 20
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ASGNP4
ADDRLP4 28
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $519
LABELV $528
LABELV $521
line 1628
;1627:  }
;1628:  *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 1629
;1629:  return value;
ADDRLP4 8
INDIRU4
RETU4
LABELV $513
endproc _hextoi 32 0
proc dopr 276 32
line 1764
;1630:}
;1631:
;1632://=========================================================
;1633:
;1634:/*
;1635: * New implementation by Patrick Powell and others for vsnprintf.
;1636: * Supports length checking in strings.
;1637: */
;1638:
;1639:/*
;1640: * Copyright Patrick Powell 1995
;1641: * This code is based on code written by Patrick Powell (papowell@astart.com)
;1642: * It may be used for any purpose as long as this notice remains intact
;1643: * on all source code distributions
;1644: */
;1645:
;1646:/**************************************************************
;1647: * Original:
;1648: * Patrick Powell Tue Apr 11 09:48:21 PDT 1995
;1649: * A bombproof version of doprnt (dopr) included.
;1650: * Sigh.  This sort of thing is always nasty do deal with.  Note that
;1651: * the version here does not include floating point...
;1652: *
;1653: * snprintf() is used instead of sprintf() as it does limit checks
;1654: * for string length.  This covers a nasty loophole.
;1655: *
;1656: * The other functions are there to prevent NULL pointers from
;1657: * causing nast effects.
;1658: *
;1659: * More Recently:
;1660: *  Brandon Long <blong@fiction.net> 9/15/96 for mutt 0.43
;1661: *  This was ugly.  It is still ugly.  I opted out of floating point
;1662: *  numbers, but the formatter understands just about everything
;1663: *  from the normal C string format, at least as far as I can tell from
;1664: *  the Solaris 2.5 printf(3S) man page.
;1665: *
;1666: *  Brandon Long <blong@fiction.net> 10/22/97 for mutt 0.87.1
;1667: *    Ok, added some minimal floating point support, which means this
;1668: *    probably requires libm on most operating systems.  Don't yet
;1669: *    support the exponent (e,E) and sigfig (g,G).  Also, fmtint()
;1670: *    was pretty badly broken, it just wasn't being exercised in ways
;1671: *    which showed it, so that's been fixed.  Also, formated the code
;1672: *    to mutt conventions, and removed dead code left over from the
;1673: *    original.  Also, there is now a builtin-test, just compile with:
;1674: *           gcc -DTEST_SNPRINTF -o snprintf snprintf.c -lm
;1675: *    and run snprintf for results.
;1676: *
;1677: *  Thomas Roessler <roessler@guug.de> 01/27/98 for mutt 0.89i
;1678: *    The PGP code was using unsigned hexadecimal formats.
;1679: *    Unfortunately, unsigned formats simply didn't work.
;1680: *
;1681: *  Michael Elkins <me@cs.hmc.edu> 03/05/98 for mutt 0.90.8
;1682: *    The original code assumed that both snprintf() and vsnprintf() were
;1683: *    missing.  Some systems only have snprintf() but not vsnprintf(), so
;1684: *    the code is now broken down under HAVE_SNPRINTF and HAVE_VSNPRINTF.
;1685: *
;1686: *  Andrew Tridgell (tridge@samba.org) Oct 1998
;1687: *    fixed handling of %.0f
;1688: *    added test for HAVE_LONG_DOUBLE
;1689: *
;1690: *  Russ Allbery <rra@stanford.edu> 2000-08-26
;1691: *    fixed return value to comply with C99
;1692: *    fixed handling of snprintf(NULL, ...)
;1693: *
;1694: *  Hrvoje Niksic <hniksic@arsdigita.com> 2000-11-04
;1695: *    include <config.h> instead of "config.h".
;1696: *    moved TEST_SNPRINTF stuff out of HAVE_SNPRINTF ifdef.
;1697: *    include <stdio.h> for NULL.
;1698: *    added support and test cases for long long.
;1699: *    don't declare argument types to (v)snprintf if stdarg is not used.
;1700: *    use int instead of short int as 2nd arg to va_arg.
;1701: *
;1702: **************************************************************/
;1703:
;1704:/* BDR 2002-01-13  %e and %g were being ignored.  Now do something,
;1705:   if not necessarily correctly */
;1706:
;1707:#if (SIZEOF_LONG_DOUBLE > 0)
;1708:/* #ifdef HAVE_LONG_DOUBLE */
;1709:#define LDOUBLE long double
;1710:#else
;1711:#define LDOUBLE double
;1712:#endif
;1713:
;1714:#if (SIZEOF_LONG_LONG > 0)
;1715:/* #ifdef HAVE_LONG_LONG */
;1716:# define LLONG long long
;1717:#else
;1718:# define LLONG long
;1719:#endif
;1720:
;1721:static int dopr (char *buffer, size_t maxlen, const char *format,
;1722:    va_list args);
;1723:static int fmtstr (char *buffer, size_t *currlen, size_t maxlen,
;1724:    char *value, int flags, int min, int max);
;1725:static int fmtint (char *buffer, size_t *currlen, size_t maxlen,
;1726:    LLONG value, int base, int min, int max, int flags);
;1727:static int fmtfp (char *buffer, size_t *currlen, size_t maxlen,
;1728:    LDOUBLE fvalue, int min, int max, int flags);
;1729:static int dopr_outch (char *buffer, size_t *currlen, size_t maxlen, char c );
;1730:
;1731:/*
;1732: * dopr(): poor man's version of doprintf
;1733: */
;1734:
;1735:/* format read states */
;1736:#define DP_S_DEFAULT 0
;1737:#define DP_S_FLAGS   1
;1738:#define DP_S_MIN     2
;1739:#define DP_S_DOT     3
;1740:#define DP_S_MAX     4
;1741:#define DP_S_MOD     5
;1742:#define DP_S_MOD_L   6
;1743:#define DP_S_CONV    7
;1744:#define DP_S_DONE    8
;1745:
;1746:/* format flags - Bits */
;1747:#define DP_F_MINUS     (1 << 0)
;1748:#define DP_F_PLUS      (1 << 1)
;1749:#define DP_F_SPACE     (1 << 2)
;1750:#define DP_F_NUM       (1 << 3)
;1751:#define DP_F_ZERO      (1 << 4)
;1752:#define DP_F_UP        (1 << 5)
;1753:#define DP_F_UNSIGNED  (1 << 6)
;1754:
;1755:/* Conversion Flags */
;1756:#define DP_C_SHORT   1
;1757:#define DP_C_LONG    2
;1758:#define DP_C_LLONG   3
;1759:#define DP_C_LDOUBLE 4
;1760:
;1761:#define char_to_int(p) (p - '0')
;1762:
;1763:static int dopr (char *buffer, size_t maxlen, const char *format, va_list args)
;1764:{
line 1777
;1765:  char ch;
;1766:  LLONG value;
;1767:  LDOUBLE fvalue;
;1768:  char *strvalue;
;1769:  int min;
;1770:  int max;
;1771:  int state;
;1772:  int flags;
;1773:  int cflags;
;1774:  int total;
;1775:  size_t currlen;
;1776:
;1777:  state = DP_S_DEFAULT;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1778
;1778:  currlen = flags = cflags = min = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 16
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 28
ADDRLP4 44
INDIRI4
ASGNI4
line 1779
;1779:  max = -1;
ADDRLP4 8
CNSTI4 -1
ASGNI4
line 1780
;1780:  ch = *format++;
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 48
INDIRP4
INDIRI1
ASGNI1
line 1781
;1781:  total = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 $531
JUMPV
LABELV $530
line 1784
;1782:
;1783:  while (state != DP_S_DONE)
;1784:  {
line 1785
;1785:    if (ch == '\0')
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $533
line 1786
;1786:      state = DP_S_DONE;
ADDRLP4 0
CNSTI4 8
ASGNI4
LABELV $533
line 1788
;1787:
;1788:    switch(state)
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $536
ADDRLP4 0
INDIRI4
CNSTI4 8
GTI4 $536
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $643
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $643
address $537
address $540
address $550
address $555
address $558
address $565
address $576
address $581
address $536
code
line 1789
;1789:    {
LABELV $537
line 1791
;1790:      case DP_S_DEFAULT:
;1791:        if (ch == '%')
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 37
NEI4 $538
line 1792
;1792:          state = DP_S_FLAGS;
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $539
JUMPV
LABELV $538
line 1794
;1793:        else
;1794:          total += dopr_outch (buffer, &currlen, maxlen, ch);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 56
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 56
INDIRI4
ADDI4
ASGNI4
LABELV $539
line 1795
;1795:        ch = *format++;
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 60
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
INDIRI1
ASGNI1
line 1796
;1796:        break;
ADDRGP4 $536
JUMPV
LABELV $540
line 1798
;1797:      case DP_S_FLAGS:
;1798:        switch (ch)
ADDRLP4 64
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 72
CNSTI4 32
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 72
INDIRI4
EQI4 $546
ADDRLP4 64
INDIRI4
CNSTI4 35
EQI4 $547
ADDRLP4 64
INDIRI4
ADDRLP4 72
INDIRI4
LTI4 $541
LABELV $549
ADDRLP4 64
INDIRI4
CNSTI4 43
EQI4 $545
ADDRLP4 64
INDIRI4
CNSTI4 45
EQI4 $544
ADDRLP4 64
INDIRI4
CNSTI4 48
EQI4 $548
ADDRGP4 $541
JUMPV
line 1799
;1799:        {
LABELV $544
line 1801
;1800:          case '-':
;1801:            flags |= DP_F_MINUS;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1802
;1802:            ch = *format++;
ADDRLP4 80
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 80
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 80
INDIRP4
INDIRI1
ASGNI1
line 1803
;1803:            break;
ADDRGP4 $536
JUMPV
LABELV $545
line 1805
;1804:          case '+':
;1805:            flags |= DP_F_PLUS;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1806
;1806:            ch = *format++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 84
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
INDIRI1
ASGNI1
line 1807
;1807:            break;
ADDRGP4 $536
JUMPV
LABELV $546
line 1809
;1808:          case ' ':
;1809:            flags |= DP_F_SPACE;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 1810
;1810:            ch = *format++;
ADDRLP4 88
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 88
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 88
INDIRP4
INDIRI1
ASGNI1
line 1811
;1811:            break;
ADDRGP4 $536
JUMPV
LABELV $547
line 1813
;1812:          case '#':
;1813:            flags |= DP_F_NUM;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1814
;1814:            ch = *format++;
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 92
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 92
INDIRP4
INDIRI1
ASGNI1
line 1815
;1815:            break;
ADDRGP4 $536
JUMPV
LABELV $548
line 1817
;1816:          case '0':
;1817:            flags |= DP_F_ZERO;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1818
;1818:            ch = *format++;
ADDRLP4 96
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 96
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 96
INDIRP4
INDIRI1
ASGNI1
line 1819
;1819:            break;
ADDRGP4 $536
JUMPV
LABELV $541
line 1821
;1820:          default:
;1821:            state = DP_S_MIN;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 1822
;1822:            break;
line 1824
;1823:        }
;1824:        break;
ADDRGP4 $536
JUMPV
LABELV $550
line 1826
;1825:      case DP_S_MIN:
;1826:        if ('0' <= ch && ch <= '9')
ADDRLP4 80
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
CNSTI4 48
ADDRLP4 80
INDIRI4
GTI4 $551
ADDRLP4 80
INDIRI4
CNSTI4 57
GTI4 $551
line 1827
;1827:        {
line 1828
;1828:          min = 10*min + char_to_int (ch);
ADDRLP4 16
CNSTI4 10
ADDRLP4 16
INDIRI4
MULI4
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
line 1829
;1829:          ch = *format++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 84
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
INDIRI1
ASGNI1
line 1830
;1830:        }
ADDRGP4 $536
JUMPV
LABELV $551
line 1831
;1831:        else if (ch == '*')
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $553
line 1832
;1832:        {
line 1833
;1833:          min = va_arg (args, int);
ADDRLP4 84
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 84
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 84
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
ASGNI4
line 1834
;1834:          ch = *format++;
ADDRLP4 88
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 88
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 88
INDIRP4
INDIRI1
ASGNI1
line 1835
;1835:          state = DP_S_DOT;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 1836
;1836:        }
ADDRGP4 $536
JUMPV
LABELV $553
line 1838
;1837:        else
;1838:          state = DP_S_DOT;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 1839
;1839:        break;
ADDRGP4 $536
JUMPV
LABELV $555
line 1841
;1840:      case DP_S_DOT:
;1841:        if (ch == '.')
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 46
NEI4 $556
line 1842
;1842:        {
line 1843
;1843:          state = DP_S_MAX;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 1844
;1844:          ch = *format++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 84
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
INDIRI1
ASGNI1
line 1845
;1845:        }
ADDRGP4 $536
JUMPV
LABELV $556
line 1847
;1846:        else
;1847:          state = DP_S_MOD;
ADDRLP4 0
CNSTI4 5
ASGNI4
line 1848
;1848:        break;
ADDRGP4 $536
JUMPV
LABELV $558
line 1850
;1849:      case DP_S_MAX:
;1850:        if ('0' <= ch && ch <= '9')
ADDRLP4 84
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
CNSTI4 48
ADDRLP4 84
INDIRI4
GTI4 $559
ADDRLP4 84
INDIRI4
CNSTI4 57
GTI4 $559
line 1851
;1851:        {
line 1852
;1852:          if (max < 0)
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $561
line 1853
;1853:            max = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $561
line 1854
;1854:          max = 10*max + char_to_int (ch);
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
line 1855
;1855:          ch = *format++;
ADDRLP4 88
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 88
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 88
INDIRP4
INDIRI1
ASGNI1
line 1856
;1856:        }
ADDRGP4 $536
JUMPV
LABELV $559
line 1857
;1857:        else if (ch == '*')
ADDRLP4 4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $563
line 1858
;1858:        {
line 1859
;1859:          max = va_arg (args, int);
ADDRLP4 88
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 88
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 88
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
ASGNI4
line 1860
;1860:          ch = *format++;
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 92
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 92
INDIRP4
INDIRI1
ASGNI1
line 1861
;1861:          state = DP_S_MOD;
ADDRLP4 0
CNSTI4 5
ASGNI4
line 1862
;1862:        }
ADDRGP4 $536
JUMPV
LABELV $563
line 1864
;1863:        else
;1864:          state = DP_S_MOD;
ADDRLP4 0
CNSTI4 5
ASGNI4
line 1865
;1865:        break;
ADDRGP4 $536
JUMPV
LABELV $565
line 1867
;1866:      case DP_S_MOD:
;1867:        switch (ch)
ADDRLP4 88
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 96
CNSTI4 104
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $569
ADDRLP4 88
INDIRI4
ADDRLP4 96
INDIRI4
GTI4 $573
LABELV $572
ADDRLP4 88
INDIRI4
CNSTI4 76
EQI4 $571
ADDRGP4 $567
JUMPV
LABELV $573
ADDRLP4 88
INDIRI4
CNSTI4 108
EQI4 $570
ADDRGP4 $567
JUMPV
line 1868
;1868:        {
LABELV $569
line 1870
;1869:          case 'h':
;1870:            cflags = DP_C_SHORT;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 1871
;1871:            ch = *format++;
ADDRLP4 100
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 100
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 100
INDIRP4
INDIRI1
ASGNI1
line 1872
;1872:            break;
ADDRGP4 $567
JUMPV
LABELV $570
line 1874
;1873:          case 'l':
;1874:            cflags = DP_C_LONG;
ADDRLP4 12
CNSTI4 2
ASGNI4
line 1875
;1875:            ch = *format++;
ADDRLP4 104
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 104
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 104
INDIRP4
INDIRI1
ASGNI1
line 1876
;1876:            break;
ADDRGP4 $567
JUMPV
LABELV $571
line 1878
;1877:          case 'L':
;1878:            cflags = DP_C_LDOUBLE;
ADDRLP4 12
CNSTI4 4
ASGNI4
line 1879
;1879:            ch = *format++;
ADDRLP4 108
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 108
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 108
INDIRP4
INDIRI1
ASGNI1
line 1880
;1880:            break;
line 1882
;1881:          default:
;1882:            break;
LABELV $567
line 1884
;1883:        }
;1884:        if (cflags != DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $574
line 1885
;1885:          state = DP_S_CONV;
ADDRLP4 0
CNSTI4 7
ASGNI4
ADDRGP4 $536
JUMPV
LABELV $574
line 1887
;1886:        else
;1887:          state = DP_S_MOD_L;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1888
;1888:        break;
ADDRGP4 $536
JUMPV
LABELV $576
line 1890
;1889:      case DP_S_MOD_L:
;1890:        switch (ch)
ADDRLP4 100
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 108
EQI4 $580
ADDRGP4 $578
JUMPV
line 1891
;1891:        {
LABELV $580
line 1893
;1892:          case 'l':
;1893:            cflags = DP_C_LLONG;
ADDRLP4 12
CNSTI4 3
ASGNI4
line 1894
;1894:            ch = *format++;
ADDRLP4 104
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 104
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 104
INDIRP4
INDIRI1
ASGNI1
line 1895
;1895:            break;
line 1897
;1896:          default:
;1897:            break;
LABELV $578
line 1899
;1898:        }
;1899:        state = DP_S_CONV;
ADDRLP4 0
CNSTI4 7
ASGNI4
line 1900
;1900:        break;
ADDRGP4 $536
JUMPV
LABELV $581
line 1902
;1901:      case DP_S_CONV:
;1902:        switch (ch)
ADDRLP4 104
ADDRLP4 4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 69
EQI4 $617
ADDRLP4 112
CNSTI4 71
ASGNI4
ADDRLP4 104
INDIRI4
ADDRLP4 112
INDIRI4
EQI4 $621
ADDRLP4 104
INDIRI4
ADDRLP4 112
INDIRI4
GTI4 $638
LABELV $637
ADDRLP4 104
INDIRI4
CNSTI4 37
EQI4 $635
ADDRGP4 $583
JUMPV
LABELV $638
ADDRLP4 120
CNSTI4 88
ASGNI4
ADDRLP4 104
INDIRI4
ADDRLP4 120
INDIRI4
EQI4 $606
ADDRLP4 104
INDIRI4
ADDRLP4 120
INDIRI4
LTI4 $583
LABELV $639
ADDRLP4 104
INDIRI4
CNSTI4 99
LTI4 $583
ADDRLP4 104
INDIRI4
CNSTI4 120
GTI4 $583
ADDRLP4 104
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $640-396
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $640
address $625
address $585
address $618
address $614
address $622
address $583
address $585
address $583
address $583
address $583
address $583
address $628
address $592
address $627
address $583
address $583
address $626
address $583
address $599
address $583
address $636
address $607
code
line 1903
;1903:        {
LABELV $585
line 1906
;1904:          case 'd':
;1905:          case 'i':
;1906:            if (cflags == DP_C_SHORT)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $586
line 1907
;1907:              value = (short int)va_arg (args, int);
ADDRLP4 128
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 128
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 128
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
CVII2 4
CVII4 2
ASGNI4
ADDRGP4 $587
JUMPV
LABELV $586
line 1908
;1908:            else if (cflags == DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $588
line 1909
;1909:              value = va_arg (args, long int);
ADDRLP4 132
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 132
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 132
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $589
JUMPV
LABELV $588
line 1910
;1910:            else if (cflags == DP_C_LLONG)
ADDRLP4 12
INDIRI4
CNSTI4 3
NEI4 $590
line 1911
;1911:              value = va_arg (args, LLONG);
ADDRLP4 136
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 136
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 136
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $591
JUMPV
LABELV $590
line 1913
;1912:            else
;1913:              value = va_arg (args, int);
ADDRLP4 140
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 140
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 140
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
ASGNI4
LABELV $591
LABELV $589
LABELV $587
line 1914
;1914:            total += fmtint (buffer, &currlen, maxlen, value, 10, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 144
ADDRGP4 fmtint
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 144
INDIRI4
ADDI4
ASGNI4
line 1915
;1915:            break;
ADDRGP4 $583
JUMPV
LABELV $592
line 1917
;1916:          case 'o':
;1917:            flags |= DP_F_UNSIGNED;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 1918
;1918:            if (cflags == DP_C_SHORT)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $593
line 1920
;1919:              //    value = (unsigned short int) va_arg (args, unsigned short int); // Thilo: This does not work because the rcc compiler cannot do that cast correctly.
;1920:              value = va_arg (args, unsigned int) & ( (1 << sizeof(unsigned short int) * 8) - 1); // Using this workaround instead.
ADDRLP4 148
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 148
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 148
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CNSTU4 65535
BANDU4
CVUI4 4
ASGNI4
ADDRGP4 $594
JUMPV
LABELV $593
line 1921
;1921:            else if (cflags == DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $595
line 1922
;1922:              value = va_arg (args, unsigned long int);
ADDRLP4 152
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 152
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 152
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $596
JUMPV
LABELV $595
line 1923
;1923:            else if (cflags == DP_C_LLONG)
ADDRLP4 12
INDIRI4
CNSTI4 3
NEI4 $597
line 1924
;1924:              value = va_arg (args, unsigned LLONG);
ADDRLP4 156
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 156
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 156
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $598
JUMPV
LABELV $597
line 1926
;1925:            else
;1926:              value = va_arg (args, unsigned int);
ADDRLP4 160
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 160
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 160
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
LABELV $598
LABELV $596
LABELV $594
line 1927
;1927:            total += fmtint (buffer, &currlen, maxlen, value, 8, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 8
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 fmtint
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 164
INDIRI4
ADDI4
ASGNI4
line 1928
;1928:            break;
ADDRGP4 $583
JUMPV
LABELV $599
line 1930
;1929:          case 'u':
;1930:            flags |= DP_F_UNSIGNED;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 1931
;1931:            if (cflags == DP_C_SHORT)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $600
line 1932
;1932:              value = va_arg (args, unsigned int) & ( (1 << sizeof(unsigned short int) * 8) - 1);
ADDRLP4 168
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 168
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 168
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CNSTU4 65535
BANDU4
CVUI4 4
ASGNI4
ADDRGP4 $601
JUMPV
LABELV $600
line 1933
;1933:            else if (cflags == DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $602
line 1934
;1934:              value = va_arg (args, unsigned long int);
ADDRLP4 172
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 172
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 172
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $603
JUMPV
LABELV $602
line 1935
;1935:            else if (cflags == DP_C_LLONG)
ADDRLP4 12
INDIRI4
CNSTI4 3
NEI4 $604
line 1936
;1936:              value = va_arg (args, unsigned LLONG);
ADDRLP4 176
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 176
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 176
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $605
JUMPV
LABELV $604
line 1938
;1937:            else
;1938:              value = va_arg (args, unsigned int);
ADDRLP4 180
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 180
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 180
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
LABELV $605
LABELV $603
LABELV $601
line 1939
;1939:            total += fmtint (buffer, &currlen, maxlen, value, 10, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 184
ADDRGP4 fmtint
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 184
INDIRI4
ADDI4
ASGNI4
line 1940
;1940:            break;
ADDRGP4 $583
JUMPV
LABELV $606
line 1942
;1941:          case 'X':
;1942:            flags |= DP_F_UP;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $607
line 1944
;1943:          case 'x':
;1944:            flags |= DP_F_UNSIGNED;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 1945
;1945:            if (cflags == DP_C_SHORT)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $608
line 1946
;1946:              value = va_arg (args, unsigned int) & ( (1 << sizeof(unsigned short int) * 8) - 1);
ADDRLP4 188
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 188
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 188
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CNSTU4 65535
BANDU4
CVUI4 4
ASGNI4
ADDRGP4 $609
JUMPV
LABELV $608
line 1947
;1947:            else if (cflags == DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $610
line 1948
;1948:              value = va_arg (args, unsigned long int);
ADDRLP4 192
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 192
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 192
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $611
JUMPV
LABELV $610
line 1949
;1949:            else if (cflags == DP_C_LLONG)
ADDRLP4 12
INDIRI4
CNSTI4 3
NEI4 $612
line 1950
;1950:              value = va_arg (args, unsigned LLONG);
ADDRLP4 196
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 196
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 196
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
ADDRGP4 $613
JUMPV
LABELV $612
line 1952
;1951:            else
;1952:              value = va_arg (args, unsigned int);
ADDRLP4 200
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 200
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 200
INDIRP4
CNSTI4 -4
ADDP4
INDIRU4
CVUI4 4
ASGNI4
LABELV $613
LABELV $611
LABELV $609
line 1953
;1953:            total += fmtint (buffer, &currlen, maxlen, value, 16, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 204
ADDRGP4 fmtint
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 204
INDIRI4
ADDI4
ASGNI4
line 1954
;1954:            break;
ADDRGP4 $583
JUMPV
LABELV $614
line 1956
;1955:          case 'f':
;1956:            if (cflags == DP_C_LDOUBLE)
ADDRLP4 12
INDIRI4
CNSTI4 4
NEI4 $615
line 1957
;1957:              fvalue = va_arg (args, LDOUBLE);
ADDRLP4 208
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 208
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 208
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $616
JUMPV
LABELV $615
line 1959
;1958:            else
;1959:              fvalue = va_arg (args, double);
ADDRLP4 212
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 212
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 212
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
LABELV $616
line 1961
;1960:            /* um, floating point? */
;1961:            total += fmtfp (buffer, &currlen, maxlen, fvalue, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 216
ADDRGP4 fmtfp
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 216
INDIRI4
ADDI4
ASGNI4
line 1962
;1962:            break;
ADDRGP4 $583
JUMPV
LABELV $617
line 1964
;1963:          case 'E':
;1964:            flags |= DP_F_UP;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $618
line 1966
;1965:          case 'e':
;1966:            if (cflags == DP_C_LDOUBLE)
ADDRLP4 12
INDIRI4
CNSTI4 4
NEI4 $619
line 1967
;1967:              fvalue = va_arg (args, LDOUBLE);
ADDRLP4 220
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 220
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 220
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $620
JUMPV
LABELV $619
line 1969
;1968:            else
;1969:              fvalue = va_arg (args, double);
ADDRLP4 224
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 224
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 224
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
LABELV $620
line 1971
;1970:            /* um, floating point? */
;1971:            total += fmtfp (buffer, &currlen, maxlen, fvalue, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 228
ADDRGP4 fmtfp
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 228
INDIRI4
ADDI4
ASGNI4
line 1972
;1972:            break;
ADDRGP4 $583
JUMPV
LABELV $621
line 1974
;1973:          case 'G':
;1974:            flags |= DP_F_UP;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $622
line 1976
;1975:          case 'g':
;1976:            if (cflags == DP_C_LDOUBLE)
ADDRLP4 12
INDIRI4
CNSTI4 4
NEI4 $623
line 1977
;1977:              fvalue = va_arg (args, LDOUBLE);
ADDRLP4 232
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 232
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 232
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $624
JUMPV
LABELV $623
line 1979
;1978:            else
;1979:              fvalue = va_arg (args, double);
ADDRLP4 236
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 236
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 236
INDIRP4
CNSTI4 -4
ADDP4
INDIRF4
ASGNF4
LABELV $624
line 1981
;1980:            /* um, floating point? */
;1981:            total += fmtfp (buffer, &currlen, maxlen, fvalue, min, max, flags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 240
ADDRGP4 fmtfp
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 240
INDIRI4
ADDI4
ASGNI4
line 1982
;1982:            break;
ADDRGP4 $583
JUMPV
LABELV $625
line 1984
;1983:          case 'c':
;1984:            total += dopr_outch (buffer, &currlen, maxlen, va_arg (args, int));
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 244
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 244
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 -4
ADDP4
INDIRI4
CVII1 4
CVII4 1
ARGI4
ADDRLP4 248
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 248
INDIRI4
ADDI4
ASGNI4
line 1985
;1985:            break;
ADDRGP4 $583
JUMPV
LABELV $626
line 1987
;1986:          case 's':
;1987:            strvalue = va_arg (args, char *);
ADDRLP4 252
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 252
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 252
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 1988
;1988:            total += fmtstr (buffer, &currlen, maxlen, strvalue, flags, min, max);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 256
ADDRGP4 fmtstr
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 256
INDIRI4
ADDI4
ASGNI4
line 1989
;1989:            break;
ADDRGP4 $583
JUMPV
LABELV $627
line 1991
;1990:          case 'p':
;1991:            strvalue = va_arg (args, void *);
ADDRLP4 260
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 260
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 260
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 1992
;1992:            total += fmtint (buffer, &currlen, maxlen, (long) strvalue, 16, min,
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CVPU4 4
CVUI4 4
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 264
ADDRGP4 fmtint
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 264
INDIRI4
ADDI4
ASGNI4
line 1994
;1993:                max, flags);
;1994:            break;
ADDRGP4 $583
JUMPV
LABELV $628
line 1996
;1995:          case 'n':
;1996:            if (cflags == DP_C_SHORT)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $629
line 1997
;1997:            {
line 1999
;1998:              short int *num;
;1999:              num = va_arg (args, short int *);
ADDRLP4 272
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 272
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 272
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 2000
;2000:              *num = currlen;
ADDRLP4 268
INDIRP4
ADDRLP4 28
INDIRI4
CVII2 4
ASGNI2
line 2001
;2001:            }
ADDRGP4 $583
JUMPV
LABELV $629
line 2002
;2002:            else if (cflags == DP_C_LONG)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $631
line 2003
;2003:            {
line 2005
;2004:              long int *num;
;2005:              num = va_arg (args, long int *);
ADDRLP4 272
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 272
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 272
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 2006
;2006:              *num = currlen;
ADDRLP4 268
INDIRP4
ADDRLP4 28
INDIRI4
ASGNI4
line 2007
;2007:            }
ADDRGP4 $583
JUMPV
LABELV $631
line 2008
;2008:            else if (cflags == DP_C_LLONG)
ADDRLP4 12
INDIRI4
CNSTI4 3
NEI4 $633
line 2009
;2009:            {
line 2011
;2010:              LLONG *num;
;2011:              num = va_arg (args, LLONG *);
ADDRLP4 272
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 272
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 272
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 2012
;2012:              *num = currlen;
ADDRLP4 268
INDIRP4
ADDRLP4 28
INDIRI4
ASGNI4
line 2013
;2013:            }
ADDRGP4 $583
JUMPV
LABELV $633
line 2015
;2014:            else
;2015:            {
line 2017
;2016:              int *num;
;2017:              num = va_arg (args, int *);
ADDRLP4 272
ADDRFP4 12
INDIRP4
CNSTU4 4
ADDP4
ASGNP4
ADDRFP4 12
ADDRLP4 272
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 272
INDIRP4
CNSTI4 -4
ADDP4
INDIRP4
ASGNP4
line 2018
;2018:              *num = currlen;
ADDRLP4 268
INDIRP4
ADDRLP4 28
INDIRI4
ASGNI4
line 2019
;2019:            }
line 2020
;2020:            break;
ADDRGP4 $583
JUMPV
LABELV $635
line 2022
;2021:          case '%':
;2022:            total += dopr_outch (buffer, &currlen, maxlen, ch);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 268
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRLP4 268
INDIRI4
ADDI4
ASGNI4
line 2023
;2023:            break;
ADDRGP4 $583
JUMPV
LABELV $636
line 2026
;2024:          case 'w':
;2025:            /* not supported yet, treat as next char */
;2026:            ch = *format++;
ADDRLP4 272
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 272
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 272
INDIRP4
INDIRI1
ASGNI1
line 2027
;2027:            break;
line 2030
;2028:          default:
;2029:            /* Unknown, skip */
;2030:            break;
LABELV $583
line 2032
;2031:        }
;2032:        ch = *format++;
ADDRLP4 128
ADDRFP4 8
INDIRP4
ASGNP4
ADDRFP4 8
ADDRLP4 128
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 128
INDIRP4
INDIRI1
ASGNI1
line 2033
;2033:        state = DP_S_DEFAULT;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2034
;2034:        flags = cflags = min = 0;
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRLP4 16
ADDRLP4 132
INDIRI4
ASGNI4
ADDRLP4 12
ADDRLP4 132
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 132
INDIRI4
ASGNI4
line 2035
;2035:        max = -1;
ADDRLP4 8
CNSTI4 -1
ASGNI4
line 2036
;2036:        break;
line 2038
;2037:      case DP_S_DONE:
;2038:        break;
line 2041
;2039:      default:
;2040:        /* hmm? */
;2041:        break; /* some picky compilers need this */
LABELV $536
line 2043
;2042:    }
;2043:  }
LABELV $531
line 1783
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $530
line 2044
;2044:  if (buffer != NULL)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $644
line 2045
;2045:  {
line 2046
;2046:    if (currlen < maxlen - 1)
ADDRLP4 28
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
GEI4 $646
line 2047
;2047:      buffer[currlen] = '\0';
ADDRLP4 28
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
ADDRGP4 $647
JUMPV
LABELV $646
line 2049
;2048:    else
;2049:      buffer[maxlen - 1] = '\0';
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
LABELV $647
line 2050
;2050:  }
LABELV $644
line 2051
;2051:  return total;
ADDRLP4 24
INDIRI4
RETI4
LABELV $529
endproc dopr 276 32
proc fmtstr 32 16
line 2056
;2052:}
;2053:
;2054:static int fmtstr (char *buffer, size_t *currlen, size_t maxlen,
;2055:    char *value, int flags, int min, int max)
;2056:{
line 2058
;2057:  int padlen, strln;     /* amount to pad */
;2058:  int cnt = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2059
;2059:  int total = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2061
;2060:
;2061:  if (value == 0)
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $649
line 2062
;2062:  {
line 2063
;2063:    value = "<NULL>";
ADDRFP4 12
ADDRGP4 $651
ASGNP4
line 2064
;2064:  }
LABELV $649
line 2066
;2065:
;2066:  for (strln = 0; value[strln]; ++strln); /* strlen */
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $655
JUMPV
LABELV $652
LABELV $653
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $655
ADDRLP4 8
INDIRI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $652
line 2067
;2067:  if (max >= 0 && max < strln)
ADDRLP4 16
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $656
ADDRLP4 16
INDIRI4
ADDRLP4 8
INDIRI4
GEI4 $656
line 2068
;2068:    strln = max;
ADDRLP4 8
ADDRFP4 24
INDIRI4
ASGNI4
LABELV $656
line 2069
;2069:  padlen = min - strln;
ADDRLP4 0
ADDRFP4 20
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 2070
;2070:  if (padlen < 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $658
line 2071
;2071:    padlen = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $658
line 2072
;2072:  if (flags & DP_F_MINUS)
ADDRFP4 16
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $663
line 2073
;2073:    padlen = -padlen; /* Left Justify */
ADDRLP4 0
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
ADDRGP4 $663
JUMPV
LABELV $662
line 2076
;2074:
;2075:  while (padlen > 0)
;2076:  {
line 2077
;2077:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 20
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
line 2078
;2078:    --padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2079
;2079:  }
LABELV $663
line 2075
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $662
ADDRGP4 $666
JUMPV
LABELV $665
line 2081
;2080:  while (*value && ((max < 0) || (cnt < max)))
;2081:  {
line 2082
;2082:    total += dopr_outch (buffer, currlen, maxlen, *value++);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 20
ADDRFP4 12
INDIRP4
ASGNP4
ADDRFP4 12
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 24
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
line 2083
;2083:    ++cnt;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2084
;2084:  }
LABELV $666
line 2080
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRFP4 12
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 20
INDIRI4
EQI4 $668
ADDRLP4 24
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $665
ADDRLP4 12
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $665
LABELV $668
ADDRGP4 $670
JUMPV
LABELV $669
line 2086
;2085:  while (padlen < 0)
;2086:  {
line 2087
;2087:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 28
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ASGNI4
line 2088
;2088:    ++padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2089
;2089:  }
LABELV $670
line 2085
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $669
line 2090
;2090:  return total;
ADDRLP4 4
INDIRI4
RETI4
LABELV $648
endproc fmtstr 32 16
proc fmtint 76 16
line 2097
;2091:}
;2092:
;2093:/* Have to handle DP_F_NUM (ie 0x and 0 alternates) */
;2094:
;2095:static int fmtint (char *buffer, size_t *currlen, size_t maxlen,
;2096:    LLONG value, int base, int min, int max, int flags)
;2097:{
line 2098
;2098:  int signvalue = 0;
ADDRLP4 48
CNSTI4 0
ASGNI4
line 2101
;2099:  unsigned LLONG uvalue;
;2100:  char convert[24];
;2101:  int place = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2102
;2102:  int spadlen = 0; /* amount to space pad */
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2103
;2103:  int zpadlen = 0; /* amount to zero pad */
ADDRLP4 40
CNSTI4 0
ASGNI4
line 2105
;2104:  const char *digits;
;2105:  int total = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2107
;2106:
;2107:  if (max < 0)
ADDRFP4 24
INDIRI4
CNSTI4 0
GEI4 $673
line 2108
;2108:    max = 0;
ADDRFP4 24
CNSTI4 0
ASGNI4
LABELV $673
line 2110
;2109:
;2110:  uvalue = value;
ADDRLP4 8
ADDRFP4 12
INDIRI4
CVIU4 4
ASGNU4
line 2112
;2111:
;2112:  if(!(flags & DP_F_UNSIGNED))
ADDRFP4 28
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $675
line 2113
;2113:  {
line 2114
;2114:    if( value < 0 ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $677
line 2115
;2115:      signvalue = '-';
ADDRLP4 48
CNSTI4 45
ASGNI4
line 2116
;2116:      uvalue = -value;
ADDRLP4 8
ADDRFP4 12
INDIRI4
NEGI4
CVIU4 4
ASGNU4
line 2117
;2117:    }
ADDRGP4 $678
JUMPV
LABELV $677
line 2119
;2118:    else
;2119:      if (flags & DP_F_PLUS)  /* Do a sign (+/i) */
ADDRFP4 28
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $679
line 2120
;2120:        signvalue = '+';
ADDRLP4 48
CNSTI4 43
ASGNI4
ADDRGP4 $680
JUMPV
LABELV $679
line 2122
;2121:      else
;2122:        if (flags & DP_F_SPACE)
ADDRFP4 28
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $681
line 2123
;2123:          signvalue = ' ';
ADDRLP4 48
CNSTI4 32
ASGNI4
LABELV $681
LABELV $680
LABELV $678
line 2124
;2124:  }
LABELV $675
line 2126
;2125:
;2126:  if (flags & DP_F_UP)
ADDRFP4 28
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $683
line 2128
;2127:    /* Should characters be upper case? */
;2128:    digits = "0123456789ABCDEF";
ADDRLP4 44
ADDRGP4 $685
ASGNP4
ADDRGP4 $684
JUMPV
LABELV $683
line 2130
;2129:  else
;2130:    digits = "0123456789abcdef";
ADDRLP4 44
ADDRGP4 $686
ASGNP4
LABELV $684
LABELV $687
line 2132
;2131:
;2132:  do {
line 2133
;2133:    convert[place++] = digits[uvalue % (unsigned)base];
ADDRLP4 52
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 52
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 16
ADDP4
ADDRLP4 8
INDIRU4
ADDRFP4 16
INDIRI4
CVIU4 4
MODU4
ADDRLP4 44
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 2134
;2134:    uvalue = (uvalue / (unsigned)base );
ADDRLP4 8
ADDRLP4 8
INDIRU4
ADDRFP4 16
INDIRI4
CVIU4 4
DIVU4
ASGNU4
line 2135
;2135:  } while(uvalue && (place < sizeof (convert)));
LABELV $688
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $690
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 24
LTU4 $687
LABELV $690
line 2136
;2136:  if (place == sizeof (convert)) place--;
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 24
NEU4 $691
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $691
line 2137
;2137:  convert[place] = 0;
ADDRLP4 0
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 2139
;2138:
;2139:  zpadlen = max - place;
ADDRLP4 40
ADDRFP4 24
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
line 2140
;2140:  spadlen = min - MAX (max, place) - (signvalue ? 1 : 0);
ADDRFP4 24
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $695
ADDRLP4 52
ADDRFP4 24
INDIRI4
ASGNI4
ADDRGP4 $696
JUMPV
LABELV $695
ADDRLP4 52
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $696
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $697
ADDRLP4 56
CNSTI4 1
ASGNI4
ADDRGP4 $698
JUMPV
LABELV $697
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $698
ADDRLP4 4
ADDRFP4 20
INDIRI4
ADDRLP4 52
INDIRI4
SUBI4
ADDRLP4 56
INDIRI4
SUBI4
ASGNI4
line 2141
;2141:  if (zpadlen < 0) zpadlen = 0;
ADDRLP4 40
INDIRI4
CNSTI4 0
GEI4 $699
ADDRLP4 40
CNSTI4 0
ASGNI4
LABELV $699
line 2142
;2142:  if (spadlen < 0) spadlen = 0;
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $701
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $701
line 2143
;2143:  if (flags & DP_F_ZERO)
ADDRFP4 28
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $703
line 2144
;2144:  {
line 2145
;2145:    zpadlen = MAX(zpadlen, spadlen);
ADDRLP4 40
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $706
ADDRLP4 60
ADDRLP4 40
INDIRI4
ASGNI4
ADDRGP4 $707
JUMPV
LABELV $706
ADDRLP4 60
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $707
ADDRLP4 40
ADDRLP4 60
INDIRI4
ASGNI4
line 2146
;2146:    spadlen = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2147
;2147:  }
LABELV $703
line 2148
;2148:  if (flags & DP_F_MINUS)
ADDRFP4 28
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $711
line 2149
;2149:    spadlen = -spadlen; /* Left Justifty */
ADDRLP4 4
ADDRLP4 4
INDIRI4
NEGI4
ASGNI4
ADDRGP4 $711
JUMPV
LABELV $710
line 2158
;2150:
;2151:#ifdef DEBUG_SNPRINTF
;2152:  dprint (1, (debugfile, "zpad: %d, spad: %d, min: %d, max: %d, place: %d\n",
;2153:        zpadlen, spadlen, min, max, place));
;2154:#endif
;2155:
;2156:  /* Spaces */
;2157:  while (spadlen > 0)
;2158:  {
line 2159
;2159:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 60
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
ASGNI4
line 2160
;2160:    --spadlen;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2161
;2161:  }
LABELV $711
line 2157
ADDRLP4 4
INDIRI4
CNSTI4 0
GTI4 $710
line 2164
;2162:
;2163:  /* Sign */
;2164:  if (signvalue)
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $713
line 2165
;2165:    total += dopr_outch (buffer, currlen, maxlen, signvalue);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
CVII1 4
CVII4 1
ARGI4
ADDRLP4 60
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
ASGNI4
LABELV $713
line 2168
;2166:
;2167:  /* Zeros */
;2168:  if (zpadlen > 0)
ADDRLP4 40
INDIRI4
CNSTI4 0
LEI4 $721
line 2169
;2169:  {
ADDRGP4 $718
JUMPV
LABELV $717
line 2171
;2170:    while (zpadlen > 0)
;2171:    {
line 2172
;2172:      total += dopr_outch (buffer, currlen, maxlen, '0');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 48
ARGI4
ADDRLP4 64
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 64
INDIRI4
ADDI4
ASGNI4
line 2173
;2173:      --zpadlen;
ADDRLP4 40
ADDRLP4 40
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2174
;2174:    }
LABELV $718
line 2170
ADDRLP4 40
INDIRI4
CNSTI4 0
GTI4 $717
line 2175
;2175:  }
ADDRGP4 $721
JUMPV
LABELV $720
line 2179
;2176:
;2177:  /* Digits */
;2178:  while (place > 0)
;2179:    total += dopr_outch (buffer, currlen, maxlen, convert[--place]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 64
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
ADDRLP4 64
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 16
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 68
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 68
INDIRI4
ADDI4
ASGNI4
LABELV $721
line 2178
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $720
ADDRGP4 $724
JUMPV
LABELV $723
line 2182
;2180:
;2181:  /* Left Justified spaces */
;2182:  while (spadlen < 0) {
line 2183
;2183:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 72
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 72
INDIRI4
ADDI4
ASGNI4
line 2184
;2184:    ++spadlen;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2185
;2185:  }
LABELV $724
line 2182
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $723
line 2187
;2186:
;2187:  return total;
ADDRLP4 12
INDIRI4
RETI4
LABELV $672
endproc fmtint 76 16
proc abs_val 4 0
line 2191
;2188:}
;2189:
;2190:static LDOUBLE abs_val (LDOUBLE value)
;2191:{
line 2192
;2192:  LDOUBLE result = value;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 2194
;2193:
;2194:  if (value < 0)
ADDRFP4 0
INDIRF4
CNSTF4 0
GEF4 $727
line 2195
;2195:    result = -value;
ADDRLP4 0
ADDRFP4 0
INDIRF4
NEGF4
ASGNF4
LABELV $727
line 2197
;2196:
;2197:  return result;
ADDRLP4 0
INDIRF4
RETF4
LABELV $726
endproc abs_val 4 0
proc pow10 4 0
line 2201
;2198:}
;2199:
;2200:static LDOUBLE pow10 (int exp)
;2201:{
line 2202
;2202:  LDOUBLE result = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
ADDRGP4 $731
JUMPV
LABELV $730
line 2205
;2203:
;2204:  while (exp)
;2205:  {
line 2206
;2206:    result *= 10;
ADDRLP4 0
CNSTF4 1092616192
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 2207
;2207:    exp--;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2208
;2208:  }
LABELV $731
line 2204
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $730
line 2210
;2209:
;2210:  return result;
ADDRLP4 0
INDIRF4
RETF4
LABELV $729
endproc pow10 4 0
proc round 4 0
line 2214
;2211:}
;2212:
;2213:static long round (LDOUBLE value)
;2214:{
line 2217
;2215:  long intpart;
;2216:
;2217:  intpart = value;
ADDRLP4 0
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 2218
;2218:  value = value - intpart;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 2219
;2219:  if (value >= 0.5)
ADDRFP4 0
INDIRF4
CNSTF4 1056964608
LTF4 $734
line 2220
;2220:    intpart++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $734
line 2222
;2221:
;2222:  return intpart;
ADDRLP4 0
INDIRI4
RETI4
LABELV $733
endproc round 4 0
proc fmtfp 136 16
line 2227
;2223:}
;2224:
;2225:static int fmtfp (char *buffer, size_t *currlen, size_t maxlen,
;2226:    LDOUBLE fvalue, int min, int max, int flags)
;2227:{
line 2228
;2228:  int signvalue = 0;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 2232
;2229:  LDOUBLE ufvalue;
;2230:  char iconvert[20];
;2231:  char fconvert[20];
;2232:  int iplace = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2233
;2233:  int fplace = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2234
;2234:  int padlen = 0; /* amount to pad */
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2235
;2235:  int zpadlen = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 2236
;2236:  int caps = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 2237
;2237:  int total = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2245
;2238:  long intpart;
;2239:  long fracpart;
;2240:
;2241:  /*
;2242:   * AIX manpage says the default is 0, but Solaris says the default
;2243:   * is 6, and sprintf on AIX defaults to 6
;2244:   */
;2245:  if (max < 0)
ADDRFP4 20
INDIRI4
CNSTI4 0
GEI4 $737
line 2246
;2246:    max = 6;
ADDRFP4 20
CNSTI4 6
ASGNI4
LABELV $737
line 2248
;2247:
;2248:  ufvalue = abs_val (fvalue);
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 80
ADDRGP4 abs_val
CALLF4
ASGNF4
ADDRLP4 76
ADDRLP4 80
INDIRF4
ASGNF4
line 2250
;2249:
;2250:  if (fvalue < 0)
ADDRFP4 12
INDIRF4
CNSTF4 0
GEF4 $739
line 2251
;2251:    signvalue = '-';
ADDRLP4 72
CNSTI4 45
ASGNI4
ADDRGP4 $740
JUMPV
LABELV $739
line 2253
;2252:  else
;2253:    if (flags & DP_F_PLUS)  /* Do a sign (+/i) */
ADDRFP4 24
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $741
line 2254
;2254:      signvalue = '+';
ADDRLP4 72
CNSTI4 43
ASGNI4
ADDRGP4 $742
JUMPV
LABELV $741
line 2256
;2255:    else
;2256:      if (flags & DP_F_SPACE)
ADDRFP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $743
line 2257
;2257:        signvalue = ' ';
ADDRLP4 72
CNSTI4 32
ASGNI4
LABELV $743
LABELV $742
LABELV $740
line 2263
;2258:
;2259:#if 0
;2260:  if (flags & DP_F_UP) caps = 1; /* Should characters be upper case? */
;2261:#endif
;2262:
;2263:  intpart = ufvalue;
ADDRLP4 12
ADDRLP4 76
INDIRF4
CVFI4 4
ASGNI4
line 2269
;2264:
;2265:  /*
;2266:   * Sorry, we only support 9 digits past the decimal because of our
;2267:   * conversion method
;2268:   */
;2269:  if (max > 9)
ADDRFP4 20
INDIRI4
CNSTI4 9
LEI4 $745
line 2270
;2270:    max = 9;
ADDRFP4 20
CNSTI4 9
ASGNI4
LABELV $745
line 2275
;2271:
;2272:  /* We "cheat" by converting the fractional part to integer by
;2273:   * multiplying by a factor of 10
;2274:   */
;2275:  fracpart = round ((pow10 (max)) * (ufvalue - intpart));
ADDRFP4 20
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 pow10
CALLF4
ASGNF4
ADDRLP4 84
INDIRF4
ADDRLP4 76
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
SUBF4
MULF4
ARGF4
ADDRLP4 88
ADDRGP4 round
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 88
INDIRI4
ASGNI4
line 2277
;2276:
;2277:  if (fracpart >= pow10 (max))
ADDRFP4 20
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 pow10
CALLF4
ASGNF4
ADDRLP4 16
INDIRI4
CVIF4 4
ADDRLP4 92
INDIRF4
LTF4 $747
line 2278
;2278:  {
line 2279
;2279:    intpart++;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2280
;2280:    fracpart -= pow10 (max);
ADDRFP4 20
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 pow10
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRI4
CVIF4 4
ADDRLP4 96
INDIRF4
SUBF4
CVFI4 4
ASGNI4
line 2281
;2281:  }
LABELV $747
LABELV $749
line 2288
;2282:
;2283:#ifdef DEBUG_SNPRINTF
;2284:  dprint (1, (debugfile, "fmtfp: %f =? %d.%d\n", fvalue, intpart, fracpart));
;2285:#endif
;2286:
;2287:  /* Convert integer part */
;2288:  do {
line 2289
;2289:    iconvert[iplace++] =
ADDRLP4 100
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 100
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $753
ADDRLP4 96
ADDRGP4 $685
ASGNP4
ADDRGP4 $754
JUMPV
LABELV $753
ADDRLP4 96
ADDRGP4 $686
ASGNP4
LABELV $754
ADDRLP4 100
INDIRI4
ADDRLP4 24
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 10
MODI4
ADDRLP4 96
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 2291
;2290:      (caps? "0123456789ABCDEF":"0123456789abcdef")[intpart % 10];
;2291:    intpart = (intpart / 10);
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 2292
;2292:  } while(intpart && (iplace < 20));
LABELV $750
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $755
ADDRLP4 8
INDIRI4
CNSTI4 20
LTI4 $749
LABELV $755
line 2293
;2293:  if (iplace == 20) iplace--;
ADDRLP4 8
INDIRI4
CNSTI4 20
NEI4 $756
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $756
line 2294
;2294:  iconvert[iplace] = 0;
ADDRLP4 8
INDIRI4
ADDRLP4 24
ADDP4
CNSTI1 0
ASGNI1
LABELV $758
line 2297
;2295:
;2296:  /* Convert fractional part */
;2297:  do {
line 2298
;2298:    fconvert[fplace++] =
ADDRLP4 100
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 100
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $762
ADDRLP4 96
ADDRGP4 $685
ASGNP4
ADDRGP4 $763
JUMPV
LABELV $762
ADDRLP4 96
ADDRGP4 $686
ASGNP4
LABELV $763
ADDRLP4 100
INDIRI4
ADDRLP4 48
ADDP4
ADDRLP4 16
INDIRI4
CNSTI4 10
MODI4
ADDRLP4 96
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 2300
;2299:      (caps? "0123456789ABCDEF":"0123456789abcdef")[fracpart % 10];
;2300:    fracpart = (fracpart / 10);
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 2301
;2301:  } while(fracpart && (fplace < 20));
LABELV $759
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $764
ADDRLP4 20
INDIRI4
CNSTI4 20
LTI4 $758
LABELV $764
line 2302
;2302:  if (fplace == 20) fplace--;
ADDRLP4 20
INDIRI4
CNSTI4 20
NEI4 $765
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $765
line 2303
;2303:  fconvert[fplace] = 0;
ADDRLP4 20
INDIRI4
ADDRLP4 48
ADDP4
CNSTI1 0
ASGNI1
line 2306
;2304:
;2305:  /* -1 for decimal point, another -1 if we are printing a sign */
;2306:  padlen = min - iplace - max - 1 - ((signvalue) ? 1 : 0);
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $768
ADDRLP4 96
CNSTI4 1
ASGNI4
ADDRGP4 $769
JUMPV
LABELV $768
ADDRLP4 96
CNSTI4 0
ASGNI4
LABELV $769
ADDRLP4 0
ADDRFP4 16
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ADDRFP4 20
INDIRI4
SUBI4
CNSTI4 1
SUBI4
ADDRLP4 96
INDIRI4
SUBI4
ASGNI4
line 2307
;2307:  zpadlen = max - fplace;
ADDRLP4 68
ADDRFP4 20
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 2308
;2308:  if (zpadlen < 0)
ADDRLP4 68
INDIRI4
CNSTI4 0
GEI4 $770
line 2309
;2309:    zpadlen = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
LABELV $770
line 2310
;2310:  if (padlen < 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $772
line 2311
;2311:    padlen = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $772
line 2312
;2312:  if (flags & DP_F_MINUS)
ADDRFP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $774
line 2313
;2313:    padlen = -padlen; /* Left Justifty */
ADDRLP4 0
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
LABELV $774
line 2315
;2314:
;2315:  if ((flags & DP_F_ZERO) && (padlen > 0))
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRFP4 24
INDIRI4
CNSTI4 16
BANDI4
ADDRLP4 100
INDIRI4
EQI4 $784
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
LEI4 $784
line 2316
;2316:  {
line 2317
;2317:    if (signvalue)
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $781
line 2318
;2318:    {
line 2319
;2319:      total += dopr_outch (buffer, currlen, maxlen, signvalue);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
CVII1 4
CVII4 1
ARGI4
ADDRLP4 104
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
ASGNI4
line 2320
;2320:      --padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2321
;2321:      signvalue = 0;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 2322
;2322:    }
ADDRGP4 $781
JUMPV
LABELV $780
line 2324
;2323:    while (padlen > 0)
;2324:    {
line 2325
;2325:      total += dopr_outch (buffer, currlen, maxlen, '0');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 48
ARGI4
ADDRLP4 104
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
ASGNI4
line 2326
;2326:      --padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2327
;2327:    }
LABELV $781
line 2323
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $780
line 2328
;2328:  }
ADDRGP4 $784
JUMPV
LABELV $783
line 2330
;2329:  while (padlen > 0)
;2330:  {
line 2331
;2331:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 104
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
ASGNI4
line 2332
;2332:    --padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2333
;2333:  }
LABELV $784
line 2329
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $783
line 2334
;2334:  if (signvalue)
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $789
line 2335
;2335:    total += dopr_outch (buffer, currlen, maxlen, signvalue);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
CVII1 4
CVII4 1
ARGI4
ADDRLP4 104
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $789
JUMPV
LABELV $788
line 2338
;2336:
;2337:  while (iplace > 0)
;2338:    total += dopr_outch (buffer, currlen, maxlen, iconvert[--iplace]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 108
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
ADDRLP4 108
INDIRI4
ASGNI4
ADDRLP4 108
INDIRI4
ADDRLP4 24
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 112
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 112
INDIRI4
ADDI4
ASGNI4
LABELV $789
line 2337
ADDRLP4 8
INDIRI4
CNSTI4 0
GTI4 $788
line 2344
;2339:
;2340:  /*
;2341:   * Decimal point.  This should probably use locale to find the correct
;2342:   * char to print out.
;2343:   */
;2344:  if (max > 0)
ADDRFP4 20
INDIRI4
CNSTI4 0
LEI4 $800
line 2345
;2345:  {
line 2346
;2346:    total += dopr_outch (buffer, currlen, maxlen, '.');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 46
ARGI4
ADDRLP4 116
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 116
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $794
JUMPV
LABELV $793
line 2349
;2347:
;2348:    while (zpadlen-- > 0)
;2349:      total += dopr_outch (buffer, currlen, maxlen, '0');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 48
ARGI4
ADDRLP4 120
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 120
INDIRI4
ADDI4
ASGNI4
LABELV $794
line 2348
ADDRLP4 124
ADDRLP4 68
INDIRI4
ASGNI4
ADDRLP4 68
ADDRLP4 124
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 0
GTI4 $793
ADDRGP4 $797
JUMPV
LABELV $796
line 2352
;2350:
;2351:    while (fplace > 0)
;2352:      total += dopr_outch (buffer, currlen, maxlen, fconvert[--fplace]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 128
ADDRLP4 20
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 20
ADDRLP4 128
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
ADDRLP4 48
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 132
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 132
INDIRI4
ADDI4
ASGNI4
LABELV $797
line 2351
ADDRLP4 20
INDIRI4
CNSTI4 0
GTI4 $796
line 2353
;2353:  }
ADDRGP4 $800
JUMPV
LABELV $799
line 2356
;2354:
;2355:  while (padlen < 0)
;2356:  {
line 2357
;2357:    total += dopr_outch (buffer, currlen, maxlen, ' ');
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 32
ARGI4
ADDRLP4 116
ADDRGP4 dopr_outch
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 116
INDIRI4
ADDI4
ASGNI4
line 2358
;2358:    ++padlen;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2359
;2359:  }
LABELV $800
line 2355
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $799
line 2361
;2360:
;2361:  return total;
ADDRLP4 4
INDIRI4
RETI4
LABELV $736
endproc fmtfp 136 16
proc dopr_outch 8 0
ADDRFP4 12
ADDRFP4 12
INDIRI4
CVII1 4
ASGNI1
line 2365
;2362:}
;2363:
;2364:static int dopr_outch (char *buffer, size_t *currlen, size_t maxlen, char c)
;2365:{
line 2366
;2366:  if (*currlen + 1 < maxlen)
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 8
INDIRI4
GEI4 $803
line 2367
;2367:    buffer[(*currlen)++] = c;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRFP4 12
INDIRI1
ASGNI1
LABELV $803
line 2368
;2368:  return 1;
CNSTI4 1
RETI4
LABELV $802
endproc dopr_outch 8 0
export Q_vsnprintf
proc Q_vsnprintf 4 16
line 2372
;2369:}
;2370:
;2371:int Q_vsnprintf(char *str, size_t length, const char *fmt, va_list args)
;2372:{
line 2373
;2373:  if (str != NULL)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $806
line 2374
;2374:    str[0] = 0;
ADDRFP4 0
INDIRP4
CNSTI1 0
ASGNI1
LABELV $806
line 2375
;2375:  return dopr(str, length, fmt, args);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 dopr
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $805
endproc Q_vsnprintf 4 16
export Q_snprintf
proc Q_snprintf 12 16
line 2379
;2376:}
;2377:
;2378:int Q_snprintf(char *str, size_t length, const char *fmt, ...)
;2379:{
line 2383
;2380:  va_list ap;
;2381:  int retval;
;2382:
;2383:  va_start(ap, fmt);
ADDRLP4 0
ADDRFP4 8+4
ASGNP4
line 2384
;2384:  retval = Q_vsnprintf(str, length, fmt, ap);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_vsnprintf
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 2385
;2385:  va_end(ap);
ADDRLP4 0
CNSTP4 0
ASGNP4
line 2387
;2386:
;2387:  return retval;
ADDRLP4 4
INDIRI4
RETI4
LABELV $808
endproc Q_snprintf 12 16
export AddInt
proc AddInt 56 0
line 2408
;2388:}
;2389:
;2390://=========================================================
;2391:
;2392:
;2393:#define ALT       0x00000001    /* alternate form */
;2394:#define HEX       0x00000002    /* hexadecimal  */
;2395:#define LADJUST   0x00000004    /* left adjustment */
;2396:#define LONGDBL   0x00000008    /* long double */
;2397:#define LONGINT   0x00000010    /* long integer */
;2398:#define QUADINT   0x00000020    /* quad integer */
;2399:#define SHORTINT  0x00000040    /* short integer */
;2400:#define ZEROPAD   0x00000080    /* zero (as opposed to blank) pad */
;2401:#define FPT       0x00000100    /* floating point number */
;2402:
;2403:#define to_digit(c)   ((c) - '0')
;2404:#define is_digit(c)   ((unsigned)to_digit(c) <= 9)
;2405:#define to_char(n)    ((n) + '0')
;2406:
;2407:void AddInt( char **buf_p, int val, int width, int flags )
;2408:{
line 2413
;2409:  char  text[ 32 ];
;2410:  int   digits;
;2411:  char  *buf;
;2412:
;2413:  digits = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2415
;2414:
;2415:  if( flags & HEX )
ADDRFP4 12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $811
line 2416
;2416:  {
line 2418
;2417:    char c;
;2418:    int n = 0;
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRGP4 $814
JUMPV
LABELV $813
line 2421
;2419:
;2420:    while( n < 32 )
;2421:    {
line 2422
;2422:      c = "0123456789abcdef"[ ( val >> n ) & 0xF ];
ADDRLP4 44
ADDRFP4 4
INDIRI4
ADDRLP4 40
INDIRI4
RSHI4
CNSTI4 15
BANDI4
ADDRGP4 $686
ADDP4
INDIRI1
ASGNI1
line 2423
;2423:      n += 4;
ADDRLP4 40
ADDRLP4 40
INDIRI4
CNSTI4 4
ADDI4
ASGNI4
line 2424
;2424:      if( c == '0' && !digits )
ADDRLP4 44
INDIRI1
CVII4 1
CNSTI4 48
NEI4 $816
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $816
line 2425
;2425:        continue;
ADDRGP4 $814
JUMPV
LABELV $816
line 2426
;2426:      text[ digits++ ] = c;
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 44
INDIRI1
ASGNI1
line 2427
;2427:    }
LABELV $814
line 2420
ADDRLP4 40
INDIRI4
CNSTI4 32
LTI4 $813
line 2428
;2428:    text[ digits ] = '\0';
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
CNSTI1 0
ASGNI1
line 2429
;2429:  }
ADDRGP4 $812
JUMPV
LABELV $811
line 2431
;2430:  else
;2431:  {
line 2432
;2432:    int   signedVal = val;
ADDRLP4 40
ADDRFP4 4
INDIRI4
ASGNI4
line 2434
;2433:
;2434:    if( val < 0 )
ADDRFP4 4
INDIRI4
CNSTI4 0
GEI4 $818
line 2435
;2435:      val = -val;
ADDRFP4 4
ADDRFP4 4
INDIRI4
NEGI4
ASGNI4
LABELV $818
LABELV $820
line 2437
;2436:    do
;2437:    {
line 2438
;2438:      text[ digits++ ] = '0' + val % 10;
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 2439
;2439:      val /= 10;
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 2440
;2440:    } while( val );
LABELV $821
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $820
line 2442
;2441:
;2442:    if( signedVal < 0 )
ADDRLP4 40
INDIRI4
CNSTI4 0
GEI4 $823
line 2443
;2443:      text[ digits++ ] = '-';
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
CNSTI1 45
ASGNI1
LABELV $823
line 2444
;2444:  }
LABELV $812
line 2446
;2445:
;2446:  buf = *buf_p;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 2448
;2447:
;2448:  if( !( flags & LADJUST ) )
ADDRFP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
NEI4 $834
line 2449
;2449:  {
ADDRGP4 $828
JUMPV
LABELV $827
line 2451
;2450:    while( digits < width )
;2451:    {
line 2452
;2452:      *buf++ = ( flags & ZEROPAD ) ? '0' : ' ';
ADDRLP4 44
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 44
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRFP4 12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $831
ADDRLP4 40
CNSTI4 48
ASGNI4
ADDRGP4 $832
JUMPV
LABELV $831
ADDRLP4 40
CNSTI4 32
ASGNI4
LABELV $832
ADDRLP4 44
INDIRP4
ADDRLP4 40
INDIRI4
CVII1 4
ASGNI1
line 2453
;2453:      width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2454
;2454:    }
LABELV $828
line 2450
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $827
line 2455
;2455:  }
ADDRGP4 $834
JUMPV
LABELV $833
line 2458
;2456:
;2457:  while( digits-- )
;2458:  {
line 2459
;2459:    *buf++ = text[ digits ];
ADDRLP4 40
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 40
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 2460
;2460:    width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2461
;2461:  }
LABELV $834
line 2457
ADDRLP4 40
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $833
line 2463
;2462:
;2463:  if( flags & LADJUST )
ADDRFP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $836
line 2464
;2464:  {
ADDRGP4 $839
JUMPV
LABELV $838
line 2466
;2465:    while( width-- > 0 )
;2466:      *buf++ = ( flags & ZEROPAD ) ? '0' : ' ';
ADDRLP4 48
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRFP4 12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $842
ADDRLP4 44
CNSTI4 48
ASGNI4
ADDRGP4 $843
JUMPV
LABELV $842
ADDRLP4 44
CNSTI4 32
ASGNI4
LABELV $843
ADDRLP4 48
INDIRP4
ADDRLP4 44
INDIRI4
CVII1 4
ASGNI1
LABELV $839
line 2465
ADDRLP4 52
ADDRFP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 52
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
GTI4 $838
line 2467
;2467:  }
LABELV $836
line 2469
;2468:
;2469:  *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 2470
;2470:}
LABELV $810
endproc AddInt 56 0
export AddFloat
proc AddFloat 72 0
line 2473
;2471:
;2472:void AddFloat( char **buf_p, float fval, int width, int prec )
;2473:{
line 2481
;2474:  char  text[ 32 ];
;2475:  int   digits;
;2476:  float signedVal;
;2477:  char  *buf;
;2478:  int   val;
;2479:
;2480:  // get the sign
;2481:  signedVal = fval;
ADDRLP4 44
ADDRFP4 4
INDIRF4
ASGNF4
line 2482
;2482:  if( fval < 0 )
ADDRFP4 4
INDIRF4
CNSTF4 0
GEF4 $845
line 2483
;2483:    fval = -fval;
ADDRFP4 4
ADDRFP4 4
INDIRF4
NEGF4
ASGNF4
LABELV $845
line 2486
;2484:
;2485:  // write the float number
;2486:  digits = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2487
;2487:  val = (int)fval;
ADDRLP4 4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
LABELV $847
line 2490
;2488:
;2489:  do
;2490:  {
line 2491
;2491:    text[ digits++ ] = '0' + val % 10;
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 2492
;2492:    val /= 10;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 2493
;2493:  } while( val );
LABELV $848
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $847
line 2495
;2494:
;2495:  if( signedVal < 0 )
ADDRLP4 44
INDIRF4
CNSTF4 0
GEF4 $850
line 2496
;2496:    text[digits++] = '-';
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
CNSTI1 45
ASGNI1
LABELV $850
line 2498
;2497:
;2498:  buf = *buf_p;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $853
JUMPV
LABELV $852
line 2501
;2499:
;2500:  while( digits < width )
;2501:    *buf++ = ' ';
ADDRLP4 52
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 52
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI1 32
ASGNI1
LABELV $853
line 2500
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $852
line 2502
;2502:    width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $856
JUMPV
LABELV $855
line 2505
;2503:
;2504:  while( digits-- )
;2505:    *buf++ = text[ digits ];
ADDRLP4 56
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 56
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
LABELV $856
line 2504
ADDRLP4 60
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $855
line 2507
;2506:
;2507:  *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRP4
ASGNP4
line 2509
;2508:
;2509:  if( prec < 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $858
line 2510
;2510:    prec = 6;
ADDRFP4 12
CNSTI4 6
ASGNI4
LABELV $858
line 2513
;2511:
;2512:  // write the fraction
;2513:  digits = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $861
JUMPV
LABELV $860
line 2516
;2514:
;2515:  while( digits < prec )
;2516:  {
line 2517
;2517:    fval -= (int)fval;
ADDRLP4 64
ADDRFP4 4
INDIRF4
ASGNF4
ADDRFP4 4
ADDRLP4 64
INDIRF4
ADDRLP4 64
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 2518
;2518:    fval *= 10.0;
ADDRFP4 4
CNSTF4 1092616192
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 2519
;2519:    val = (int)fval;
ADDRLP4 4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 2520
;2520:    text[ digits++ ] = '0' + val % 10;
ADDRLP4 68
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 68
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 68
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 2521
;2521:  }
LABELV $861
line 2515
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $860
line 2523
;2522:
;2523:  if( digits > 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $863
line 2524
;2524:  {
line 2525
;2525:    buf = *buf_p;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 2526
;2526:    *buf++ = '.';
ADDRLP4 64
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 64
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI1 46
ASGNI1
line 2527
;2527:    for( prec = 0; prec < digits; prec++ )
ADDRFP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $868
JUMPV
LABELV $865
line 2528
;2528:      *buf++ = text[ prec ];
ADDRLP4 68
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 68
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRFP4 12
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
LABELV $866
line 2527
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $868
ADDRFP4 12
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $865
line 2530
;2529:
;2530:    *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRP4
ASGNP4
line 2531
;2531:  }
LABELV $863
line 2532
;2532:}
LABELV $844
endproc AddFloat 72 0
export AddVec3_t
proc AddVec3_t 20 16
line 2535
;2533:
;2534:void AddVec3_t( char **buf_p, vec3_t v, int width, int prec )
;2535:{
line 2538
;2536:  char *buf;
;2537:
;2538:  buf = *buf_p;
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 2540
;2539:
;2540:  *buf++ = '[';
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI1 91
ASGNI1
line 2542
;2541:
;2542:  AddFloat( &buf, v[ 0 ], width, prec );
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
INDIRF4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 AddFloat
CALLV
pop
line 2543
;2543:  buf += width;
ADDRLP4 0
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ASGNP4
line 2544
;2544:  *buf++ = ' ';
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI1 32
ASGNI1
line 2546
;2545:
;2546:  AddFloat( &buf, v[ 1 ], width, prec );
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 AddFloat
CALLV
pop
line 2547
;2547:  buf += width;
ADDRLP4 0
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ASGNP4
line 2548
;2548:  *buf++ = ' ';
ADDRLP4 12
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI1 32
ASGNI1
line 2550
;2549:
;2550:  AddFloat( &buf, v[ 2 ], width, prec );
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 AddFloat
CALLV
pop
line 2551
;2551:  buf += width;
ADDRLP4 0
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ASGNP4
line 2552
;2552:  *buf++ = ']';
ADDRLP4 16
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI1 93
ASGNI1
line 2554
;2553:
;2554:  *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 2555
;2555:}
LABELV $869
endproc AddVec3_t 20 16
export AddString
proc AddString 36 4
line 2558
;2556:
;2557:void AddString( char **buf_p, char *string, int width, int prec )
;2558:{
line 2562
;2559:  int   size;
;2560:  char  *buf;
;2561:
;2562:  buf = *buf_p;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 2564
;2563:
;2564:  if( string == NULL )
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $871
line 2565
;2565:  {
line 2566
;2566:    string = "(null)";
ADDRFP4 4
ADDRGP4 $873
ASGNP4
line 2567
;2567:    prec = -1;
ADDRFP4 12
CNSTI4 -1
ASGNI4
line 2568
;2568:  }
LABELV $871
line 2570
;2569:
;2570:  if( prec >= 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
LTI4 $874
line 2571
;2571:  {
line 2572
;2572:    for( size = 0; size < prec; size++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $879
JUMPV
LABELV $876
line 2573
;2573:    {
line 2574
;2574:      if( string[ size ] == '\0' )
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $880
line 2575
;2575:        break;
ADDRGP4 $875
JUMPV
LABELV $880
line 2576
;2576:    }
LABELV $877
line 2572
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $879
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $876
line 2577
;2577:  }
ADDRGP4 $875
JUMPV
LABELV $874
line 2579
;2578:  else
;2579:    size = strlen( string );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $875
line 2581
;2580:
;2581:  width -= size;
ADDRFP4 8
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
ADDRGP4 $883
JUMPV
LABELV $882
line 2584
;2582:
;2583:  while( size-- )
;2584:    *buf++ = *string++;
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ASGNP4
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 16
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI1
ASGNI1
LABELV $883
line 2583
ADDRLP4 24
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $882
ADDRGP4 $886
JUMPV
LABELV $885
line 2587
;2585:
;2586:  while( width-- > 0 )
;2587:    *buf++ = ' ';
ADDRLP4 28
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI1 32
ASGNI1
LABELV $886
line 2586
ADDRLP4 32
ADDRFP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 32
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
GTI4 $885
line 2589
;2588:
;2589:  *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 2590
;2590:}
LABELV $870
endproc AddString 36 4
export vsprintf
proc vsprintf 84 16
line 2601
;2591:
;2592:/*
;2593:vsprintf
;2594:
;2595:I'm not going to support a bunch of the more arcane stuff in here
;2596:just to keep it simpler.  For example, the '*' and '$' are not
;2597:currently supported.  I've tried to make it so that it will just
;2598:parse and ignore formats we don't support.
;2599:*/
;2600:int vsprintf( char *buffer, const char *fmt, va_list argptr )
;2601:{
line 2611
;2602:  int   *arg;
;2603:  char  *buf_p;
;2604:  char  ch;
;2605:  int   flags;
;2606:  int   width;
;2607:  int   prec;
;2608:  int   n;
;2609:  char  sign;
;2610:
;2611:  buf_p = buffer;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 2612
;2612:  arg = (int *)argptr;
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 $890
JUMPV
LABELV $889
line 2615
;2613:
;2614:  while( qtrue )
;2615:  {
line 2617
;2616:    // run through the format string until we hit a '%' or '\0'
;2617:    for( ch = *fmt; ( ch = *fmt ) != '\0' && ch != '%'; fmt++ )
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRGP4 $895
JUMPV
LABELV $892
line 2618
;2618:      *buf_p++ = ch;
ADDRLP4 32
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 0
INDIRI1
ASGNI1
LABELV $893
line 2617
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $895
ADDRLP4 36
ADDRFP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 0
ADDRLP4 36
INDIRI1
ASGNI1
ADDRLP4 36
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $896
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 37
NEI4 $892
LABELV $896
line 2620
;2619:
;2620:    if( ch == '\0' )
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $897
line 2621
;2621:      goto done;
ADDRGP4 $899
JUMPV
LABELV $897
line 2624
;2622:
;2623:    // skip over the '%'
;2624:    fmt++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 2627
;2625:
;2626:    // reset formatting state
;2627:    flags = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 2628
;2628:    width = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2629
;2629:    prec = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 2630
;2630:    sign = '\0';
ADDRLP4 28
CNSTI1 0
ASGNI1
LABELV $900
line 2633
;2631:
;2632:rflag:
;2633:    ch = *fmt++;
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 40
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
LABELV $901
line 2635
;2634:reswitch:
;2635:    switch( ch )
ADDRLP4 44
ADDRLP4 0
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 99
LTI4 $925
ADDRLP4 44
INDIRI4
CNSTI4 105
GTI4 $926
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $927-396
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $927
address $918
address $919
address $902
address $920
address $902
address $902
address $919
code
LABELV $925
ADDRLP4 44
INDIRI4
CNSTI4 37
LTI4 $902
ADDRLP4 44
INDIRI4
CNSTI4 57
GTI4 $902
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $929-148
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $929
address $924
address $902
address $902
address $902
address $902
address $902
address $902
address $902
address $905
address $906
address $902
address $913
address $914
address $914
address $914
address $914
address $914
address $914
address $914
address $914
address $914
code
LABELV $926
ADDRLP4 44
INDIRI4
CNSTI4 115
EQI4 $921
ADDRLP4 44
INDIRI4
CNSTI4 118
EQI4 $922
ADDRLP4 44
INDIRI4
CNSTI4 120
EQI4 $923
ADDRGP4 $902
JUMPV
line 2636
;2636:    {
LABELV $905
line 2638
;2637:      case '-':
;2638:        flags |= LADJUST;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 2639
;2639:        goto rflag;
ADDRGP4 $900
JUMPV
LABELV $906
line 2642
;2640:
;2641:      case '.':
;2642:        n = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $908
JUMPV
LABELV $907
line 2644
;2643:        while( is_digit( ( ch = *fmt++ ) ) )
;2644:          n = 10 * n + ( ch - '0' );
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
LABELV $908
line 2643
ADDRLP4 60
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 60
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 64
ADDRLP4 60
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 0
ADDRLP4 64
INDIRI1
ASGNI1
ADDRLP4 64
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CVIU4 4
CNSTU4 9
LEU4 $907
line 2646
;2645:
;2646:        prec = n < 0 ? -1 : n;
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $911
ADDRLP4 68
CNSTI4 -1
ASGNI4
ADDRGP4 $912
JUMPV
LABELV $911
ADDRLP4 68
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $912
ADDRLP4 20
ADDRLP4 68
INDIRI4
ASGNI4
line 2647
;2647:        goto reswitch;
ADDRGP4 $901
JUMPV
LABELV $913
line 2650
;2648:
;2649:      case '0':
;2650:        flags |= ZEROPAD;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 2651
;2651:        goto rflag;
ADDRGP4 $900
JUMPV
LABELV $914
line 2662
;2652:
;2653:      case '1':
;2654:      case '2':
;2655:      case '3':
;2656:      case '4':
;2657:      case '5':
;2658:      case '6':
;2659:      case '7':
;2660:      case '8':
;2661:      case '9':
;2662:        n = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $915
line 2664
;2663:        do
;2664:        {
line 2665
;2665:          n = 10 * n + ( ch - '0' );
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
line 2666
;2666:          ch = *fmt++;
ADDRLP4 72
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 72
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
INDIRI1
ASGNI1
line 2667
;2667:        } while( is_digit( ch ) );
LABELV $916
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CVIU4 4
CNSTU4 9
LEU4 $915
line 2669
;2668:
;2669:        width = n;
ADDRLP4 12
ADDRLP4 8
INDIRI4
ASGNI4
line 2670
;2670:        goto reswitch;
ADDRGP4 $901
JUMPV
LABELV $918
line 2673
;2671:
;2672:      case 'c':
;2673:        *buf_p++ = (char)*arg;
ADDRLP4 72
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CVII1 4
ASGNI1
line 2674
;2674:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2675
;2675:        break;
ADDRGP4 $903
JUMPV
LABELV $919
line 2679
;2676:
;2677:      case 'd':
;2678:      case 'i':
;2679:        AddInt( &buf_p, *arg, width, flags );
ADDRLP4 4
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 AddInt
CALLV
pop
line 2680
;2680:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2681
;2681:        break;
ADDRGP4 $903
JUMPV
LABELV $920
line 2684
;2682:
;2683:      case 'f':
;2684:        AddFloat( &buf_p, *(double *)arg, width, prec );
ADDRLP4 4
ARGP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddFloat
CALLV
pop
line 2686
;2685:#ifdef Q3_VM
;2686:        arg += 1; // everything is 32 bit in my compiler
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2690
;2687:#else
;2688:        arg += 2;
;2689:#endif
;2690:        break;
ADDRGP4 $903
JUMPV
LABELV $921
line 2693
;2691:
;2692:      case 's':
;2693:        AddString( &buf_p, (char *)*arg, width, prec );
ADDRLP4 4
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
CVIU4 4
CVUP4 4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddString
CALLV
pop
line 2694
;2694:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2695
;2695:        break;
ADDRGP4 $903
JUMPV
LABELV $922
line 2698
;2696:
;2697:      case 'v':
;2698:        AddVec3_t( &buf_p, (vec_t *)*arg, width, prec );
ADDRLP4 4
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
CVIU4 4
CVUP4 4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddVec3_t
CALLV
pop
line 2699
;2699:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2700
;2700:        break;
ADDRGP4 $903
JUMPV
LABELV $923
line 2703
;2701:
;2702:      case 'x':
;2703:        flags |= HEX;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 2704
;2704:        AddInt( &buf_p, *arg, width, prec );
ADDRLP4 4
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddInt
CALLV
pop
line 2705
;2705:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2706
;2706:        break;
ADDRGP4 $903
JUMPV
LABELV $924
line 2709
;2707:
;2708:      case '%':
;2709:        *buf_p++ = ch;
ADDRLP4 76
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 0
INDIRI1
ASGNI1
line 2710
;2710:        break;
ADDRGP4 $903
JUMPV
LABELV $902
line 2713
;2711:
;2712:      default:
;2713:        *buf_p++ = (char)*arg;
ADDRLP4 80
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 80
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CVII1 4
ASGNI1
line 2714
;2714:        arg++;
ADDRLP4 16
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2715
;2715:        break;
LABELV $903
line 2717
;2716:    }
;2717:  }
LABELV $890
line 2614
ADDRGP4 $889
JUMPV
LABELV $899
line 2720
;2718:
;2719:done:
;2720:  *buf_p = 0;
ADDRLP4 4
INDIRP4
CNSTI1 0
ASGNI1
line 2721
;2721:  return buf_p - buffer;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
RETI4
LABELV $888
endproc vsprintf 84 16
export sscanf
proc sscanf 36 4
line 2726
;2722:}
;2723:
;2724:/* this is really crappy */
;2725:int sscanf( const char *buffer, const char *fmt, ... )
;2726:{
line 2731
;2727:  int cmd;
;2728:  int **arg;
;2729:  int count;
;2730:
;2731:  arg = (int **)&fmt + 1;
ADDRLP4 4
ADDRFP4 4+4
ASGNP4
line 2732
;2732:  count = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $934
JUMPV
LABELV $933
line 2735
;2733:
;2734:  while( *fmt )
;2735:  {
line 2736
;2736:    if( fmt[ 0 ] != '%' )
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 37
EQI4 $936
line 2737
;2737:    {
line 2738
;2738:      fmt++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 2739
;2739:      continue;
ADDRGP4 $934
JUMPV
LABELV $936
line 2742
;2740:    }
;2741:
;2742:    cmd = fmt[ 1 ];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 2743
;2743:    fmt += 2;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 2745
;2744:
;2745:    switch( cmd )
ADDRLP4 16
CNSTI4 100
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $940
ADDRLP4 0
INDIRI4
CNSTI4 102
EQI4 $941
ADDRLP4 0
INDIRI4
CNSTI4 105
EQI4 $940
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $938
LABELV $943
ADDRLP4 0
INDIRI4
CNSTI4 117
EQI4 $940
ADDRLP4 0
INDIRI4
CNSTI4 120
EQI4 $942
ADDRGP4 $938
JUMPV
line 2746
;2746:    {
LABELV $940
line 2750
;2747:      case 'i':
;2748:      case 'd':
;2749:      case 'u':
;2750:        **arg = _atoi( &buffer );
ADDRFP4 0
ARGP4
ADDRLP4 24
ADDRGP4 _atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
INDIRP4
ADDRLP4 24
INDIRI4
ASGNI4
line 2751
;2751:        break;
ADDRGP4 $939
JUMPV
LABELV $941
line 2753
;2752:      case 'f':
;2753:        *(float *)*arg = _atof( &buffer );
ADDRFP4 0
ARGP4
ADDRLP4 28
ADDRGP4 _atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
INDIRP4
ADDRLP4 28
INDIRF4
ASGNF4
line 2754
;2754:        break;
ADDRGP4 $939
JUMPV
LABELV $942
line 2756
;2755:      case 'x':
;2756:        **arg = _hextoi( &buffer );
ADDRFP4 0
ARGP4
ADDRLP4 32
ADDRGP4 _hextoi
CALLU4
ASGNU4
ADDRLP4 4
INDIRP4
INDIRP4
ADDRLP4 32
INDIRU4
CVUI4 4
ASGNI4
line 2757
;2757:        break;
LABELV $938
LABELV $939
line 2760
;2758:    }
;2759:
;2760:    arg++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 2761
;2761:  }
LABELV $934
line 2734
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $933
line 2763
;2762:
;2763:  return count;
ADDRLP4 8
INDIRI4
RETI4
LABELV $931
endproc sscanf 36 4
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isintegral
import Q_isanumber
import Q_isdigit
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Com_HexStrToInt
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import DistanceBetweenLineSegments
import DistanceBetweenLineSegmentsSquared
import VectorMaxComponent
import VectorMinComponent
import pointToLineDistance
import VectorDistance
import ProjectPointOntoVector
import GetPerpendicularViewVector
import Q_isnan
import PerpendicularVector
import AngleVectors
import VectorMatrixMultiply
import MatrixMultiply
import MakeNormalVectors
import RotateAroundAxe
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AxisToAngles
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import strncpy
lit
align 1
LABELV $873
byte 1 40
byte 1 110
byte 1 117
byte 1 108
byte 1 108
byte 1 41
byte 1 0
align 1
LABELV $686
byte 1 48
byte 1 49
byte 1 50
byte 1 51
byte 1 52
byte 1 53
byte 1 54
byte 1 55
byte 1 56
byte 1 57
byte 1 97
byte 1 98
byte 1 99
byte 1 100
byte 1 101
byte 1 102
byte 1 0
align 1
LABELV $685
byte 1 48
byte 1 49
byte 1 50
byte 1 51
byte 1 52
byte 1 53
byte 1 54
byte 1 55
byte 1 56
byte 1 57
byte 1 65
byte 1 66
byte 1 67
byte 1 68
byte 1 69
byte 1 70
byte 1 0
align 1
LABELV $651
byte 1 60
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 62
byte 1 0
