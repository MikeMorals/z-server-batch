export G_ForceWeaponChange
code
proc G_ForceWeaponChange 20 8
file "..\..\..\..\src/game/g_weapon.c"
line 39
;1:/*
;2: ===========================================================================
;3: Copyright (C) 1999-2005 Id Software, Inc.
;4: Copyright (C) 2000-2006 Tim Angus
;5:
;6: This file is part of Tremulous.
;7:
;8: Tremulous is free software; you can redistribute it
;9: and/or modify it under the terms of the GNU General Public License as
;10: published by the Free Software Foundation; either version 2 of the License,
;11: or (at your option) any later version.
;12:
;13: Tremulous is distributed in the hope that it will be
;14: useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;15: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;16: GNU General Public License for more details.
;17:
;18: You should have received a copy of the GNU General Public License
;19: along with Tremulous; if not, write to the Free Software
;20: Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;21: ===========================================================================
;22: */
;23:
;24:// g_weapon.c
;25:// perform the server side effects of a weapon firing
;26:
;27:#include "g_local.h"
;28:
;29:static vec3_t forward, right, up;
;30:static vec3_t muzzle;
;31:
;32:/*
;33: ================
;34: G_ForceWeaponChange
;35: ================
;36: */
;37:void
;38:G_ForceWeaponChange(gentity_t *ent, weapon_t weapon)
;39:{
line 42
;40:  int i;
;41:
;42:  if (ent)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $85
line 43
;43:  {
line 44
;44:    ent->client->ps.pm_flags |= PMF_WEAPON_SWITCH;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 65536
BORI4
ASGNI4
line 46
;45:
;46:    if (weapon == WP_NONE || !BG_InventoryContainsWeapon(weapon, ent->client->ps.stats))
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $89
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $87
LABELV $89
line 47
;47:    {
line 49
;48:      //switch to the first non pistol weapon
;49:      for(i = WP_NONE + 1;i < WP_NUM_WEAPONS;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $90
line 50
;50:      {
line 51
;51:        if (i == WP_PISTOL)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $94
line 52
;52:          continue;
ADDRGP4 $91
JUMPV
LABELV $94
line 54
;53:
;54:        if (BG_InventoryContainsWeapon(i, ent->client->ps.stats))
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $96
line 55
;55:        {
line 56
;56:          ent->client->ps.persistant[PERS_NEWWEAPON] = i;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 57
;57:          break;
ADDRGP4 $92
JUMPV
LABELV $96
line 59
;58:        }
;59:      }
LABELV $91
line 49
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 30
LTI4 $90
LABELV $92
line 62
;60:
;61:      //only got the pistol to switch to
;62:      if (i == WP_NUM_WEAPONS)
ADDRLP4 0
INDIRI4
CNSTI4 30
NEI4 $88
line 63
;63:        ent->client->ps.persistant[PERS_NEWWEAPON] = WP_PISTOL;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
CNSTI4 1
ASGNI4
line 64
;64:    }
ADDRGP4 $88
JUMPV
LABELV $87
line 66
;65:    else
;66:      ent->client->ps.persistant[PERS_NEWWEAPON] = weapon;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 292
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $88
line 73
;67:
;68:    // Lak: The following hack has been moved to PM_BeginWeaponChange, but I'm going to
;69:    // redundantly leave it here as well just in case there's a case I'm forgetting
;70:    // because I don't want to face the gameplay consequences such an error would have
;71:
;72:    // force this here to prevent flamer effect from continuing 
;73:    ent->client->ps.generic1 = WPM_NOTFIRING;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 440
ADDP4
CNSTI4 4
ASGNI4
line 75
;74:
;75:    ent->client->ps.weapon = ent->client->ps.persistant[PERS_NEWWEAPON];
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ASGNI4
line 76
;76:  }
LABELV $85
line 77
;77:}
LABELV $84
endproc G_ForceWeaponChange 20 8
export G_GiveClientMaxAmmo
proc G_GiveClientMaxAmmo 56 20
line 86
;78:
;79:/*
;80: =================
;81: G_GiveClientMaxAmmo
;82: =================
;83: */
;84:void
;85:G_GiveClientMaxAmmo(gentity_t *ent, qboolean buyingEnergyAmmo)
;86:{
line 89
;87:  int i;
;88:  int maxAmmo, maxClips;
;89:  qboolean weaponType, restoredAmmo = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 91
;90:
;91:  for(i = WP_NONE + 1;i < WP_NUM_WEAPONS;i++)
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $101
line 92
;92:  {
line 93
;93:    if (buyingEnergyAmmo)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $105
line 94
;94:      weaponType = BG_FindUsesEnergyForWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 BG_FindUsesEnergyForWeapon
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRGP4 $106
JUMPV
LABELV $105
line 96
;95:    else
;96:      weaponType = !BG_FindUsesEnergyForWeapon(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_FindUsesEnergyForWeapon
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $108
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $109
JUMPV
LABELV $108
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $109
ADDRLP4 4
ADDRLP4 24
INDIRI4
ASGNI4
LABELV $106
line 98
;97:
;98:    if (BG_InventoryContainsWeapon(i, ent->client->ps.stats) && weaponType
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 32
ADDRGP4 BG_InventoryContainsWeapon
CALLI4
ASGNI4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $110
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $110
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 BG_FindInfinteAmmoForWeapon
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $110
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 376
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 312
ADDP4
ARGP4
ADDRLP4 48
ADDRGP4 BG_WeaponIsFull
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $110
line 101
;99:        && !BG_FindInfinteAmmoForWeapon(i) && !BG_WeaponIsFull(
;100:      i, ent->client->ps.stats, &ent->client->ps.ammo, ent->client->ps.powerups))
;101:    {
line 102
;102:      BG_FindAmmoForWeapon(i, &maxAmmo, &maxClips);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 BG_FindAmmoForWeapon
CALLV
pop
line 104
;103:
;104:      if (buyingEnergyAmmo)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $112
line 105
;105:      {
line 106
;106:        G_AddEvent(ent, EV_RPTUSE_SOUND, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 71
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 108
;107:
;108:        if (BG_InventoryContainsUpgrade(UP_BATTPACK, ent->client->ps.stats))
CNSTI4 4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 BG_InventoryContainsUpgrade
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $114
line 109
;109:          maxAmmo = (int) ((float) maxAmmo * BATTPACK_MODIFIER);
ADDRLP4 8
CNSTF4 1069547520
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
LABELV $114
line 110
;110:      }
LABELV $112
line 112
;111:
;112:      BG_PackAmmoArray(i, &ent->client->ps.ammo, ent->client->ps.powerups, maxAmmo, maxClips);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 376
ADDP4
ARGP4
ADDRLP4 52
INDIRP4
CNSTI4 312
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 BG_PackAmmoArray
CALLV
pop
line 114
;113:
;114:      restoredAmmo = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 115
;115:    }
LABELV $110
line 116
;116:  }
LABELV $102
line 91
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 30
LTI4 $101
line 118
;117:
;118:  if (restoredAmmo)
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $116
line 119
;119:    G_ForceWeaponChange(ent, ent->client->ps.weapon);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_ForceWeaponChange
CALLV
pop
LABELV $116
line 120
;120:}
LABELV $100
endproc G_GiveClientMaxAmmo 56 20
export G_BounceProjectile
proc G_BounceProjectile 64 4
line 129
;121:
;122:/*
;123: ================
;124: G_BounceProjectile
;125: ================
;126: */
;127:void
;128:G_BounceProjectile(vec3_t start, vec3_t impact, vec3_t dir, vec3_t endout)
;129:{
line 133
;130:  vec3_t v, newv;
;131:  float dot;
;132:
;133:  VectorSubtract(impact, start, v);
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 36
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 134
;134:  dot = DotProduct(v, dir);
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 135
;135:  VectorMA(v, -2 * dot, dir, newv);
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 52
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 137
;136:
;137:  VectorNormalize(newv);
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 138
;138:  VectorMA(impact, 8192, newv, endout);
ADDRFP4 12
INDIRP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
CNSTI4 4
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
CNSTI4 8
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 139
;139:}
LABELV $118
endproc G_BounceProjectile 64 4
proc G_WideTrace 60 28
line 151
;140:
;141:/*
;142: ================
;143: G_WideTrace
;144:
;145: Trace a bounding box against entities, but not the world
;146: Also check there is a line of sight between the start and end point
;147: ================
;148: */
;149:static void
;150:G_WideTrace(trace_t *tr, gentity_t *ent, float range, float width, gentity_t **target)
;151:{
line 155
;152:  vec3_t mins, maxs;
;153:  vec3_t end;
;154:
;155:  VectorSet(mins, -width, -width, -width);
ADDRLP4 36
ADDRFP4 12
INDIRF4
NEGF4
ASGNF4
ADDRLP4 12
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 12
INDIRF4
NEGF4
ASGNF4
line 156
;156:  VectorSet(maxs, width, width, width);
ADDRLP4 40
ADDRFP4 12
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 24+8
ADDRFP4 12
INDIRF4
ASGNF4
line 158
;157:
;158:  *target = NULL;
ADDRFP4 16
INDIRP4
CNSTP4 0
ASGNP4
line 160
;159:
;160:  if (!ent->client)
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $134
line 161
;161:    return;
ADDRGP4 $129
JUMPV
LABELV $134
line 164
;162:
;163:  // Set aiming directions
;164:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 165
;165:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 166
;166:  VectorMA(muzzle, range, forward, end);
ADDRLP4 44
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 0
ADDRGP4 muzzle
INDIRF4
ADDRGP4 forward
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 muzzle+4
INDIRF4
ADDRGP4 forward+4
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 muzzle+8
INDIRF4
ADDRGP4 forward+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 168
;167:
;168:  G_UnlaggedOn(ent, muzzle, range);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRFP4 8
INDIRF4
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 171
;169:
;170:  // Trace against entities
;171:  trap_Trace(tr, muzzle, mins, maxs, end, ent->s.number, CONTENTS_BODY);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554432
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 172
;172:  if (tr->entityNum != ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $142
line 173
;173:  {
line 174
;174:    *target = &g_entities[tr->entityNum];
ADDRFP4 16
INDIRP4
CNSTI4 2476
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 178
;175:
;176:    // Set range to the trace length plus the width, so that the end of the
;177:    // LOS trace is close to the exterior of the target's bounding box
;178:    range = Distance(muzzle, tr->endpos) + width;
ADDRGP4 muzzle
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 48
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRFP4 8
ADDRLP4 48
INDIRF4
ADDRFP4 12
INDIRF4
ADDF4
ASGNF4
line 179
;179:    VectorMA(muzzle, range, forward, end);
ADDRLP4 52
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 0
ADDRGP4 muzzle
INDIRF4
ADDRGP4 forward
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 muzzle+4
INDIRF4
ADDRGP4 forward+4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 muzzle+8
INDIRF4
ADDRGP4 forward+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 182
;180:
;181:    // Trace for line of sight against the world
;182:    trap_Trace(tr, muzzle, NULL, NULL, end, 0, CONTENTS_SOLID);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 56
CNSTP4 0
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 183
;183:    if (tr->fraction < 1.0f)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1065353216
GEF4 $150
line 184
;184:      *target = NULL;
ADDRFP4 16
INDIRP4
CNSTP4 0
ASGNP4
LABELV $150
line 185
;185:  }
LABELV $142
line 187
;186:
;187:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 188
;188:}
LABELV $129
endproc G_WideTrace 60 28
export SnapVectorTowards
proc SnapVectorTowards 16 0
line 202
;189:
;190:/*
;191: ======================
;192: SnapVectorTowards
;193:
;194: Round a vector to integers for more efficient network
;195: transmission, but make sure that it rounds towards a given point
;196: rather than blindly truncating.  This prevents it from truncating
;197: into a wall.
;198: ======================
;199: */
;200:void
;201:SnapVectorTowards(vec3_t v, vec3_t to)
;202:{
line 205
;203:  int i;
;204:
;205:  for(i = 0;i < 3;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $153
line 206
;206:  {
line 207
;207:    if (to[i] <= v[i])
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
GTF4 $157
line 208
;208:      v[i] = (int) v[i];
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRGP4 $158
JUMPV
LABELV $157
line 210
;209:    else
;210:      v[i] = (int) v[i] + 1;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CNSTI4 1
ADDI4
CVIF4 4
ASGNF4
LABELV $158
line 211
;211:  }
LABELV $154
line 205
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $153
line 212
;212:}
LABELV $152
endproc SnapVectorTowards 16 0
export meleeAttack
proc meleeAttack 136 32
line 234
;213:
;214://void meleeAttack(gentity_t *ent, float range, float width, int damage, meansOfDeath_t mod)
;215://{
;216:// vec3_t end;
;217://   // set aiming directions
;218:// AngleVectors(ent->client->ps.viewangles, forward, right, up);
;219:// CalcMuzzlePoint(ent, forward, right, up, muzzle);
;220:// VectorMA(muzzle, range, forward, end);
;221://
;222:// G_UnlaggedOn(ent, muzzle, range);
;223:// G_SelectiveRadiusDamage(end,ent,(float)damage,range,ent,mod,ent->client->ps.stats[STAT_PTEAM]);
;224:// G_UnlaggedOff();
;225://}
;226:
;227:/*
;228: ===============
;229: meleeAttack
;230: ===============
;231: */
;232:void
;233:meleeAttack(gentity_t *ent, float range, float width, int damage, meansOfDeath_t mod)
;234:{
line 241
;235:  trace_t tr;
;236:  vec3_t end;
;237:  gentity_t *tent;
;238:  gentity_t *traceEnt;
;239:  vec3_t mins, maxs;
;240:
;241:  VectorSet(mins, -width, -width, -width);
ADDRLP4 104
ADDRFP4 8
INDIRF4
NEGF4
ASGNF4
ADDRLP4 76
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 76+8
ADDRFP4 8
INDIRF4
NEGF4
ASGNF4
line 242
;242:  VectorSet(maxs, width, width, width);
ADDRLP4 108
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 88
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 88+4
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 88+8
ADDRFP4 8
INDIRF4
ASGNF4
line 245
;243:
;244:  // set aiming directions
;245:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 247
;246:
;247:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 249
;248:
;249:  VectorMA(muzzle, range, forward, end);
ADDRLP4 112
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 64
ADDRGP4 muzzle
INDIRF4
ADDRGP4 forward
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 64+4
ADDRGP4 muzzle+4
INDIRF4
ADDRGP4 forward+4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 64+8
ADDRGP4 muzzle+8
INDIRF4
ADDRGP4 forward+8
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
line 251
;250:
;251:  G_UnlaggedOn(ent, muzzle, range);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 252
;252:  trap_Trace(&tr, muzzle, mins, maxs, end, ent->s.number, MASK_SHOT);
ADDRLP4 4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 88
ARGP4
ADDRLP4 64
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 253
;253:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 255
;254:
;255:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 4+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $170
line 256
;256:    return;
ADDRGP4 $159
JUMPV
LABELV $170
line 258
;257:
;258:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 4+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 261
;259:
;260:  // send blood impact
;261:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $174
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $174
line 262
;262:  {
line 263
;263:    tent = G_TempEntity(tr.endpos, EV_MISSILE_HIT);
ADDRLP4 4+12
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 120
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 100
ADDRLP4 120
INDIRP4
ASGNP4
line 264
;264:    tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 100
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 265
;265:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 4+24
ARGP4
ADDRLP4 124
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 100
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 266
;266:    tent->s.weapon = ent->s.weapon;
ADDRLP4 128
CNSTI4 192
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 267
;267:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 132
CNSTI4 204
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 268
;268:  }
LABELV $174
line 270
;269:
;270:  if (traceEnt->takedamage)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $178
line 271
;271:    G_Damage(traceEnt, ent, ent, forward, tr.endpos, damage, DAMAGE_NO_KNOCKBACK, mod);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4+12
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
LABELV $178
line 272
;272:}
LABELV $159
endproc meleeAttack 136 32
export bulletFire
proc bulletFire 136 32
line 284
;273:
;274:/*
;275: ======================================================================
;276:
;277: MACHINEGUN
;278:
;279: ======================================================================
;280: */
;281:
;282:void
;283:bulletFire(gentity_t *ent, float spread, int damage, int mod)
;284:{
line 292
;285:  trace_t tr;
;286:  vec3_t end;
;287:  float r;
;288:  float u;
;289:  gentity_t *tent;
;290:  gentity_t *traceEnt;
;291:
;292:  r = random() * M_PI * 2.0f;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
CNSTF4 1073741824
CNSTF4 1078530011
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
MULF4
ASGNF4
line 293
;293:  u = sin(r) * crandom() * spread * 16;
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 92
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1098907648
ADDRLP4 92
INDIRF4
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
MULF4
ASGNF4
line 294
;294:  r = cos(r) * crandom() * spread * 16;
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 100
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
CNSTF4 1098907648
ADDRLP4 100
INDIRF4
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
MULF4
ASGNF4
line 295
;295:  VectorMA(muzzle, 8192 * 16, forward, end);
ADDRLP4 108
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRGP4 muzzle
INDIRF4
ADDRLP4 108
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1207959552
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 296
;296:  VectorMA(end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 right
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 right+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 right+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 297
;297:  VectorMA(end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 up
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 up+4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 up+8
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
line 300
;298:
;299:  // don't use unlagged if this is not a client (e.g. turret)
;300:  if (ent->client)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $200
line 301
;301:  {
line 302
;302:    G_UnlaggedOn(ent, muzzle, 8192 * 16);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1207959552
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 303
;303:    trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 16
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 304
;304:    G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 305
;305:  }
ADDRGP4 $201
JUMPV
LABELV $200
line 307
;306:  else
;307:    trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 16
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
LABELV $201
line 309
;308:
;309:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 16+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $202
line 310
;310:    return;
ADDRGP4 $181
JUMPV
LABELV $202
line 312
;311:
;312:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 76
CNSTI4 2476
ADDRLP4 16+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 315
;313:
;314:  // snap the endpos to integers, but nudged towards the line
;315:  SnapVectorTowards(tr.endpos, muzzle);
ADDRLP4 16+12
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 318
;316:
;317:  // send bullet impact
;318:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 76
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $207
ADDRLP4 76
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $207
line 319
;319:  {
line 320
;320:    tent = G_TempEntity(tr.endpos, EV_BULLET_HIT_FLESH);
ADDRLP4 16+12
ARGP4
CNSTI4 36
ARGI4
ADDRLP4 128
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 128
INDIRP4
ASGNP4
line 321
;321:    tent->s.eventParm = traceEnt->s.number;
ADDRLP4 84
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 76
INDIRP4
INDIRI4
ASGNI4
line 322
;322:  }
ADDRGP4 $208
JUMPV
LABELV $207
line 324
;323:  else
;324:  {
line 325
;325:    tent = G_TempEntity(tr.endpos, EV_BULLET_HIT_WALL);
ADDRLP4 16+12
ARGP4
CNSTI4 37
ARGI4
ADDRLP4 128
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 128
INDIRP4
ASGNP4
line 326
;326:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 16+24
ARGP4
ADDRLP4 132
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 84
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 327
;327:  }
LABELV $208
line 328
;328:  tent->s.otherEntityNum = ent->s.number;
ADDRLP4 84
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 330
;329:
;330:  if (traceEnt->takedamage)
ADDRLP4 76
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $212
line 331
;331:  {
line 332
;332:    G_Damage(traceEnt, ent, ent, forward, tr.endpos, damage, 0, mod);
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 16+12
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 333
;333:  }
LABELV $212
line 334
;334:}
LABELV $181
endproc bulletFire 136 32
export ShotgunPattern
proc ShotgunPattern 156 32
line 348
;335:
;336:/*
;337: ======================================================================
;338:
;339: SHOTGUN
;340:
;341: ======================================================================
;342: */
;343:
;344:// this should match CG_ShotgunPattern
;345:
;346:void
;347:ShotgunPattern(vec3_t origin, vec3_t origin2, int seed, gentity_t *ent)
;348:{
line 358
;349:  int i;
;350:  float r, u;
;351:  vec3_t end;
;352:  vec3_t forward, right, up;
;353:  trace_t tr;
;354:  gentity_t *traceEnt;
;355:
;356:  // derive the right and up vectors from the forward vector, because
;357:  // the client won't have any other information
;358:  VectorNormalize2(origin2, forward);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 359
;359:  PerpendicularVector(right, forward);
ADDRLP4 92
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 360
;360:  CrossProduct(forward, right, up);
ADDRLP4 20
ARGP4
ADDRLP4 92
ARGP4
ADDRLP4 104
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 363
;361:
;362:  // generate the "random" spread pattern
;363:  for(i = 0;i < SHOTGUN_PELLETS;i++)
ADDRLP4 116
CNSTI4 0
ASGNI4
LABELV $216
line 364
;364:  {
line 365
;365:    r = Q_crandom(&seed) * SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 124
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
CNSTF4 1098907648
CNSTF4 1125515264
ADDRLP4 124
INDIRF4
MULF4
MULF4
ASGNF4
line 366
;366:    u = Q_crandom(&seed) * SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 128
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
CNSTF4 1098907648
CNSTF4 1125515264
ADDRLP4 128
INDIRF4
MULF4
MULF4
ASGNF4
line 367
;367:    VectorMA(origin, 8192 * 16, forward, end);
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 368
;368:    VectorMA(end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 92
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 92+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 92+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 369
;369:    VectorMA(end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 104
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 104+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 104+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 371
;370:
;371:    trap_Trace(&tr, origin, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 148
CNSTP4 0
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 372
;372:    traceEnt = &g_entities[tr.entityNum];
ADDRLP4 120
CNSTI4 2476
ADDRLP4 32+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 375
;373:
;374:    // send bullet impact
;375:    if (!(tr.surfaceFlags & SURF_NOIMPACT))
ADDRLP4 32+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $237
line 376
;376:    {
line 377
;377:      if (traceEnt->takedamage)
ADDRLP4 120
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $240
line 378
;378:        G_Damage(traceEnt, ent, ent, forward, tr.endpos, SHOTGUN_DMG, 0, MOD_SHOTGUN);
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 152
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 32+12
ARGP4
CNSTI4 24
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
LABELV $240
line 379
;379:    }
LABELV $237
line 380
;380:  }
LABELV $217
line 363
ADDRLP4 116
ADDRLP4 116
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 8
LTI4 $216
line 381
;381:}
LABELV $215
endproc ShotgunPattern 156 32
export shotgunFire
proc shotgunFire 20 16
line 385
;382:
;383:void
;384:shotgunFire(gentity_t *ent)
;385:{
line 389
;386:  gentity_t *tent;
;387:
;388:  // send shotgun blast
;389:  tent = G_TempEntity(muzzle, EV_SHOTGUN);
ADDRGP4 muzzle
ARGP4
CNSTI4 38
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 390
;390:  VectorScale(forward, 4096, tent->s.origin2);
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1166016512
ADDRGP4 forward
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1166016512
ADDRGP4 forward+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1166016512
ADDRGP4 forward+8
INDIRF4
MULF4
ASGNF4
line 391
;391:  SnapVector(tent->s.origin2);
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 392
;392:  tent->s.eventParm = rand() & 255; // seed for spread pattern
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 393
;393:  tent->s.otherEntityNum = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 394
;394:  G_UnlaggedOn(ent, muzzle, 8192 * 16);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1207959552
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 395
;395:  ShotgunPattern(tent->s.pos.trBase, tent->s.origin2, tent->s.eventParm, ent);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ShotgunPattern
CALLV
pop
line 396
;396:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 397
;397:}
LABELV $243
endproc shotgunFire 20 16
export massDriverFire
proc massDriverFire 108 32
line 409
;398:
;399:/*
;400: ======================================================================
;401:
;402: MASS DRIVER
;403:
;404: ======================================================================
;405: */
;406:
;407:void
;408:massDriverFire(gentity_t *ent)
;409:{
line 415
;410:  trace_t tr;
;411:  vec3_t end;
;412:  gentity_t *tent;
;413:  gentity_t *traceEnt;
;414:
;415:  VectorMA(muzzle, 8192 * 16, forward, end);
ADDRLP4 80
CNSTF4 1207959552
ASGNF4
ADDRLP4 68
ADDRGP4 muzzle
INDIRF4
ADDRLP4 80
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1207959552
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 417
;416:
;417:  G_UnlaggedOn(ent, muzzle, 8192 * 16);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1207959552
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 418
;418:  trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 0
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 84
CNSTP4 0
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 419
;419:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 421
;420:
;421:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $253
line 422
;422:    return;
ADDRGP4 $246
JUMPV
LABELV $253
line 424
;423:
;424:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 60
CNSTI4 2476
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 427
;425:
;426:  // snap the endpos to integers, but nudged towards the line
;427:  SnapVectorTowards(tr.endpos, muzzle);
ADDRLP4 0+12
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 430
;428:
;429:  // send impact
;430:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 60
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $258
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $258
line 431
;431:  {
line 432
;432:    tent = G_TempEntity(tr.endpos, EV_MISSILE_HIT);
ADDRLP4 0+12
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 92
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 92
INDIRP4
ASGNP4
line 433
;433:    tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 64
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 60
INDIRP4
INDIRI4
ASGNI4
line 434
;434:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 96
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 435
;435:    tent->s.weapon = ent->s.weapon;
ADDRLP4 100
CNSTI4 192
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 436
;436:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 104
CNSTI4 204
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 437
;437:  }
ADDRGP4 $259
JUMPV
LABELV $258
line 439
;438:  else
;439:  {
line 440
;440:    tent = G_TempEntity(tr.endpos, EV_MISSILE_MISS);
ADDRLP4 0+12
ARGP4
CNSTI4 40
ARGI4
ADDRLP4 92
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 92
INDIRP4
ASGNP4
line 441
;441:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 96
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 442
;442:    tent->s.weapon = ent->s.weapon;
ADDRLP4 100
CNSTI4 192
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 443
;443:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 104
CNSTI4 204
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 444
;444:  }
LABELV $259
line 446
;445:
;446:  if (traceEnt->takedamage)
ADDRLP4 60
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $264
line 447
;447:  {
line 448
;448:    G_Damage(traceEnt, ent, ent, forward, tr.endpos, MDRIVER_DMG, 0, MOD_MDRIVER);
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 0+12
ARGP4
CNSTI4 90
ARGI4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 449
;449:  }
LABELV $264
line 450
;450:}
LABELV $246
endproc massDriverFire 108 32
export massDriverFire2
proc massDriverFire2 204 32
line 455
;451:
;452:#define MDRIVER_IMPACTS 10
;453:void
;454:massDriverFire2(gentity_t *ent)
;455:{
line 463
;456:  trace_t tr;
;457:  vec3_t start;
;458:  vec3_t end;
;459:  gentity_t *tent;
;460:  gentity_t *traceEnt;
;461:  gentity_t *hits[MDRIVER_IMPACTS];
;462:  int hits_contents[MDRIVER_IMPACTS];
;463:  int count = 0;
ADDRLP4 64
CNSTI4 0
ASGNI4
line 465
;464:  int i;
;465:  qboolean impact = qfalse;
ADDRLP4 164
CNSTI4 0
ASGNI4
line 467
;466:
;467:  VectorMA( muzzle, 8192 * 16, forward, end );
ADDRLP4 184
CNSTF4 1207959552
ASGNF4
ADDRLP4 168
ADDRGP4 muzzle
INDIRF4
ADDRLP4 184
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 168+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 184
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 168+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1207959552
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 470
;468:
;469:  //VectorCopy(muzzle,start); too sloww
;470:  start[0] = muzzle[0];
ADDRLP4 68
ADDRGP4 muzzle
INDIRF4
ASGNF4
line 471
;471:  start[1] = muzzle[1];
ADDRLP4 68+4
ADDRGP4 muzzle+4
INDIRF4
ASGNF4
line 472
;472:  start[2] = muzzle[2];
ADDRLP4 68+8
ADDRGP4 muzzle+8
INDIRF4
ASGNF4
ADDRGP4 $279
JUMPV
LABELV $278
line 475
;473:
;474:  while(count < MDRIVER_IMPACTS)
;475:  {
line 476
;476:    trap_Trace(&tr, start, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 0
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 188
CNSTP4 0
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 168
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 477
;477:    if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $281
line 478
;478:    {
line 479
;479:      impact = qfalse;
ADDRLP4 164
CNSTI4 0
ASGNI4
line 480
;480:      break;
ADDRGP4 $280
JUMPV
LABELV $281
line 482
;481:    }
;482:    traceEnt = &g_entities[tr.entityNum];
ADDRLP4 60
CNSTI4 2476
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 494
;483:
;484:    /* reduce lag
;485:     if( traceEnt->takedamage && traceEnt->client )
;486:     {
;487:     tent = G_TempEntity( tr.endpos, EV_MISSILE_HIT );
;488:     tent->s.otherEntityNum = traceEnt->s.number;
;489:     tent->s.eventParm = DirToByte( tr.plane.normal );
;490:     tent->s.weapon = ent->s.weapon;
;491:     tent->s.generic1 = ent->s.generic1;
;492:     }*/
;493:
;494:    if (traceEnt->takedamage)
ADDRLP4 60
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $285
line 495
;495:    {
line 496
;496:      G_Damage(traceEnt, ent, ent, forward, tr.endpos, MDRIVER_DMG, 0, MOD_MDRIVER);
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 0+12
ARGP4
CNSTI4 90
ARGI4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 497
;497:    }
LABELV $285
line 498
;498:    hits[count] = traceEnt;
ADDRLP4 64
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 84
ADDP4
ADDRLP4 60
INDIRP4
ASGNP4
line 500
;499:    //VectorCopy(tr.endpos,start); tooo sloww
;500:    start[0] = tr.endpos[0];
ADDRLP4 68
ADDRLP4 0+12
INDIRF4
ASGNF4
line 501
;501:    start[1] = tr.endpos[1];
ADDRLP4 68+4
ADDRLP4 0+12+4
INDIRF4
ASGNF4
line 502
;502:    start[2] = tr.endpos[2];
ADDRLP4 68+8
ADDRLP4 0+12+8
INDIRF4
ASGNF4
line 503
;503:    hits_contents[count] = traceEnt->r.contents;
ADDRLP4 64
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 124
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ASGNI4
line 504
;504:    traceEnt->r.contents = 0;
ADDRLP4 60
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 0
ASGNI4
line 505
;505:    count++;
ADDRLP4 64
ADDRLP4 64
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 506
;506:    impact = qtrue;
ADDRLP4 164
CNSTI4 1
ASGNI4
line 507
;507:  }
LABELV $279
line 474
ADDRLP4 64
INDIRI4
CNSTI4 10
LTI4 $278
LABELV $280
line 508
;508:  for(i = 0;i < count;i++)
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRGP4 $298
JUMPV
LABELV $295
line 509
;509:  {
line 510
;510:    hits[i]->r.contents = hits_contents[i];
ADDRLP4 188
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 188
INDIRI4
ADDRLP4 84
ADDP4
INDIRP4
CNSTI4 460
ADDP4
ADDRLP4 188
INDIRI4
ADDRLP4 124
ADDP4
INDIRI4
ASGNI4
line 511
;511:  }
LABELV $296
line 508
ADDRLP4 80
ADDRLP4 80
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $298
ADDRLP4 80
INDIRI4
ADDRLP4 64
INDIRI4
LTI4 $295
line 512
;512:  if (impact)//add miss event to last entity / wall hit
ADDRLP4 164
INDIRI4
CNSTI4 0
EQI4 $299
line 513
;513:  {
line 515
;514:    // snap the endpos to integers, but nudged towards the line
;515:    SnapVectorTowards(tr.endpos, muzzle);
ADDRLP4 0+12
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 516
;516:    tent = G_TempEntity(tr.endpos, EV_MISSILE_MISS);
ADDRLP4 0+12
ARGP4
CNSTI4 40
ARGI4
ADDRLP4 188
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 180
ADDRLP4 188
INDIRP4
ASGNP4
line 517
;517:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 192
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 180
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 518
;518:    tent->s.weapon = ent->s.weapon;
ADDRLP4 196
CNSTI4 192
ASGNI4
ADDRLP4 180
INDIRP4
ADDRLP4 196
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 196
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 519
;519:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 200
CNSTI4 204
ASGNI4
ADDRLP4 180
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 520
;520:  }
LABELV $299
line 521
;521:}
LABELV $267
endproc massDriverFire2 204 32
export lockBlobLauncherFire
proc lockBlobLauncherFire 8 12
line 533
;522:
;523:/*
;524: ======================================================================
;525:
;526: LOCKBLOB
;527:
;528: ======================================================================
;529: */
;530:
;531:void
;532:lockBlobLauncherFire(gentity_t *ent)
;533:{
line 536
;534:  gentity_t *m;
;535:
;536:  m = fire_lockblob(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_lockblob
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 539
;537:
;538:  //  VectorAdd( m->s.pos.trDelta, ent->client->ps.velocity, m->s.pos.trDelta );  // "real" physics
;539:}
LABELV $304
endproc lockBlobLauncherFire 8 12
export launcherSecondaryFire
proc launcherSecondaryFire 8 12
line 543
;540:
;541:void
;542:launcherSecondaryFire(gentity_t *ent)
;543:{
line 546
;544:  gentity_t *m;
;545:
;546:  m = launch_grenade_secondary(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 launch_grenade_secondary
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 547
;547:}
LABELV $305
endproc launcherSecondaryFire 8 12
export launchAxe
proc launchAxe 8 12
line 550
;548:
;549:void launchAxe(gentity_t *ent)
;550:{
line 552
;551:  gentity_t *m;
;552:  BG_RemoveWeaponFromInventory(WP_AXE, ent->client->ps.stats);
CNSTI4 2
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRGP4 BG_RemoveWeaponFromInventory
CALLV
pop
line 553
;553:  G_ForceWeaponChange(ent, WP_PISTOL);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 G_ForceWeaponChange
CALLV
pop
line 554
;554:  m = fire_axe(ent, muzzle,forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_axe
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 555
;555:}
LABELV $306
endproc launchAxe 8 12
export launcherFire
proc launcherFire 8 12
line 558
;556:void
;557:launcherFire(gentity_t *ent)
;558:{
line 561
;559:  gentity_t *m;
;560:
;561:  m = launch_grenade_primary(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 launch_grenade_primary
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 562
;562:}
LABELV $307
endproc launcherFire 8 12
export hiveFire
proc hiveFire 8 12
line 573
;563:/*
;564: ======================================================================
;565:
;566: HIVE
;567:
;568: ======================================================================
;569: */
;570:
;571:void
;572:hiveFire(gentity_t *ent)
;573:{
line 576
;574:  gentity_t *m;
;575:
;576:  m = fire_hive(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_hive
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 579
;577:
;578:  //  VectorAdd( m->s.pos.trDelta, ent->client->ps.velocity, m->s.pos.trDelta );  // "real" physics
;579:}
LABELV $308
endproc hiveFire 8 12
export pulseRifleFire
proc pulseRifleFire 8 12
line 590
;580:/*
;581: ======================================================================
;582:
;583: PULSE RIFLE
;584:
;585: ======================================================================
;586: */
;587:
;588:void
;589:pulseRifleFire(gentity_t *ent)
;590:{
line 593
;591:  gentity_t *m;
;592:
;593:  m = fire_pulseRifle(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_pulseRifle
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 595
;594:
;595:}
LABELV $309
endproc pulseRifleFire 8 12
export flamerFire
proc flamerFire 8 12
line 607
;596:
;597:/*
;598: ======================================================================
;599:
;600: FLAME THROWER
;601:
;602: ======================================================================
;603: */
;604:
;605:void
;606:flamerFire(gentity_t *ent)
;607:{
line 610
;608:  gentity_t *m;
;609:
;610:  m = fire_flamer(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_flamer
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 611
;611:}
LABELV $310
endproc flamerFire 8 12
export throwGrenade
proc throwGrenade 8 12
line 623
;612:
;613:/*
;614: ======================================================================
;615:
;616: GRENADE
;617:
;618: ======================================================================
;619: */
;620:
;621:void
;622:throwGrenade(gentity_t *ent)
;623:{
line 626
;624:  gentity_t *m;
;625:
;626:  m = launch_grenade(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 launch_grenade
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 627
;627:}
LABELV $311
endproc throwGrenade 8 12
export plantMine
proc plantMine 12 12
line 634
;628:
;629:////////////////////////////////////////////////////////////////////////////
;630:// MINE
;631:////////////////////////////////////////////////////////////////////////////
;632:void
;633:plantMine(gentity_t *ent)
;634:{
line 636
;635:  gentity_t *m;
;636:  if (ent->numMines > 1)
ADDRFP4 0
INDIRP4
CNSTI4 2320
ADDP4
INDIRI4
CNSTI4 1
LEI4 $313
line 637
;637:  {
line 638
;638:    trap_SendServerCommand(ent - g_entities, "print \"You cannot drop more than 2 mines.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2476
DIVI4
ARGI4
ADDRGP4 $315
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 639
;639:    return;
ADDRGP4 $312
JUMPV
LABELV $313
line 641
;640:  }
;641:  ent->numMines++;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 2320
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 642
;642:  m = plant_mine(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 8
ADDRGP4 plant_mine
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 643
;643:}
LABELV $312
endproc plantMine 12 12
export throwBomb
proc throwBomb 0 0
line 655
;644:
;645:/*
;646: ======================================================================
;647:
;648: BOMB
;649:
;650: ======================================================================
;651: */
;652:
;653:void
;654:throwBomb(gentity_t *ent)
;655:{
line 659
;656:  // gentity_t *m;
;657:
;658:  // m = launch_bomb( ent, muzzle, forward );
;659:}
LABELV $316
endproc throwBomb 0 0
export lasGunFire
proc lasGunFire 116 32
line 676
;660:
;661:/*
;662: ======================================================================
;663:
;664: LAS GUN
;665:
;666: ======================================================================
;667: */
;668:
;669:/*
;670: ===============
;671: lasGunFire
;672: ===============
;673: */
;674:void
;675:lasGunFire(gentity_t *ent)
;676:{
line 683
;677:  trace_t tr;
;678:  vec3_t end;
;679:
;680:  gentity_t *traceEnt, *tent;
;681:  int damage, passent;
;682:
;683:  damage = LASGUN_DAMAGE;
ADDRLP4 84
CNSTI4 32
ASGNI4
line 685
;684:
;685:  passent = ent->s.number;
ADDRLP4 80
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 687
;686:
;687:  VectorMA(muzzle, LASGUN_RANGE, forward, end);
ADDRLP4 88
CNSTF4 1145044992
ASGNF4
ADDRLP4 68
ADDRGP4 muzzle
INDIRF4
ADDRLP4 88
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 88
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1145044992
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 689
;688:
;689:  trap_Trace(&tr, muzzle, NULL, NULL, end, passent, MASK_SHOT);
ADDRLP4 0
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 80
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 691
;690:
;691:  if (tr.entityNum == ENTITYNUM_NONE)
ADDRLP4 0+52
INDIRI4
CNSTI4 1023
NEI4 $324
line 692
;692:  {
line 693
;693:    return;
ADDRGP4 $317
JUMPV
LABELV $324
line 696
;694:  }
;695:
;696:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 60
CNSTI4 2476
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 698
;697:
;698:  if (traceEnt->takedamage)
ADDRLP4 60
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $328
line 699
;699:  {
line 700
;700:    G_Damage(traceEnt, ent, ent, forward, tr.endpos, damage, 0, MOD_LASERGUN);
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 0+12
ARGP4
ADDRLP4 84
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 701
;701:  }
LABELV $328
line 704
;702:
;703:  // send impact
;704:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 60
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $331
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $331
line 705
;705:  {
line 706
;706:    tent = G_TempEntity(tr.endpos, EV_MISSILE_HIT);
ADDRLP4 0+12
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 100
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 100
INDIRP4
ASGNP4
line 707
;707:    tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 64
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 60
INDIRP4
INDIRI4
ASGNI4
line 708
;708:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 104
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 709
;709:    tent->s.weapon = ent->s.weapon;
ADDRLP4 108
CNSTI4 192
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 710
;710:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 112
CNSTI4 204
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 711
;711:  }
ADDRGP4 $332
JUMPV
LABELV $331
line 713
;712:  else
;713:  {
line 714
;714:    tent = G_TempEntity(tr.endpos, EV_MISSILE_MISS);
ADDRLP4 0+12
ARGP4
CNSTI4 40
ARGI4
ADDRLP4 100
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 100
INDIRP4
ASGNP4
line 715
;715:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 104
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 716
;716:    tent->s.weapon = ent->s.weapon;
ADDRLP4 108
CNSTI4 192
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 717
;717:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 112
CNSTI4 204
ASGNI4
ADDRLP4 64
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 718
;718:  }
LABELV $332
line 719
;719:}
LABELV $317
endproc lasGunFire 116 32
export painSawFire
proc painSawFire 116 28
line 731
;720:
;721:/*
;722: ======================================================================
;723:
;724: PAIN SAW
;725:
;726: ======================================================================
;727: */
;728:
;729:void
;730:painSawFire(gentity_t *ent)
;731:{
line 738
;732:  trace_t tr;
;733:  vec3_t end;
;734:  gentity_t *tent;
;735:  gentity_t *traceEnt;
;736:
;737:  // set aiming directions
;738:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 740
;739:
;740:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 742
;741:
;742:  VectorMA(muzzle, PAINSAW_RANGE, forward, end);
ADDRLP4 80
CNSTF4 1109393408
ASGNF4
ADDRLP4 60
ADDRGP4 muzzle
INDIRF4
ADDRLP4 80
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1109393408
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 744
;743:
;744:  G_UnlaggedOn(ent, muzzle, PAINSAW_RANGE);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1109393408
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 745
;745:  trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 0
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 84
CNSTP4 0
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 60
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 746
;746:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 748
;747:
;748:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $344
line 749
;749:    return;
ADDRGP4 $337
JUMPV
LABELV $344
line 751
;750:
;751:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 72
CNSTI4 2476
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 754
;752:
;753:  // send blood impact
;754:  if (traceEnt->takedamage)
ADDRLP4 72
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $348
line 755
;755:  {
line 759
;756:    vec3_t temp;
;757:
;758:    //hack to get the particle system to line up with the weapon
;759:    VectorCopy(tr.endpos, temp);
ADDRLP4 88
ADDRLP4 0+12
INDIRB
ASGNB 12
line 760
;760:    temp[2] -= 10.0f;
ADDRLP4 88+8
ADDRLP4 88+8
INDIRF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 762
;761:
;762:    if (traceEnt->client)
ADDRLP4 72
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $352
line 763
;763:    {
line 764
;764:      tent = G_TempEntity(temp, EV_MISSILE_HIT);
ADDRLP4 88
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 100
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 100
INDIRP4
ASGNP4
line 765
;765:      tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 76
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 72
INDIRP4
INDIRI4
ASGNI4
line 766
;766:    }
ADDRGP4 $353
JUMPV
LABELV $352
line 768
;767:    else
;768:      tent = G_TempEntity(temp, EV_MISSILE_MISS);
ADDRLP4 88
ARGP4
CNSTI4 40
ARGI4
ADDRLP4 100
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 100
INDIRP4
ASGNP4
LABELV $353
line 770
;769:
;770:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 0+24
ARGP4
ADDRLP4 104
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 771
;771:    tent->s.weapon = ent->s.weapon;
ADDRLP4 108
CNSTI4 192
ASGNI4
ADDRLP4 76
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 772
;772:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 112
CNSTI4 204
ASGNI4
ADDRLP4 76
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 773
;773:  }
LABELV $348
line 778
;774:
;775:  //if (traceEnt->takedamage)
;776:  //  G_Damage(
;777:  //    traceEnt, ent, ent, forward, tr.endpos, PAINSAW_DAMAGE, DAMAGE_NO_KNOCKBACK, MOD_PAINSAW);
;778:}
LABELV $337
endproc painSawFire 116 28
export LCChargeFire
proc LCChargeFire 12 20
line 795
;779:
;780:/*
;781: ======================================================================
;782:
;783: LUCIFER CANNON
;784:
;785: ======================================================================
;786: */
;787:
;788:/*
;789: ===============
;790: LCChargeFire
;791: ===============
;792: */
;793:void
;794:LCChargeFire(gentity_t *ent, qboolean secondary)
;795:{
line 798
;796:  gentity_t *m;
;797:
;798:  if (secondary)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $356
line 799
;799:  {
line 800
;800:    m
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
CNSTI4 14
ARGI4
CNSTI4 75
ARGI4
ADDRLP4 4
ADDRGP4 fire_luciferCannon
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 803
;801:        = fire_luciferCannon(
;802:          ent, muzzle, forward, LCANNON_SECONDARY_DAMAGE, LCANNON_SECONDARY_RADIUS);
;803:    ent->client->ps.weaponTime = LCANNON_REPEAT;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 500
ASGNI4
line 804
;804:  }
ADDRGP4 $357
JUMPV
LABELV $356
line 806
;805:  else
;806:  {
line 807
;807:    m = fire_luciferCannon(ent, muzzle, forward, ent->client->ps.stats[STAT_MISC], LCANNON_RADIUS);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ARGI4
CNSTI4 150
ARGI4
ADDRLP4 8
ADDRGP4 fire_luciferCannon
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 808
;808:    ent->client->ps.weaponTime = LCANNON_CHARGEREPEAT;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 1000
ASGNI4
line 809
;809:  }
LABELV $357
line 811
;810:
;811:  ent->client->ps.stats[STAT_MISC] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
CNSTI4 0
ASGNI4
line 812
;812:}
LABELV $355
endproc LCChargeFire 12 20
export teslaFire
proc teslaFire 128 32
line 824
;813:
;814:/*
;815: ======================================================================
;816:
;817: TESLA GENERATOR
;818:
;819: ======================================================================
;820: */
;821:
;822:void
;823:teslaFire(gentity_t *ent)
;824:{
line 830
;825:  trace_t tr;
;826:  vec3_t end;
;827:  gentity_t *traceEnt, *tent;
;828:  int team;
;829:
;830:  VectorMA(muzzle, TESLAGEN_RANGE, forward, end);
ADDRLP4 84
CNSTF4 1125515264
ASGNF4
ADDRLP4 68
ADDRGP4 muzzle
INDIRF4
ADDRLP4 84
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1125515264
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 832
;831:
;832:  trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 8
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 88
CNSTP4 0
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 834
;833:
;834:  if (tr.entityNum == ENTITYNUM_NONE)
ADDRLP4 8+52
INDIRI4
CNSTI4 1023
NEI4 $365
line 835
;835:    return;
ADDRGP4 $358
JUMPV
LABELV $365
line 837
;836:
;837:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 4
CNSTI4 2476
ADDRLP4 8+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 839
;838:
;839:  if (ent->biteam == BIT_ALIENS)
ADDRFP4 0
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
CNSTI4 1
NEI4 $369
line 840
;840:  {
line 841
;841:    team = PTE_ALIENS;
ADDRLP4 80
CNSTI4 1
ASGNI4
line 842
;842:  }
LABELV $369
line 843
;843:  if (ent->biteam == BIT_HUMANS)
ADDRFP4 0
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
CNSTI4 2
NEI4 $371
line 844
;844:  {
line 845
;845:    team = PTE_HUMANS;
ADDRLP4 80
CNSTI4 2
ASGNI4
line 846
;846:  }
LABELV $371
line 848
;847:
;848:  if (!traceEnt->client && !(traceEnt->s.eType == ET_BUILDABLE))
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $373
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $373
line 849
;849:    return;
ADDRGP4 $358
JUMPV
LABELV $373
line 851
;850:
;851:  if ((traceEnt->s.eType == ET_BUILDABLE) && (traceEnt->biteam == ent->biteam))
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $375
ADDRLP4 100
CNSTI4 956
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
NEI4 $375
line 852
;852:    return;
ADDRGP4 $358
JUMPV
LABELV $375
line 854
;853:
;854:  if (traceEnt->client && (traceEnt->client->ps.stats[STAT_PTEAM] == team))
ADDRLP4 104
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $377
ADDRLP4 104
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $377
line 855
;855:    return;
ADDRGP4 $358
JUMPV
LABELV $377
line 864
;856:
;857:  /*if( !traceEnt->client )
;858:   return;*/
;859:
;860:  /*if( traceEnt->client && traceEnt->client->ps.stats[ STAT_PTEAM ] != PTE_ALIENS )
;861:   return;*/
;862:
;863:  //so the client side knows
;864:  ent->s.eFlags |= EF_FIRING;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 866
;865:
;866:  if (traceEnt->takedamage)
ADDRLP4 4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $379
line 867
;867:  {
line 868
;868:    G_Damage(traceEnt, ent, ent, forward, tr.endpos, TESLAGEN_DMG, 0, MOD_TESLAGEN);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 8+12
ARGP4
CNSTI4 24
ARGI4
CNSTI4 0
ARGI4
CNSTI4 29
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 869
;869:  }
LABELV $379
line 872
;870:
;871:  // snap the endpos to integers to save net bandwidth, but nudged towards the line
;872:  SnapVectorTowards(tr.endpos, muzzle);
ADDRLP4 8+12
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 875
;873:
;874:  // send railgun beam effect
;875:  tent = G_TempEntity(tr.endpos, EV_TESLATRAIL);
ADDRLP4 8+12
ARGP4
CNSTI4 42
ARGI4
ADDRLP4 112
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 877
;876:
;877:  VectorCopy(muzzle, tent->s.origin2);
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRGP4 muzzle
INDIRB
ASGNB 12
line 879
;878:
;879:  tent->s.generic1 = ent->s.number; //src
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 880
;880:  tent->s.clientNum = traceEnt->s.number; //dest
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
line 883
;881:
;882:  // move origin a bit to come closer to the drawn gun muzzle
;883:  VectorMA(tent->s.origin2, 28, up, tent->s.origin2);
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRGP4 up
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRGP4 up+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRGP4 up+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 884
;884:}
LABELV $358
endproc teslaFire 128 32
export cancelBuildFire
proc cancelBuildFire 148 28
line 901
;885:
;886:/*
;887: ======================================================================
;888:
;889: BUILD GUN
;890:
;891: ======================================================================
;892: */
;893:
;894:/*
;895: ===============
;896: cancelBuildFire
;897: ===============
;898: */
;899:void
;900:cancelBuildFire(gentity_t *ent)
;901:{
line 907
;902:  vec3_t forward, end;
;903:  trace_t tr;
;904:  gentity_t *traceEnt;
;905:  int bHealth;
;906:
;907:  if (ent->client->ps.stats[STAT_BUILDABLE] != BA_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
EQI4 $387
line 908
;908:  {
line 909
;909:    ent->client->ps.stats[STAT_BUILDABLE] = BA_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
CNSTI4 0
ASGNI4
line 910
;910:    return;
ADDRGP4 $386
JUMPV
LABELV $387
line 913
;911:  }
;912:
;913:  if (g_survival.integer)
ADDRGP4 g_survival+12
INDIRI4
CNSTI4 0
EQI4 $389
line 914
;914:  {
line 915
;915:	  G_healFriend(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_healFriend
CALLV
pop
line 916
;916:    return;
ADDRGP4 $386
JUMPV
LABELV $389
line 920
;917:  }
;918:	
;919:  //repair buildable
;920:  if (ent->client->ps.stats[STAT_PTEAM] == PTE_HUMANS || ent->client->ps.stats[STAT_PTEAM]== PTE_ALIENS)
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
EQI4 $394
ADDRLP4 92
INDIRI4
CNSTI4 1
NEI4 $392
LABELV $394
line 921
;921:  {
line 922
;922:    AngleVectors(ent->client->ps.viewangles, forward, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 923
;923:    VectorMA(ent->client->ps.origin, 100, forward, end);
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ASGNP4
ADDRLP4 104
CNSTF4 1120403456
ASGNF4
ADDRLP4 16
ADDRLP4 100
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 104
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 100
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 104
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1120403456
ADDRLP4 4+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 925
;924:
;925:    trap_Trace(&tr, ent->client->ps.origin, NULL, NULL, end, ent->s.number, MASK_PLAYERSOLID);
ADDRLP4 28
ARGP4
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 112
CNSTP4 0
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 108
INDIRP4
INDIRI4
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 926
;926:    traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 28+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 928
;927:
;928:    if (tr.fraction < 1.0 && (traceEnt->s.eType == ET_BUILDABLE) && (traceEnt->biteam
ADDRLP4 28+8
INDIRF4
CNSTF4 1065353216
GEF4 $393
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $393
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
ADDRLP4 120
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
NEI4 $393
ADDRLP4 124
ADDRLP4 120
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 20
LTI4 $393
ADDRLP4 124
INDIRI4
CNSTI4 21
GTI4 $393
ADDRLP4 128
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
ADDRLP4 128
INDIRI4
EQI4 $393
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 128
INDIRI4
LEI4 $393
line 931
;929:        == ent->client->ps.stats[STAT_PTEAM]) && ((ent->client->ps.weapon >= WP_HBUILD2)
;930:        && (ent->client->ps.weapon <= WP_HBUILD)) && traceEnt->spawned && traceEnt->health > 0)
;931:    {
line 932
;932:      if (ent->client->ps.stats[STAT_MISC] > 0)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $403
line 933
;933:      {
line 934
;934:        G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 132
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 935
;935:        return;
ADDRGP4 $386
JUMPV
LABELV $403
line 938
;936:      }
;937:
;938:      bHealth = BG_FindHealthForBuildable(traceEnt->s.modelindex);
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRLP4 132
ADDRGP4 BG_FindHealthForBuildable
CALLI4
ASGNI4
ADDRLP4 88
ADDRLP4 132
INDIRI4
ASGNI4
line 940
;939:
;940:      traceEnt->health += HBUILD_HEALRATE;
ADDRLP4 136
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRI4
CNSTI4 38
ADDI4
ASGNI4
line 941
;941:      ent->client->pers.statscounters.repairspoisons++;
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1078
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI2
CVII4 2
CNSTI4 1
ADDI4
CVII2 4
ASGNI2
line 942
;942:      level.humanStatsCounters.repairspoisons++;
ADDRLP4 144
ADDRGP4 level+190108+36
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 944
;943:
;944:      if (traceEnt->health > bHealth)
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 88
INDIRI4
LEI4 $407
line 945
;945:        traceEnt->health = bHealth;
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
LABELV $407
line 947
;946:
;947:      if (traceEnt->health == bHealth)
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 88
INDIRI4
NEI4 $409
line 948
;948:        G_AddEvent(ent, EV_BUILD_REPAIRED, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 57
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
ADDRGP4 $393
JUMPV
LABELV $409
line 950
;949:      else
;950:        G_AddEvent(ent, EV_BUILD_REPAIR, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 951
;951:    }
line 952
;952:  }
ADDRGP4 $393
JUMPV
LABELV $392
line 953
;953:  else if (ent->client->ps.weapon == WP_ABUILD2)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 19
NEI4 $411
line 954
;954:    meleeAttack(ent, ABUILDER_CLAW_RANGE, ABUILDER_CLAW_WIDTH, ABUILDER_CLAW_DMG, MOD_ABUILDER_CLAW); //melee attack for alien builder
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1115684864
ARGF4
CNSTF4 1082130432
ARGF4
CNSTI4 20
ARGI4
CNSTI4 23
ARGI4
ADDRGP4 meleeAttack
CALLV
pop
LABELV $411
LABELV $393
line 955
;955:}
LABELV $386
endproc cancelBuildFire 148 28
export buildFire
proc buildFire 32 12
line 964
;956:
;957:/*
;958: ===============
;959: buildFire
;960: ===============
;961: */
;962:void
;963:buildFire(gentity_t *ent, dynMenu_t menu)
;964:{
line 968
;965:  int biteam;
;966:
;967:  //If survival shot the dome.
;968:  if(g_survival.integer)
ADDRGP4 g_survival+12
INDIRI4
CNSTI4 0
EQI4 $414
line 969
;969:  {
line 976
;970:    gentity_t      *m;
;971:
;972://    G_healFriend(ent);
;973:   // return;
;974:
;975:    //Dome code starts here.
;976:    if (ent->client->ps.stats[STAT_MISC] > 0)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $417
line 977
;977:    {
line 978
;978:      G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 979
;979:      return;
ADDRGP4 $413
JUMPV
LABELV $417
line 982
;980:    }
;981:
;982:    if (ent->client->ps.persistant[PERS_UNUSED] < 1)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 256
ADDP4
INDIRI4
CNSTI4 1
GEI4 $419
line 983
;983:    {
line 984
;984:      G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 985
;985:      trap_SendServerCommand(ent - g_entities, "print \"^2You need to pickup a medical supply.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2476
DIVI4
ARGI4
ADDRGP4 $421
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 986
;986:      return;
ADDRGP4 $413
JUMPV
LABELV $419
line 988
;987:    }
;988:    if (ent->numDomes > 0)
ADDRFP4 0
INDIRP4
CNSTI4 2460
ADDP4
INDIRI4
CNSTI4 0
LEI4 $422
line 989
;989:    {
line 990
;990:      trap_SendServerCommand(ent - g_entities, "print \"You cannot drop more than 1 Dome.\n\"");
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2476
DIVI4
ARGI4
ADDRGP4 $424
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 991
;991:      return;
ADDRGP4 $413
JUMPV
LABELV $422
line 993
;992:    }
;993:    ent->numDomes++;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 2460
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 995
;994:
;995:    ent->client->ps.persistant[PERS_UNUSED] -= 1; //Medkit.
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 256
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 996
;996:    ent->client->ps.persistant[PERS_SCORE] += 10; //Incrase score.
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 997
;997:	  ent->client->pers.deploytime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 944
ADDP4
ADDRGP4 level+28
INDIRI4
ASGNI4
line 998
;998:    m = fire_dome(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 20
ADDRGP4 fire_dome
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 999
;999:	  ent->client->pers.heals++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 896
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1000
;1000:	  if((ent->client->pers.badges[ 39 ] != 1) && (ent->client->pers.heals >= 6))
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 811
ADDP4
INDIRI1
CVII4 1
CNSTI4 1
EQI4 $413
ADDRLP4 28
INDIRP4
CNSTI4 896
ADDP4
INDIRI4
CNSTI4 6
LTI4 $413
line 1001
;1001:	  {
line 1002
;1002:		  G_WinBadge( ent, 39 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 39
ARGI4
ADDRGP4 G_WinBadge
CALLV
pop
line 1003
;1003:		  ent->client->pers.badgeupdate[39] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 861
ADDP4
CNSTI1 1
ASGNI1
line 1004
;1004:		  ent->client->pers.badges[39] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 811
ADDP4
CNSTI1 1
ASGNI1
line 1005
;1005:	  }
line 1006
;1006:    return;
ADDRGP4 $413
JUMPV
LABELV $414
line 1009
;1007:  }
;1008:
;1009:  if (ent->client->ps.stats[STAT_PTEAM] == PTE_HUMANS)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $428
line 1010
;1010:  {
line 1011
;1011:    biteam = BIT_HUMANS;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 1012
;1012:  }
ADDRGP4 $429
JUMPV
LABELV $428
line 1014
;1013:  else
;1014:  {
line 1015
;1015:    biteam = BIT_ALIENS;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1016
;1016:  }
LABELV $429
line 1017
;1017:  if ((ent->client->ps.stats[STAT_BUILDABLE] & ~SB_VALID_TOGGLEBIT) > BA_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
CNSTI4 0
LEI4 $430
line 1018
;1018:  {
line 1019
;1019:    if (ent->client->ps.stats[STAT_MISC] > 0)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $432
line 1020
;1020:    {
line 1021
;1021:      G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1022
;1022:      return;
ADDRGP4 $413
JUMPV
LABELV $432
line 1025
;1023:    }
;1024:
;1025:    if (G_BuildIfValid(ent, ent->client->ps.stats[STAT_BUILDABLE] & ~SB_VALID_TOGGLEBIT))
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
ARGI4
ADDRLP4 8
ADDRGP4 G_BuildIfValid
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $413
line 1026
;1026:    {
line 1027
;1027:      if (g_cheats.integer)
ADDRGP4 g_cheats+12
INDIRI4
CNSTI4 0
EQI4 $436
line 1028
;1028:      {
line 1029
;1029:        ent->client->ps.stats[STAT_MISC] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
CNSTI4 0
ASGNI4
line 1030
;1030:      } /*else if( ent->client->ps.stats[ STAT_PTEAM ] == PTE_ALIENS && !G_IsOvermindBuilt( ) )
ADDRGP4 $437
JUMPV
LABELV $436
line 1035
;1031:       {
;1032:       ent->client->ps.stats[ STAT_MISC ] +=
;1033:       BG_FindBuildDelayForWeapon( ent->s.weapon ) * 2;
;1034:       }*/
;1035:      else if ((ent->client->ps.stats[STAT_PTEAM] == PTE_HUMANS
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
EQI4 $441
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $439
LABELV $441
ADDRGP4 muzzle
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 G_IsPowered
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $439
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
CNSTI4 16
EQI4 $439
line 1038
;1036:          || ent->client->ps.stats[STAT_PTEAM] == PTE_ALIENS) && !G_IsPowered(muzzle, biteam)
;1037:          && (ent->client->ps.stats[STAT_BUILDABLE] & ~SB_VALID_TOGGLEBIT) != BA_H_REPEATER) //hack
;1038:      {
line 1039
;1039:        ent->client->ps.stats[STAT_MISC] += BG_FindBuildDelayForWeapon(ent->s.weapon) * 2;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindBuildDelayForWeapon
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
CNSTI4 1
LSHI4
ADDI4
ASGNI4
line 1040
;1040:      }
ADDRGP4 $440
JUMPV
LABELV $439
line 1042
;1041:      else
;1042:        ent->client->ps.stats[STAT_MISC] += BG_FindBuildDelayForWeapon(ent->s.weapon);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindBuildDelayForWeapon
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
LABELV $440
LABELV $437
line 1044
;1043:
;1044:      ent->client->ps.stats[STAT_BUILDABLE] = BA_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 232
ADDP4
CNSTI4 0
ASGNI4
line 1047
;1045:
;1046:      // don't want it bigger than 32k
;1047:      if (ent->client->ps.stats[STAT_MISC] > 30000)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 30000
LEI4 $413
line 1048
;1048:        ent->client->ps.stats[STAT_MISC] = 30000;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
CNSTI4 30000
ASGNI4
line 1049
;1049:    }
line 1050
;1050:    return;
ADDRGP4 $413
JUMPV
LABELV $430
line 1053
;1051:  }
;1052:
;1053:  G_TriggerMenu(ent->client->ps.clientNum, menu);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 G_TriggerMenu
CALLV
pop
line 1054
;1054:}
LABELV $413
endproc buildFire 32 12
export slowBlobFire
proc slowBlobFire 8 12
line 1058
;1055:
;1056:void
;1057:slowBlobFire(gentity_t *ent)
;1058:{
line 1061
;1059:  gentity_t *m;
;1060:
;1061:  m = fire_slowBlob(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_slowBlob
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1064
;1062:
;1063:  //  VectorAdd( m->s.pos.trDelta, ent->client->ps.velocity, m->s.pos.trDelta );  // "real" physics
;1064:}
LABELV $444
endproc slowBlobFire 8 12
export CheckVenomAttack
proc CheckVenomAttack 148 32
line 1081
;1065:
;1066:/*
;1067: ======================================================================
;1068:
;1069: LEVEL0
;1070:
;1071: ======================================================================
;1072: */
;1073:
;1074:/*
;1075: ===============
;1076: CheckVenomAttack
;1077: ===============
;1078: */
;1079:qboolean
;1080:CheckVenomAttack(gentity_t *ent)
;1081:{
line 1087
;1082:  trace_t tr;
;1083:  vec3_t end;
;1084:  gentity_t *tent;
;1085:  gentity_t *traceEnt;
;1086:  vec3_t mins, maxs;
;1087:  int damage = LEVEL0_BITE_DMG;
ADDRLP4 104
CNSTI4 52
ASGNI4
line 1089
;1088:
;1089:  VectorSet(mins, -LEVEL0_BITE_WIDTH, -LEVEL0_BITE_WIDTH, -LEVEL0_BITE_WIDTH);
ADDRLP4 108
CNSTF4 3233808384
ASGNF4
ADDRLP4 76
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 76+8
CNSTF4 3233808384
ASGNF4
line 1090
;1090:  VectorSet(maxs, LEVEL0_BITE_WIDTH, LEVEL0_BITE_WIDTH, LEVEL0_BITE_WIDTH);
ADDRLP4 112
CNSTF4 1086324736
ASGNF4
ADDRLP4 88
ADDRLP4 112
INDIRF4
ASGNF4
ADDRLP4 88+4
ADDRLP4 112
INDIRF4
ASGNF4
ADDRLP4 88+8
CNSTF4 1086324736
ASGNF4
line 1093
;1091:
;1092:  // set aiming directions
;1093:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1095
;1094:
;1095:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1097
;1096:
;1097:  VectorMA(muzzle, LEVEL0_BITE_RANGE, forward, end);
ADDRLP4 116
CNSTF4 1115684864
ASGNF4
ADDRLP4 64
ADDRGP4 muzzle
INDIRF4
ADDRLP4 116
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 64+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 116
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 64+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1115684864
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1099
;1098:
;1099:  G_UnlaggedOn(ent, muzzle, LEVEL0_BITE_RANGE);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1115684864
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 1100
;1100:  trap_Trace(&tr, muzzle, mins, maxs, end, ent->s.number, MASK_SHOT);
ADDRLP4 4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 88
ARGP4
ADDRLP4 64
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1101
;1101:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 1103
;1102:
;1103:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 4+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $456
line 1104
;1104:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $456
line 1106
;1105:
;1106:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 4+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1108
;1107:
;1108:  if (!traceEnt->takedamage)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $460
line 1109
;1109:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $460
line 1111
;1110:
;1111:  if (!traceEnt->client && !traceEnt->s.eType == ET_BUILDABLE)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $462
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $465
ADDRLP4 120
CNSTI4 1
ASGNI4
ADDRGP4 $466
JUMPV
LABELV $465
ADDRLP4 120
CNSTI4 0
ASGNI4
LABELV $466
ADDRLP4 120
INDIRI4
CNSTI4 3
NEI4 $462
line 1112
;1112:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $462
line 1115
;1113:
;1114:  //allow bites to work against defensive buildables only
;1115:  if (traceEnt->s.eType == ET_BUILDABLE)
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $467
line 1116
;1116:  {
line 1117
;1117:    if (traceEnt->s.modelindex != BA_H_MGTURRET && traceEnt->s.modelindex != BA_H_TESLAGEN)
ADDRLP4 128
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 10
EQI4 $469
ADDRLP4 128
INDIRI4
CNSTI4 11
EQI4 $469
line 1118
;1118:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $469
line 1121
;1119:
;1120:    //hackery
;1121:    damage *= 0.5f;
ADDRLP4 104
CNSTF4 1056964608
ADDRLP4 104
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 1122
;1122:  }
LABELV $467
line 1124
;1123:
;1124:  if (traceEnt->client)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $471
line 1125
;1125:  {
line 1126
;1126:    if (traceEnt->client->ps.stats[STAT_PTEAM] == PTE_ALIENS)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
NEI4 $473
line 1127
;1127:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $473
line 1128
;1128:    if (traceEnt->client->ps.stats[STAT_HEALTH] <= 0)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $475
line 1129
;1129:      return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $445
JUMPV
LABELV $475
line 1130
;1130:  }
LABELV $471
line 1133
;1131:
;1132:  // send blood impact
;1133:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $477
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $477
line 1134
;1134:  {
line 1135
;1135:    tent = G_TempEntity(tr.endpos, EV_MISSILE_HIT);
ADDRLP4 4+12
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 132
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 100
ADDRLP4 132
INDIRP4
ASGNP4
line 1136
;1136:    tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 100
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 1137
;1137:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 4+24
ARGP4
ADDRLP4 136
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 100
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 1138
;1138:    tent->s.weapon = ent->s.weapon;
ADDRLP4 140
CNSTI4 192
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1139
;1139:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 144
CNSTI4 204
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1140
;1140:  }
LABELV $477
line 1142
;1141:
;1142:  G_Damage(traceEnt, ent, ent, forward, tr.endpos, damage, DAMAGE_NO_KNOCKBACK, MOD_LEVEL0_BITE);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4+12
ARGP4
ADDRLP4 104
INDIRI4
ARGI4
CNSTI4 4
ARGI4
CNSTI4 24
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1144
;1143:
;1144:  return qtrue;
CNSTI4 1
RETI4
LABELV $445
endproc CheckVenomAttack 148 32
export CheckGrabAttack
proc CheckGrabAttack 104 28
line 1162
;1145:}
;1146:
;1147:/*
;1148: ======================================================================
;1149:
;1150: LEVEL1
;1151:
;1152: ======================================================================
;1153: */
;1154:
;1155:/*
;1156: ===============
;1157: CheckGrabAttack
;1158: ===============
;1159: */
;1160:void
;1161:CheckGrabAttack(gentity_t *ent)
;1162:{
line 1168
;1163:  trace_t tr;
;1164:  vec3_t end, dir;
;1165:  gentity_t *traceEnt;
;1166:
;1167:  // set aiming directions
;1168:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1170
;1169:
;1170:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1172
;1171:
;1172:  VectorMA(muzzle, LEVEL1_GRAB_RANGE, forward, end);
ADDRLP4 88
CNSTF4 1115684864
ASGNF4
ADDRLP4 4
ADDRGP4 muzzle
INDIRF4
ADDRLP4 88
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 88
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1115684864
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1174
;1173:
;1174:  trap_Trace(&tr, muzzle, NULL, NULL, end, ent->s.number, MASK_SHOT);
ADDRLP4 16
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1175
;1175:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 16+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $489
line 1176
;1176:    return;
ADDRGP4 $482
JUMPV
LABELV $489
line 1178
;1177:
;1178:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 16+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1180
;1179:
;1180:  if (!traceEnt->takedamage)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $493
line 1181
;1181:    return;
ADDRGP4 $482
JUMPV
LABELV $493
line 1183
;1182:
;1183:  if (traceEnt->client)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $495
line 1184
;1184:  {
line 1185
;1185:    if (traceEnt->client->ps.stats[STAT_PTEAM] == PTE_ALIENS)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
NEI4 $497
line 1186
;1186:      return;
ADDRGP4 $482
JUMPV
LABELV $497
line 1188
;1187:
;1188:    if (traceEnt->client->ps.stats[STAT_HEALTH] <= 0)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $499
line 1189
;1189:      return;
ADDRGP4 $482
JUMPV
LABELV $499
line 1191
;1190:
;1191:    if (!(traceEnt->client->ps.stats[STAT_STATE] & SS_GRABBED))
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $501
line 1192
;1192:    {
line 1193
;1193:      AngleVectors(traceEnt->client->ps.viewangles, dir, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1194
;1194:      traceEnt->client->ps.stats[STAT_VIEWLOCK] = DirToByte(dir);
ADDRLP4 76
ARGP4
ADDRLP4 100
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 244
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 1197
;1195:
;1196:      //event for client side grab effect
;1197:      G_AddPredictableEvent(ent, EV_LEV1_GRAB, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 44
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddPredictableEvent
CALLV
pop
line 1198
;1198:    }
LABELV $501
line 1200
;1199:
;1200:    traceEnt->client->ps.stats[STAT_STATE] |= SS_GRABBED;
ADDRLP4 96
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1202
;1201:
;1202:    if (ent->client->ps.weapon == WP_ALEVEL1)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 23
NEI4 $503
line 1203
;1203:      traceEnt->client->grabExpiryTime = level.time + LEVEL1_GRAB_TIME;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1348
ADDP4
ADDRGP4 level+28
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
ADDRGP4 $496
JUMPV
LABELV $503
line 1204
;1204:    else if (ent->client->ps.weapon == WP_ALEVEL1_UPG)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 24
NEI4 $496
line 1205
;1205:      traceEnt->client->grabExpiryTime = level.time + LEVEL1_GRAB_U_TIME;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1348
ADDP4
ADDRGP4 level+28
INDIRI4
CNSTI4 450
ADDI4
ASGNI4
line 1206
;1206:  }
ADDRGP4 $496
JUMPV
LABELV $495
line 1207
;1207:  else if (traceEnt->s.eType == ET_BUILDABLE && traceEnt->s.modelindex == BA_H_MGTURRET)
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $509
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 10
NEI4 $509
line 1208
;1208:  {
line 1209
;1209:    if (!traceEnt->lev1Grabbed)
ADDRLP4 0
INDIRP4
CNSTI4 1036
ADDP4
INDIRI4
CNSTI4 0
NEI4 $511
line 1210
;1210:      G_AddPredictableEvent(ent, EV_LEV1_GRAB, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 44
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddPredictableEvent
CALLV
pop
LABELV $511
line 1212
;1211:
;1212:    traceEnt->lev1Grabbed = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1036
ADDP4
CNSTI4 1
ASGNI4
line 1213
;1213:    traceEnt->lev1GrabTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRGP4 level+28
INDIRI4
ASGNI4
line 1214
;1214:  }
LABELV $509
LABELV $496
line 1215
;1215:}
LABELV $482
endproc CheckGrabAttack 104 28
lit
align 4
LABELV $515
byte 4 1128792064
byte 4 1128792064
byte 4 1128792064
export poisonCloud
code
proc poisonCloud 4240 28
line 1224
;1216:
;1217:/*
;1218: ===============
;1219: poisonCloud
;1220: ===============
;1221: */
;1222:void
;1223:poisonCloud(gentity_t *ent)
;1224:{
line 1227
;1225:  int entityList[MAX_GENTITIES];
;1226:  vec3_t range =
;1227:  { LEVEL1_PCLOUD_RANGE, LEVEL1_PCLOUD_RANGE, LEVEL1_PCLOUD_RANGE };
ADDRLP4 4168
ADDRGP4 $515
INDIRB
ASGNB 12
line 1233
;1228:  vec3_t mins, maxs;
;1229:  int i, num;
;1230:  gentity_t *humanPlayer;
;1231:  trace_t tr;
;1232:
;1233:  VectorAdd(ent->client->ps.origin, range, maxs);
ADDRLP4 4204
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ASGNP4
ADDRLP4 4192
ADDRLP4 4204
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 4168
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4192+4
ADDRLP4 4204
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4168+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4192+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4168+8
INDIRF4
ADDF4
ASGNF4
line 1234
;1234:  VectorSubtract(ent->client->ps.origin, range, mins);
ADDRLP4 4208
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ASGNP4
ADDRLP4 4180
ADDRLP4 4208
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 4168
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4180+4
ADDRLP4 4208
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4168+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4180+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4168+8
INDIRF4
SUBF4
ASGNF4
line 1236
;1235:
;1236:  G_UnlaggedOn(ent, ent->client->ps.origin, LEVEL1_PCLOUD_RANGE);
ADDRLP4 4212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4212
INDIRP4
ARGP4
ADDRLP4 4212
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTF4 1128792064
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 1237
;1237:  num = trap_EntitiesInBox(mins, maxs, entityList, MAX_GENTITIES);
ADDRLP4 4180
ARGP4
ADDRLP4 4192
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4216
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4104
ADDRLP4 4216
INDIRI4
ASGNI4
line 1238
;1238:  for(i = 0;i < num;i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $527
JUMPV
LABELV $524
line 1239
;1239:  {
line 1240
;1240:    humanPlayer = &g_entities[entityList[i]];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1242
;1241:
;1242:    if (humanPlayer->client && humanPlayer->client->ps.stats[STAT_PTEAM] == PTE_HUMANS)
ADDRLP4 4220
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4220
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $528
ADDRLP4 4220
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $528
line 1243
;1243:    {
line 1244
;1244:      if (BG_InventoryContainsUpgrade(UP_LIGHTARMOUR, humanPlayer->client->ps.stats))
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 4224
ADDRGP4 BG_InventoryContainsUpgrade
CALLI4
ASGNI4
ADDRLP4 4224
INDIRI4
CNSTI4 0
EQI4 $530
line 1245
;1245:        continue;
ADDRGP4 $525
JUMPV
LABELV $530
line 1250
;1246:
;1247:      /*if (BG_InventoryContainsUpgrade(UP_BATTLESUIT, humanPlayer->client->ps.stats))
;1248:       continue;*/
;1249:
;1250:      trap_Trace(&tr, muzzle, NULL, NULL, humanPlayer->s.origin, humanPlayer->s.number, MASK_SHOT);
ADDRLP4 4108
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 4228
CNSTP4 0
ASGNP4
ADDRLP4 4228
INDIRP4
ARGP4
ADDRLP4 4228
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1253
;1251:
;1252:      //can't see target from here
;1253:      if (tr.entityNum == ENTITYNUM_WORLD)
ADDRLP4 4108+52
INDIRI4
CNSTI4 1022
NEI4 $532
line 1254
;1254:        continue;
ADDRGP4 $525
JUMPV
LABELV $532
line 1256
;1255:
;1256:      if (!(humanPlayer->client->ps.stats[STAT_STATE] & SS_POISONCLOUDED))
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
NEI4 $535
line 1257
;1257:      {
line 1258
;1258:        humanPlayer->client->ps.stats[STAT_STATE] |= SS_POISONCLOUDED;
ADDRLP4 4236
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 4236
INDIRP4
ADDRLP4 4236
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
line 1259
;1259:        humanPlayer->client->lastPoisonCloudedTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1340
ADDP4
ADDRGP4 level+28
INDIRI4
ASGNI4
line 1260
;1260:        humanPlayer->client->lastPoisonCloudedClient = ent;
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1344
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1261
;1261:        trap_SendServerCommand(humanPlayer->client->ps.clientNum, "poisoncloud");
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 $538
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1262
;1262:      }
LABELV $535
line 1263
;1263:    }
LABELV $528
line 1264
;1264:  }
LABELV $525
line 1238
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $527
ADDRLP4 4
INDIRI4
ADDRLP4 4104
INDIRI4
LTI4 $524
line 1265
;1265:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 1266
;1266:}
LABELV $514
endproc poisonCloud 4240 28
lit
align 4
LABELV $540
byte 4 1128792064
byte 4 1128792064
byte 4 1128792064
code
proc G_FindNewZapTarget 4252 28
line 1287
;1267:
;1268:/*
;1269: ======================================================================
;1270:
;1271: LEVEL2
;1272:
;1273: ======================================================================
;1274: */
;1275:
;1276:#define MAX_ZAPS  64
;1277:
;1278:static zap_t zaps[MAX_CLIENTS];
;1279:
;1280:/*
;1281: ===============
;1282: G_FindNewZapTarget
;1283: ===============
;1284: */
;1285:static gentity_t *
;1286:G_FindNewZapTarget(gentity_t *ent)
;1287:{
line 1290
;1288:  int entityList[MAX_GENTITIES];
;1289:  vec3_t range =
;1290:  { LEVEL2_AREAZAP_RANGE, LEVEL2_AREAZAP_RANGE, LEVEL2_AREAZAP_RANGE };
ADDRLP4 16
ADDRGP4 $540
INDIRB
ASGNB 12
line 1296
;1291:  vec3_t mins, maxs;
;1292:  int i, j, k, num;
;1293:  gentity_t *enemy;
;1294:  trace_t tr;
;1295:
;1296:  VectorScale(range, 1.0f / M_ROOT3, range);
ADDRLP4 4212
CNSTF4 1058262330
ASGNF4
ADDRLP4 16
ADDRLP4 4212
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 4212
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1058262330
ADDRLP4 16+8
INDIRF4
MULF4
ASGNF4
line 1297
;1297:  VectorAdd(ent->s.origin, range, maxs);
ADDRLP4 4216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4200
ADDRLP4 4216
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4200+4
ADDRLP4 4216
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4200+8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDF4
ASGNF4
line 1298
;1298:  VectorSubtract(ent->s.origin, range, mins);
ADDRLP4 4220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4188
ADDRLP4 4220
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4188+4
ADDRLP4 4220
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4188+8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 1300
;1299:
;1300:  num = trap_EntitiesInBox(mins, maxs, entityList, MAX_GENTITIES);
ADDRLP4 4188
ARGP4
ADDRLP4 4200
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4224
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4124
ADDRLP4 4224
INDIRI4
ASGNI4
line 1302
;1301:
;1302:  for(i = 0;i < num;i++)
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $556
JUMPV
LABELV $553
line 1303
;1303:  {
line 1304
;1304:    enemy = &g_entities[entityList[i]];
ADDRLP4 4
CNSTI4 2476
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1306
;1305:
;1306:    if (((enemy->client && enemy->client->ps.stats[STAT_PTEAM] == PTE_HUMANS) || (enemy->s.eType
ADDRLP4 4228
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4228
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $560
ADDRLP4 4228
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
EQI4 $559
LABELV $560
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $557
ADDRLP4 4
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRLP4 4236
ADDRGP4 BG_FindTeamForBuildable
CALLI4
ASGNI4
ADDRLP4 4236
INDIRI4
CNSTI4 2
NEI4 $557
LABELV $559
ADDRLP4 4
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 0
LEI4 $557
line 1309
;1307:        == ET_BUILDABLE && BG_FindTeamForBuildable(enemy->s.modelindex) == BIT_HUMANS))
;1308:        && enemy->health > 0)
;1309:    {
line 1310
;1310:      qboolean foundOldTarget = qfalse;
ADDRLP4 4240
CNSTI4 0
ASGNI4
line 1312
;1311:
;1312:      trap_Trace(&tr, muzzle, NULL, NULL, enemy->s.origin, ent->s.number, MASK_SHOT);
ADDRLP4 4128
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 4244
CNSTP4 0
ASGNP4
ADDRLP4 4244
INDIRP4
ARGP4
ADDRLP4 4244
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1315
;1313:
;1314:      //can't see target from here
;1315:      if (tr.entityNum == ENTITYNUM_WORLD)
ADDRLP4 4128+52
INDIRI4
CNSTI4 1022
NEI4 $561
line 1316
;1316:        continue;
ADDRGP4 $554
JUMPV
LABELV $561
line 1318
;1317:
;1318:      for(j = 0;j < MAX_ZAPS;j++)
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $564
line 1319
;1319:      {
line 1320
;1320:        zap_t *zap = &zaps[j];
ADDRLP4 4248
CNSTI4 36
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 zaps
ADDP4
ASGNP4
line 1322
;1321:
;1322:        for(k = 0;k < zap->numTargets;k++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $571
JUMPV
LABELV $568
line 1323
;1323:        {
line 1324
;1324:          if (zap->targets[k] == enemy)
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4248
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
NEU4 $572
line 1325
;1325:          {
line 1326
;1326:            foundOldTarget = qtrue;
ADDRLP4 4240
CNSTI4 1
ASGNI4
line 1327
;1327:            break;
ADDRGP4 $570
JUMPV
LABELV $572
line 1329
;1328:          }
;1329:        }
LABELV $569
line 1322
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $571
ADDRLP4 0
INDIRI4
ADDRLP4 4248
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $568
LABELV $570
line 1331
;1330:
;1331:        if (foundOldTarget)
ADDRLP4 4240
INDIRI4
CNSTI4 0
EQI4 $574
line 1332
;1332:          break;
ADDRGP4 $566
JUMPV
LABELV $574
line 1333
;1333:      }
LABELV $565
line 1318
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $564
LABELV $566
line 1336
;1334:
;1335:      // enemy is already targetted
;1336:      if (foundOldTarget)
ADDRLP4 4240
INDIRI4
CNSTI4 0
EQI4 $576
line 1337
;1337:        continue;
ADDRGP4 $554
JUMPV
LABELV $576
line 1339
;1338:
;1339:      return enemy;
ADDRLP4 4
INDIRP4
RETP4
ADDRGP4 $539
JUMPV
LABELV $557
line 1341
;1340:    }
;1341:  }
LABELV $554
line 1302
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $556
ADDRLP4 12
INDIRI4
ADDRLP4 4124
INDIRI4
LTI4 $553
line 1343
;1342:
;1343:  return NULL;
CNSTP4 0
RETP4
LABELV $539
endproc G_FindNewZapTarget 4252 28
proc G_UpdateZapEffect 24 8
line 1353
;1344:}
;1345:
;1346:/*
;1347: ===============
;1348: G_UpdateZapEffect
;1349: ===============
;1350: */
;1351:static void
;1352:G_UpdateZapEffect(zap_t *zap)
;1353:{
line 1355
;1354:  int j;
;1355:  gentity_t *effect = zap->effectChannel;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRP4
ASGNP4
line 1357
;1356:
;1357:  effect->s.eType = ET_LEV2_ZAP_CHAIN;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 18
ASGNI4
line 1358
;1358:  effect->classname = "lev2zapchain";
ADDRLP4 4
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $579
ASGNP4
line 1359
;1359:  G_SetOrigin(effect, zap->creator->s.origin);
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1360
;1360:  effect->s.powerups = zap->creator->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 188
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 1362
;1361:
;1362:  effect->s.time = effect->s.time2 = effect->s.constantLight = -1;
ADDRLP4 12
CNSTI4 -1
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1364
;1363:
;1364:  for(j = 0;j < zap->numTargets;j++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $583
JUMPV
LABELV $580
line 1365
;1365:  {
line 1366
;1366:    int number = zap->targets[j]->s.number;
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 1368
;1367:
;1368:    switch(j)
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $586
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $587
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $588
ADDRGP4 $585
JUMPV
line 1369
;1369:    {
LABELV $586
line 1371
;1370:      case 0:
;1371:        effect->s.time = number;
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1372
;1372:        break;
ADDRGP4 $585
JUMPV
LABELV $587
line 1374
;1373:      case 1:
;1374:        effect->s.time2 = number;
ADDRLP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1375
;1375:        break;
ADDRGP4 $585
JUMPV
LABELV $588
line 1377
;1376:      case 2:
;1377:        effect->s.constantLight = number;
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1378
;1378:        break;
line 1380
;1379:      default:
;1380:        break;
LABELV $585
line 1382
;1381:    }
;1382:  }
LABELV $581
line 1364
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $583
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $580
line 1384
;1383:
;1384:  trap_LinkEntity(effect);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1385
;1385:}
LABELV $578
endproc G_UpdateZapEffect 24 8
proc G_CreateNewZap 28 4
line 1394
;1386:
;1387:/*
;1388: ===============
;1389: G_CreateNewZap
;1390: ===============
;1391: */
;1392:static void
;1393:G_CreateNewZap(gentity_t *creator, gentity_t *target)
;1394:{
line 1398
;1395:  int i, j;
;1396:  zap_t *zap;
;1397:
;1398:  for(i = 0;i < MAX_ZAPS;i++)
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $590
line 1399
;1399:  {
line 1400
;1400:    zap = &zaps[i];
ADDRLP4 4
CNSTI4 36
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 zaps
ADDP4
ASGNP4
line 1402
;1401:
;1402:    if (!zap->used)
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $594
line 1403
;1403:    {
line 1404
;1404:      zap->used = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 1406
;1405:
;1406:      zap->timeToLive = LEVEL2_AREAZAP_TIME;
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 1000
ASGNI4
line 1407
;1407:      zap->damageUsed = 0;
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
CNSTI4 0
ASGNI4
line 1409
;1408:
;1409:      zap->creator = creator;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1411
;1410:
;1411:      zap->targets[0] = target;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 1412
;1412:      zap->numTargets = 1;
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 1414
;1413:
;1414:      for(j = 1;j < MAX_ZAP_TARGETS && zap->targets[j - 1];j++)
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $599
JUMPV
LABELV $596
line 1415
;1415:      {
line 1416
;1416:        zap->targets[j] = G_FindNewZapTarget(zap->targets[j - 1]);
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 16
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRI4
CNSTI4 4
SUBI4
ADDRLP4 16
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_FindNewZapTarget
CALLP4
ASGNP4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRP4
ADDP4
ADDRLP4 20
INDIRP4
ASGNP4
line 1418
;1417:
;1418:        if (zap->targets[j])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $600
line 1419
;1419:          zap->numTargets++;
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $600
line 1420
;1420:      }
LABELV $597
line 1414
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $599
ADDRLP4 0
INDIRI4
CNSTI4 3
GEI4 $602
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $596
LABELV $602
line 1422
;1421:
;1422:      zap->effectChannel = G_Spawn();
ADDRLP4 16
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 16
INDIRP4
ASGNP4
line 1423
;1423:      G_UpdateZapEffect(zap);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_UpdateZapEffect
CALLV
pop
line 1425
;1424:
;1425:      return;
ADDRGP4 $589
JUMPV
LABELV $594
line 1427
;1426:    }
;1427:  }
LABELV $591
line 1398
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $590
line 1428
;1428:}
LABELV $589
endproc G_CreateNewZap 28 4
export G_UpdateZaps
proc G_UpdateZaps 72 8
line 1437
;1429:
;1430:/*
;1431: ===============
;1432: G_UpdateZaps
;1433: ===============
;1434: */
;1435:void
;1436:G_UpdateZaps(int msec)
;1437:{
line 1442
;1438:  int i, j;
;1439:  zap_t *zap;
;1440:  int damage;
;1441:
;1442:  for(i = 0;i < MAX_ZAPS;i++)
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $604
line 1443
;1443:  {
line 1444
;1444:    zap = &zaps[i];
ADDRLP4 4
CNSTI4 36
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 zaps
ADDP4
ASGNP4
line 1446
;1445:
;1446:    if (zap->used)
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $608
line 1447
;1447:    {
line 1449
;1448:      //check each target is valid
;1449:      for(j = 0;j < zap->numTargets;j++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $613
JUMPV
LABELV $610
line 1450
;1450:      {
line 1452
;1451:        gentity_t *source;
;1452:        gentity_t *target = zap->targets[j];
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
ASGNP4
line 1454
;1453:
;1454:        if (j == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $614
line 1455
;1455:          source = zap->creator;
ADDRLP4 20
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $615
JUMPV
LABELV $614
line 1457
;1456:        else
;1457:          source = zap->targets[j - 1];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
ASGNP4
LABELV $615
line 1459
;1458:
;1459:        if (target->health <= 0 || !target->inuse || //early out
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
LEI4 $619
ADDRLP4 16
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $619
ADDRLP4 32
CNSTI4 92
ASGNI4
ADDRLP4 20
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1128792064
LEF4 $616
LABELV $619
line 1461
;1460:            Distance(source->s.origin, target->s.origin) > LEVEL2_AREAZAP_RANGE)
;1461:        {
line 1462
;1462:          target = zap->targets[j] = G_FindNewZapTarget(source);
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 G_FindNewZapTarget
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 40
INDIRP4
ASGNP4
line 1465
;1463:
;1464:          //couldn't find a target, so forget about the rest of the chain
;1465:          if (!target)
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $620
line 1466
;1466:            zap->numTargets = j;
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $620
line 1467
;1467:        }
LABELV $616
line 1468
;1468:      }
LABELV $611
line 1449
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $613
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $610
line 1470
;1469:
;1470:      if (zap->numTargets)
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
EQI4 $622
line 1471
;1471:      {
line 1472
;1472:        for(j = 0;j < zap->numTargets;j++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $627
JUMPV
LABELV $624
line 1473
;1473:        {
line 1475
;1474:          gentity_t *source;
;1475:          gentity_t *target = zap->targets[j];
ADDRLP4 36
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
ASGNP4
line 1476
;1476:          float r = 1.0f / zap->numTargets;
ADDRLP4 16
CNSTF4 1065353216
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1477
;1477:          float damageFraction = 2 * r - 2 * j * r * r - r * r;
ADDRLP4 40
CNSTF4 1073741824
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CNSTI4 1
LSHI4
CVIF4 4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 16
INDIRF4
MULF4
SUBF4
ADDRLP4 16
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
SUBF4
ASGNF4
line 1480
;1478:          vec3_t forward;
;1479:
;1480:          if (j == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $628
line 1481
;1481:            source = zap->creator;
ADDRLP4 20
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $629
JUMPV
LABELV $628
line 1483
;1482:          else
;1483:            source = zap->targets[j - 1];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDP4
INDIRP4
ASGNP4
LABELV $629
line 1485
;1484:
;1485:          damage = ceil(((float) msec / LEVEL2_AREAZAP_TIME) * LEVEL2_AREAZAP_DMG * damageFraction);
CNSTF4 1117782016
ADDRFP4 0
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
MULF4
ADDRLP4 40
INDIRF4
MULF4
ARGF4
ADDRLP4 48
ADDRGP4 ceil
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 48
INDIRF4
CVFI4 4
ASGNI4
line 1488
;1486:
;1487:          // don't let a high msec value inflate the total damage
;1488:          if (damage + zap->damageUsed > LEVEL2_AREAZAP_DMG)
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDI4
CNSTI4 80
LEI4 $630
line 1489
;1489:            damage = LEVEL2_AREAZAP_DMG - zap->damageUsed;
ADDRLP4 8
CNSTI4 80
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
SUBI4
ASGNI4
LABELV $630
line 1491
;1490:
;1491:          VectorSubtract(target->s.origin, source->s.origin, forward);
ADDRLP4 56
CNSTI4 92
ASGNI4
ADDRLP4 24
ADDRLP4 36
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64
CNSTI4 96
ASGNI4
ADDRLP4 24+4
ADDRLP4 36
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
CNSTI4 100
ASGNI4
ADDRLP4 24+8
ADDRLP4 36
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1492
;1492:          VectorNormalize(forward);
ADDRLP4 24
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1495
;1493:
;1494:          //do the damage
;1495:          if (damage)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $634
line 1496
;1496:          {
line 1501
;1497://            G_Damage(
;1498://              target, source, zap->creator, forward, target->s.origin, damage, DAMAGE_NO_KNOCKBACK
;1499://                  | DAMAGE_NO_LOCDAMAGE, MOD_LEVEL2_ZAP);
;1500://            zap->damageUsed += damage;
;1501:          }
LABELV $634
line 1502
;1502:        }
LABELV $625
line 1472
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $627
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $624
line 1503
;1503:      }
LABELV $622
line 1505
;1504:
;1505:      G_UpdateZapEffect(zap);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_UpdateZapEffect
CALLV
pop
line 1507
;1506:
;1507:      zap->timeToLive -= msec;
ADDRLP4 16
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRFP4 0
INDIRI4
SUBI4
ASGNI4
line 1509
;1508:
;1509:      if (zap->timeToLive <= 0 || zap->numTargets == 0 || zap->creator->health <= 0)
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $639
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $639
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
GTI4 $636
LABELV $639
line 1510
;1510:      {
line 1511
;1511:        zap->used = qfalse;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 1512
;1512:        G_FreeEntity(zap->effectChannel);
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1513
;1513:      }
LABELV $636
line 1514
;1514:    }
LABELV $608
line 1515
;1515:  }
LABELV $605
line 1442
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 64
LTI4 $604
line 1516
;1516:}
LABELV $603
endproc G_UpdateZaps 72 8
export areaZapFire
proc areaZapFire 124 28
line 1525
;1517:
;1518:/*
;1519: ===============
;1520: areaZapFire
;1521: ===============
;1522: */
;1523:void
;1524:areaZapFire(gentity_t *ent)
;1525:{
line 1531
;1526:  trace_t tr;
;1527:  vec3_t end;
;1528:  gentity_t *traceEnt;
;1529:  vec3_t mins, maxs;
;1530:
;1531:  VectorSet(mins, -LEVEL2_AREAZAP_WIDTH, -LEVEL2_AREAZAP_WIDTH, -LEVEL2_AREAZAP_WIDTH);
ADDRLP4 100
CNSTF4 3245342720
ASGNF4
ADDRLP4 16
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 16+8
CNSTF4 3245342720
ASGNF4
line 1532
;1532:  VectorSet(maxs, LEVEL2_AREAZAP_WIDTH, LEVEL2_AREAZAP_WIDTH, LEVEL2_AREAZAP_WIDTH);
ADDRLP4 104
CNSTF4 1097859072
ASGNF4
ADDRLP4 28
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 28+8
CNSTF4 1097859072
ASGNF4
line 1535
;1533:
;1534:  // set aiming directions
;1535:  AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1537
;1536:
;1537:  CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1539
;1538:
;1539:  VectorMA(muzzle, LEVEL2_AREAZAP_RANGE, forward, end);
ADDRLP4 108
CNSTF4 1128792064
ASGNF4
ADDRLP4 4
ADDRGP4 muzzle
INDIRF4
ADDRLP4 108
INDIRF4
ADDRGP4 forward
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRGP4 muzzle+4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRGP4 forward+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRGP4 muzzle+8
INDIRF4
CNSTF4 1128792064
ADDRGP4 forward+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1541
;1540:
;1541:  G_UnlaggedOn(ent, muzzle, LEVEL2_AREAZAP_RANGE);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1128792064
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 1542
;1542:  trap_Trace(&tr, muzzle, mins, maxs, end, ent->s.number, MASK_SHOT);
ADDRLP4 40
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 33554433
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1543
;1543:  G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 1545
;1544:
;1545:  if (tr.surfaceFlags & SURF_NOIMPACT)
ADDRLP4 40+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $651
line 1546
;1546:    return;
ADDRGP4 $640
JUMPV
LABELV $651
line 1548
;1547:
;1548:  traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 40+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1550
;1549:
;1550:  if (((traceEnt->client && traceEnt->client->ps.stats[STAT_PTEAM] == PTE_HUMANS)
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $658
ADDRLP4 112
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
EQI4 $657
LABELV $658
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $655
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRLP4 120
ADDRGP4 BG_FindTeamForBuildable
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 2
NEI4 $655
LABELV $657
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 0
LEI4 $655
line 1553
;1551:      || (traceEnt->s.eType == ET_BUILDABLE && BG_FindTeamForBuildable(traceEnt->s.modelindex)
;1552:          == BIT_HUMANS)) && traceEnt->health > 0)
;1553:  {
line 1554
;1554:    G_CreateNewZap(ent, traceEnt);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_CreateNewZap
CALLV
pop
line 1555
;1555:  }
LABELV $655
line 1556
;1556:}
LABELV $640
endproc areaZapFire 124 28
export CheckPounceAttack
proc CheckPounceAttack 92 20
line 1573
;1557:
;1558:/*
;1559: ======================================================================
;1560:
;1561: LEVEL3
;1562:
;1563: ======================================================================
;1564: */
;1565:
;1566:/*
;1567: ===============
;1568: CheckPounceAttack
;1569: ===============
;1570: */
;1571:qboolean
;1572:CheckPounceAttack(gentity_t *ent)
;1573:{
line 1579
;1574:  trace_t tr;
;1575:  gentity_t *tent;
;1576:  gentity_t *traceEnt;
;1577:  int damage;
;1578:
;1579:  if (ent->client->ps.groundEntityNum != ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $660
line 1580
;1580:  {
line 1581
;1581:    ent->client->allowedToPounce = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1380
ADDP4
CNSTI4 0
ASGNI4
line 1582
;1582:    ent->client->pmext.pouncePayload = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 0
ASGNI4
line 1583
;1583:  }
LABELV $660
line 1585
;1584:
;1585:  if (!ent->client->allowedToPounce)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1380
ADDP4
INDIRI4
CNSTI4 0
NEI4 $662
line 1586
;1586:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $659
JUMPV
LABELV $662
line 1588
;1587:
;1588:  if (ent->client->ps.weaponTime)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
EQI4 $664
line 1589
;1589:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $659
JUMPV
LABELV $664
line 1591
;1590:
;1591:  G_WideTrace(&tr, ent, LEVEL3_POUNCE_RANGE, LEVEL3_POUNCE_WIDTH, &traceEnt);
ADDRLP4 8
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1116733440
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 G_WideTrace
CALLV
pop
line 1593
;1592:
;1593:  if (traceEnt == NULL)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $666
line 1594
;1594:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $659
JUMPV
LABELV $666
line 1597
;1595:
;1596:  // send blood impact
;1597:  if (traceEnt->takedamage && traceEnt->client)
ADDRLP4 72
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $668
ADDRLP4 72
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $668
line 1598
;1598:  {
line 1599
;1599:    tent = G_TempEntity(tr.endpos, EV_MISSILE_HIT);
ADDRLP4 8+12
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 76
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
ASGNP4
line 1600
;1600:    tent->s.otherEntityNum = traceEnt->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 1601
;1601:    tent->s.eventParm = DirToByte(tr.plane.normal);
ADDRLP4 8+24
ARGP4
ADDRLP4 80
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1602
;1602:    tent->s.weapon = ent->s.weapon;
ADDRLP4 84
CNSTI4 192
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1603
;1603:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 88
CNSTI4 204
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1604
;1604:  }
LABELV $668
line 1606
;1605:
;1606:  if (!traceEnt->takedamage)
ADDRLP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $672
line 1607
;1607:    return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $659
JUMPV
LABELV $672
line 1609
;1608:
;1609:  damage = (int) (((float) ent->client->pmext.pouncePayload / (float) LEVEL3_POUNCE_SPEED)
ADDRLP4 68
CNSTF4 1120403456
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1143930880
DIVF4
MULF4
CVFI4 4
ASGNI4
line 1612
;1610:      * LEVEL3_POUNCE_DMG);
;1611:
;1612:  ent->client->pmext.pouncePayload = 0;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 0
ASGNI4
line 1617
;1613:
;1614://  G_Damage(traceEnt, ent, ent, forward, tr.endpos, damage, DAMAGE_NO_KNOCKBACK
;1615://      | DAMAGE_NO_LOCDAMAGE, MOD_LEVEL3_POUNCE);
;1616:
;1617:  ent->client->allowedToPounce = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1380
ADDP4
CNSTI4 0
ASGNI4
line 1619
;1618:
;1619:  return qtrue;
CNSTI4 1
RETI4
LABELV $659
endproc CheckPounceAttack 92 20
export bounceBallFire
proc bounceBallFire 8 12
line 1624
;1620:}
;1621:
;1622:void
;1623:bounceBallFire(gentity_t *ent)
;1624:{
line 1627
;1625:  gentity_t *m;
;1626:
;1627:  m = fire_bounceBall(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_bounceBall
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1630
;1628:
;1629:  //  VectorAdd( m->s.pos.trDelta, ent->client->ps.velocity, m->s.pos.trDelta );  // "real" physics
;1630:}
LABELV $674
endproc bounceBallFire 8 12
export ChargeAttack
proc ChargeAttack 68 8
line 1647
;1631:
;1632:/*
;1633: ======================================================================
;1634:
;1635: LEVEL4
;1636:
;1637: ======================================================================
;1638: */
;1639:
;1640:/*
;1641: ===============
;1642: ChargeAttack
;1643: ===============
;1644: */
;1645:void
;1646:ChargeAttack(gentity_t *ent, gentity_t *victim)
;1647:{
line 1652
;1648:  gentity_t *tent;
;1649:  int damage;
;1650:  vec3_t forward, normal;
;1651:
;1652:  if (level.time < victim->chargeRepeat)
ADDRGP4 level+28
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 864
ADDP4
INDIRI4
GEI4 $676
line 1653
;1653:    return;
ADDRGP4 $675
JUMPV
LABELV $676
line 1655
;1654:
;1655:  victim->chargeRepeat = level.time + LEVEL4_CHARGE_REPEAT;
ADDRFP4 4
INDIRP4
CNSTI4 864
ADDP4
ADDRGP4 level+28
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1657
;1656:
;1657:  VectorSubtract(victim->s.origin, ent->s.origin, forward);
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 92
ASGNI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 96
ASGNI4
ADDRLP4 0+4
ADDRLP4 32
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 48
CNSTI4 100
ASGNI4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1658
;1658:  VectorNormalize(forward);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1659
;1659:  VectorNegate(forward, normal);
ADDRLP4 12
ADDRLP4 0
INDIRF4
NEGF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
NEGF4
ASGNF4
line 1661
;1660:
;1661:  if (victim->client)
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $686
line 1662
;1662:  {
line 1663
;1663:    tent = G_TempEntity(victim->s.origin, EV_MISSILE_HIT);
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
CNSTI4 39
ARGI4
ADDRLP4 52
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 52
INDIRP4
ASGNP4
line 1664
;1664:    tent->s.otherEntityNum = victim->s.number;
ADDRLP4 24
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 1665
;1665:    tent->s.eventParm = DirToByte(normal);
ADDRLP4 12
ARGP4
ADDRLP4 56
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 1666
;1666:    tent->s.weapon = ent->s.weapon;
ADDRLP4 60
CNSTI4 192
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1667
;1667:    tent->s.generic1 = ent->s.generic1; //weaponMode
ADDRLP4 64
CNSTI4 204
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 1668
;1668:  }
LABELV $686
line 1670
;1669:
;1670:  if (!victim->takedamage)
ADDRFP4 4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $688
line 1671
;1671:    return;
ADDRGP4 $675
JUMPV
LABELV $688
line 1673
;1672:
;1673:  damage = (int) (((float) ent->client->ps.stats[STAT_MISC] / (float) LEVEL4_CHARGE_TIME)
ADDRLP4 28
CNSTF4 1121714176
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1161527296
DIVF4
MULF4
CVFI4 4
ASGNI4
line 1677
;1674:      * LEVEL4_CHARGE_DMG);
;1675:
;1676://  G_Damage(victim, ent, ent, forward, victim->s.origin, damage, 0, MOD_LEVEL4_CHARGE);
;1677:}
LABELV $675
endproc ChargeAttack 68 8
export fireRocket
proc fireRocket 8 12
line 1681
;1678:
;1679:
;1680:void fireRocket(gentity_t *ent)
;1681:{
line 1684
;1682:  gentity_t      *m;
;1683:
;1684:  m = fire_rocket(ent, muzzle, forward);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 forward
ARGP4
ADDRLP4 4
ADDRGP4 fire_rocket
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1685
;1685:}
LABELV $690
endproc fireRocket 8 12
export CalcMuzzlePoint
proc CalcMuzzlePoint 56 0
line 1698
;1686:
;1687://======================================================================
;1688:
;1689:/*
;1690: ===============
;1691: CalcMuzzlePoint
;1692:
;1693: set muzzle location relative to pivoting eye
;1694: ===============
;1695: */
;1696:void
;1697:CalcMuzzlePoint(gentity_t *ent, vec3_t forward, vec3_t right, vec3_t up, vec3_t muzzlePoint)
;1698:{
line 1700
;1699:
;1700:  VectorCopy(ent->s.pos.trBase, muzzlePoint);
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1701
;1701:  muzzlePoint[2] += ent->client->ps.viewheight;
ADDRLP4 0
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1702
;1702:  VectorMA(muzzlePoint, 1, forward, muzzlePoint);
ADDRLP4 4
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
CNSTI4 4
ASGNI4
ADDRLP4 12
ADDRFP4 16
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16
CNSTI4 8
ASGNI4
ADDRLP4 20
ADDRFP4 16
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1703
;1703:  VectorMA(muzzlePoint, 1, right, muzzlePoint);
ADDRLP4 24
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 8
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 28
CNSTI4 4
ASGNI4
ADDRLP4 32
ADDRFP4 16
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 8
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
CNSTI4 8
ASGNI4
ADDRLP4 40
ADDRFP4 16
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRFP4 8
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1706
;1704:
;1705:  // snap to integer coordinates for more efficient network bandwidth usage
;1706:  SnapVector(muzzlePoint);
ADDRLP4 44
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 48
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 52
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1707
;1707:}
LABELV $691
endproc CalcMuzzlePoint 56 0
export FireWeapon3
proc FireWeapon3 12 20
line 1716
;1708:
;1709:/*
;1710: ===============
;1711: FireWeapon3
;1712: ===============
;1713: */
;1714:void
;1715:FireWeapon3(gentity_t *ent)
;1716:{
line 1717
;1717:  if (ent->client)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $693
line 1718
;1718:  {
line 1720
;1719:    // set aiming directions
;1720:    AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1721
;1721:    CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1722
;1722:  }
ADDRGP4 $694
JUMPV
LABELV $693
line 1724
;1723:  else
;1724:  {
line 1725
;1725:    AngleVectors(ent->s.angles2, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1726
;1726:    VectorCopy(ent->s.pos.trBase, muzzle);
ADDRGP4 muzzle
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1727
;1727:  }
LABELV $694
line 1730
;1728:
;1729:  // fire the specific weapon
;1730:  switch(ent->s.weapon)
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
CNSTI4 19
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $699
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $696
LABELV $700
ADDRLP4 0
INDIRI4
CNSTI4 28
EQI4 $698
ADDRGP4 $696
JUMPV
line 1731
;1731:  {
LABELV $698
line 1733
;1732:    case WP_ALEVEL3_UPG:
;1733:      bounceBallFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 bounceBallFire
CALLV
pop
line 1734
;1734:      break;
ADDRGP4 $696
JUMPV
LABELV $699
line 1737
;1735:
;1736:    case WP_ABUILD2:
;1737:      slowBlobFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 slowBlobFire
CALLV
pop
line 1738
;1738:      break;
line 1741
;1739:
;1740:    default:
;1741:      break;
LABELV $696
line 1743
;1742:  }
;1743:}
LABELV $692
endproc FireWeapon3 12 20
export FireWeapon2
proc FireWeapon2 16 20
line 1752
;1744:
;1745:/*
;1746: ===============
;1747: FireWeapon2
;1748: ===============
;1749: */
;1750:void
;1751:FireWeapon2(gentity_t *ent)
;1752:{
line 1753
;1753:  if (ent->client)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $702
line 1754
;1754:  {
line 1756
;1755:    // set aiming directions
;1756:    AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1757
;1757:    CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1758
;1758:  }
ADDRGP4 $703
JUMPV
LABELV $702
line 1760
;1759:  else
;1760:  {
line 1761
;1761:    AngleVectors(ent->s.angles2, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1762
;1762:    VectorCopy(ent->s.pos.trBase, muzzle);
ADDRGP4 muzzle
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1763
;1763:  }
LABELV $703
line 1766
;1764:
;1765:  // fire the specific weapon
;1766:  switch(ent->s.weapon)
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
CNSTI4 7
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $709
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
GTI4 $713
LABELV $712
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $710
ADDRGP4 $705
JUMPV
LABELV $713
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $705
ADDRLP4 0
INDIRI4
CNSTI4 26
GTI4 $705
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $714-72
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $714
address $711
address $711
address $711
address $711
address $705
address $705
address $707
address $705
address $708
code
line 1767
;1767:  {
LABELV $707
line 1769
;1768:    case WP_ALEVEL1_UPG:
;1769:      poisonCloud(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 poisonCloud
CALLV
pop
line 1770
;1770:      break;
ADDRGP4 $705
JUMPV
LABELV $708
line 1772
;1771:    case WP_ALEVEL2_UPG:
;1772:      areaZapFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 areaZapFire
CALLV
pop
line 1773
;1773:      break;
ADDRGP4 $705
JUMPV
LABELV $709
line 1776
;1774:
;1775:    case WP_LAUNCHER:
;1776:      launcherSecondaryFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 launcherSecondaryFire
CALLV
pop
line 1777
;1777:      break;
ADDRGP4 $705
JUMPV
LABELV $710
line 1780
;1778:
;1779:    case WP_AXE:
;1780:      launchAxe(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 launchAxe
CALLV
pop
line 1781
;1781:      break;
ADDRGP4 $705
JUMPV
LABELV $711
line 1787
;1782:
;1783:    case WP_ABUILD:
;1784:    case WP_ABUILD2:
;1785:    case WP_HBUILD:
;1786:    case WP_HBUILD2:
;1787:      cancelBuildFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cancelBuildFire
CALLV
pop
line 1788
;1788:      break;
line 1790
;1789:    default:
;1790:      break;
LABELV $705
line 1792
;1791:  }
;1792:}
LABELV $701
endproc FireWeapon2 16 20
export FireWeapon
proc FireWeapon 12 20
line 1801
;1793:
;1794:/*
;1795: ===============
;1796: FireWeapon
;1797: ===============
;1798: */
;1799:void
;1800:FireWeapon(gentity_t *ent)
;1801:{
line 1802
;1802:  if (ent->client)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $717
line 1803
;1803:  {
line 1805
;1804:    // set aiming directions
;1805:    AngleVectors(ent->client->ps.viewangles, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1806
;1806:    CalcMuzzlePoint(ent, forward, right, up, muzzle);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 muzzle
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 1807
;1807:  }
ADDRGP4 $718
JUMPV
LABELV $717
line 1809
;1808:  else
;1809:  {
line 1810
;1810:    AngleVectors(ent->turretAim, forward, right, up);
ADDRFP4 0
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRGP4 forward
ARGP4
ADDRGP4 right
ARGP4
ADDRGP4 up
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1811
;1811:    VectorCopy(ent->s.pos.trBase, muzzle);
ADDRGP4 muzzle
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1812
;1812:  }
LABELV $718
line 1815
;1813:
;1814:  // fire the specific weapon
;1815:  switch(ent->s.weapon)
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $720
ADDRLP4 0
INDIRI4
CNSTI4 21
GTI4 $720
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $740-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $740
address $738
address $737
address $722
address $723
address $725
address $724
address $733
address $739
address $726
address $727
address $728
address $720
address $729
address $720
address $720
address $734
address $735
address $720
address $720
address $736
address $736
code
line 1816
;1816:  {
LABELV $722
line 1818
;1817:    case WP_MACHINEGUN:
;1818:      bulletFire(ent, RIFLE_SPREAD, RIFLE_DMG, MOD_MACHINEGUN);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1125515264
ARGF4
CNSTI4 10
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 bulletFire
CALLV
pop
line 1819
;1819:      break;
ADDRGP4 $720
JUMPV
LABELV $723
line 1821
;1820:    case WP_SHOTGUN:
;1821:      shotgunFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 shotgunFire
CALLV
pop
line 1822
;1822:      break;
ADDRGP4 $720
JUMPV
LABELV $724
line 1824
;1823:    case WP_CHAINGUN:
;1824:      bulletFire(ent, CHAINGUN_SPREAD, CHAINGUN_DMG, MOD_CHAINGUN);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1132068864
ARGF4
CNSTI4 10
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 bulletFire
CALLV
pop
line 1825
;1825:      break;
ADDRGP4 $720
JUMPV
LABELV $725
line 1827
;1826:    case WP_MASS_DRIVER:
;1827:      massDriverFire2(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 massDriverFire2
CALLV
pop
line 1828
;1828:      break;
ADDRGP4 $720
JUMPV
LABELV $726
line 1830
;1829:    case WP_LAS_GUN:
;1830:      lasGunFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 lasGunFire
CALLV
pop
line 1831
;1831:      break;
ADDRGP4 $720
JUMPV
LABELV $727
line 1833
;1832:    case WP_GRENADE:
;1833:      throwGrenade(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 throwGrenade
CALLV
pop
line 1834
;1834:      break;
ADDRGP4 $720
JUMPV
LABELV $728
line 1836
;1835:    case WP_MINE:
;1836:      plantMine(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 plantMine
CALLV
pop
line 1837
;1837:      break;
ADDRGP4 $720
JUMPV
LABELV $729
line 1839
;1838:    case WP_ZOMBIE_BITE:
;1839:      if(g_survival.integer)
ADDRGP4 g_survival+12
INDIRI4
CNSTI4 0
EQI4 $730
line 1840
;1840:      {
line 1841
;1841:        meleeAttack(ent, ZOMBIE_RANGE*2, LEVEL1_CLAW_WIDTH, LEVEL1_CLAW_DMG/5, MOD_ZOMBIE_BITE);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1140850688
ARGF4
CNSTF4 1092616192
ARGF4
CNSTI4 8
ARGI4
CNSTI4 13
ARGI4
ADDRGP4 meleeAttack
CALLV
pop
line 1842
;1842:      }
ADDRGP4 $720
JUMPV
LABELV $730
line 1844
;1843:      else
;1844:      {
line 1845
;1845:        meleeAttack(ent, ZOMBIE_RANGE*2, LEVEL1_CLAW_WIDTH, LEVEL1_CLAW_DMG/3, MOD_ZOMBIE_BITE);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1140850688
ARGF4
CNSTF4 1092616192
ARGF4
ADDRLP4 8
CNSTI4 13
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 meleeAttack
CALLV
pop
line 1846
;1846:      }
line 1848
;1847:
;1848:      break;
ADDRGP4 $720
JUMPV
LABELV $733
line 1850
;1849:    case WP_LAUNCHER:
;1850:      launcherFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 launcherFire
CALLV
pop
line 1851
;1851:      break;
ADDRGP4 $720
JUMPV
LABELV $734
line 1855
;1852:
;1853:
;1854:    case WP_TESLAGEN:
;1855:      teslaFire(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 teslaFire
CALLV
pop
line 1856
;1856:      break;
ADDRGP4 $720
JUMPV
LABELV $735
line 1858
;1857:    case WP_MGTURRET:
;1858:      bulletFire(ent, MGTURRET_SPREAD, MGTURRET_DMG, MOD_MGTURRET);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1128792064
ARGF4
CNSTI4 24
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 bulletFire
CALLV
pop
line 1859
;1859:      break;
ADDRGP4 $720
JUMPV
LABELV $736
line 1863
;1860:
;1861:    case WP_HBUILD:
;1862:    case WP_HBUILD2:
;1863:      buildFire(ent, MN_H_BUILD);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 21
ARGI4
ADDRGP4 buildFire
CALLV
pop
line 1864
;1864:      break;
ADDRGP4 $720
JUMPV
LABELV $737
line 1867
;1865:    //New Weapons
;1866:    case WP_AXE:
;1867:      meleeAttack(ent, AXE_RANGE, AXE_WIDTH, AXE_DAMAGE, MOD_AXE);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1117782016
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 200
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 meleeAttack
CALLV
pop
line 1868
;1868:      break;
ADDRGP4 $720
JUMPV
LABELV $738
line 1870
;1869:    case WP_PISTOL:
;1870:      bulletFire(ent,0,PISTOL_DAMAGE, MOD_PISTOL);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 20
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 bulletFire
CALLV
pop
line 1871
;1871:      break;
ADDRGP4 $720
JUMPV
LABELV $739
line 1873
;1872:    case WP_ROCKET_LAUNCHER:
;1873:      fireRocket(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 fireRocket
CALLV
pop
line 1874
;1874:      break;
line 1876
;1875:    default:
;1876:      break;
LABELV $720
line 1878
;1877:  }
;1878:}
LABELV $716
endproc FireWeapon 12 20
export G_healFriend
proc G_healFriend 156 28
line 1881
;1879:void
;1880:G_healFriend(gentity_t *ent)
;1881:{
line 1886
;1882:  vec3_t forward, end;
;1883:  trace_t tr;
;1884:  gentity_t *traceEnt;
;1885:  //Reapir budy.
;1886:  if (ent->client->ps.stats[STAT_PTEAM] == PTE_HUMANS && g_survival.integer)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $743
ADDRGP4 g_survival+12
INDIRI4
CNSTI4 0
EQI4 $743
line 1887
;1887:  {
line 1888
;1888:    AngleVectors(ent->client->ps.viewangles, forward, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 88
CNSTP4 0
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1889
;1889:    VectorMA(ent->client->ps.origin, 200, forward, end);
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ASGNP4
ADDRLP4 96
CNSTF4 1128792064
ASGNF4
ADDRLP4 16
ADDRLP4 92
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 92
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1128792064
ADDRLP4 4+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1891
;1890:
;1891:    G_UnlaggedOn(ent, muzzle, 200);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 muzzle
ARGP4
CNSTF4 1128792064
ARGF4
ADDRGP4 G_UnlaggedOn
CALLV
pop
line 1892
;1892:    trap_Trace(&tr, ent->client->ps.origin, NULL, NULL, end, ent->s.number, MASK_PLAYERSOLID);
ADDRLP4 28
ARGP4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 104
CNSTP4 0
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 100
INDIRP4
INDIRI4
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1893
;1893:    G_UnlaggedOff();
ADDRGP4 G_UnlaggedOff
CALLV
pop
line 1894
;1894:    traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 2476
ADDRLP4 28+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1896
;1895:
;1896:    if (!traceEnt)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $751
line 1897
;1897:      return;
ADDRGP4 $742
JUMPV
LABELV $751
line 1898
;1898:    if (!traceEnt->client)
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $753
line 1899
;1899:      return;
ADDRGP4 $742
JUMPV
LABELV $753
line 1901
;1900:
;1901:    if (tr.fraction < 1.0 && (traceEnt->client->ps.stats[STAT_PTEAM] == PTE_HUMANS)
ADDRLP4 28+8
INDIRF4
CNSTF4 1065353216
GEF4 $755
ADDRLP4 112
CNSTI4 516
ASGNI4
ADDRLP4 116
ADDRLP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $755
ADDRLP4 120
ADDRFP4 0
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 20
LTI4 $755
ADDRLP4 120
INDIRI4
CNSTI4 21
GTI4 $755
ADDRLP4 124
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 124
INDIRI4
LEI4 $755
ADDRLP4 116
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 124
INDIRI4
LEI4 $755
ADDRLP4 116
INDIRP4
CNSTI4 1120
ADDP4
INDIRI4
CNSTI4 1
EQI4 $755
line 1905
;1902:        && (ent->client->ps.weapon >= WP_HBUILD2) && (ent->client->ps.weapon <= WP_HBUILD)
;1903:        && traceEnt->health > 0 && traceEnt->client->ps.stats[STAT_HEALTH] > 0
;1904:        && traceEnt->client->sess.sessionTeam != TEAM_SPECTATOR)
;1905:    {
line 1906
;1906:      if (ent->client->ps.stats[STAT_MISC] > 0)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $758
line 1907
;1907:      {
line 1908
;1908:        G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 128
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1909
;1909:        return;
ADDRGP4 $742
JUMPV
LABELV $758
line 1912
;1910:      }
;1911:
;1912:      if (ent->client->ps.persistant[PERS_UNUSED] < 1)
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 256
ADDP4
INDIRI4
CNSTI4 1
GEI4 $760
line 1913
;1913:      {
line 1914
;1914:        G_AddEvent(ent, EV_BUILD_DELAY, ent->client->ps.clientNum);
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 128
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1915
;1915:        trap_SendServerCommand(
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2476
DIVI4
ARGI4
ADDRGP4 $421
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1917
;1916:          ent - g_entities, "print \"^2You need to pickup a medical supply.\n\"");
;1917:        return;
ADDRGP4 $742
JUMPV
LABELV $760
line 1920
;1918:      }
;1919:
;1920:      if (traceEnt->health < 100)
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 100
GEI4 $762
line 1921
;1921:      {
line 1922
;1922:        traceEnt->health = traceEnt->client->ps.stats[STAT_HEALTH]
ADDRLP4 132
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 136
ADDRLP4 132
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
ASGNI4
ADDRLP4 132
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 1924
;1923:            = traceEnt->client->ps.stats[STAT_MAX_HEALTH];
;1924:        G_AddEvent(traceEnt, EV_MEDKIT_USED, 0);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 61
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1925
;1925:        ent->client->ps.persistant[PERS_UNUSED] -= 1;
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 256
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1926
;1926:        ent->client->ps.persistant[PERS_SCORE] += 10;
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1927
;1927:		ent->client->pers.heals++;
ADDRLP4 148
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 896
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1928
;1928:		  if((ent->client->pers.badges[ 39 ] != 1) && (ent->client->pers.heals >= 6))
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 811
ADDP4
INDIRI1
CVII4 1
CNSTI4 1
EQI4 $764
ADDRLP4 152
INDIRP4
CNSTI4 896
ADDP4
INDIRI4
CNSTI4 6
LTI4 $764
line 1929
;1929:		  {
line 1930
;1930:			  G_WinBadge( ent, 39 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 39
ARGI4
ADDRGP4 G_WinBadge
CALLV
pop
line 1931
;1931:			  ent->client->pers.badgeupdate[39] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 861
ADDP4
CNSTI1 1
ASGNI1
line 1932
;1932:			  ent->client->pers.badges[39] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 811
ADDP4
CNSTI1 1
ASGNI1
line 1933
;1933:		  }
LABELV $764
line 1934
;1934:      }
LABELV $762
line 1936
;1935:
;1936:      ent->client->pers.statscounters.repairspoisons++;
ADDRLP4 128
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1078
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI2
CVII4 2
CNSTI4 1
ADDI4
CVII2 4
ASGNI2
line 1937
;1937:      level.humanStatsCounters.repairspoisons++;
ADDRLP4 132
ADDRGP4 level+190108+36
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1939
;1938:
;1939:      if (traceEnt->health > 100)
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 100
LEI4 $768
line 1940
;1940:        traceEnt->health = 100;
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
CNSTI4 100
ASGNI4
LABELV $768
line 1942
;1941:
;1942:      if (traceEnt->health == 100)
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 100
NEI4 $770
line 1943
;1943:        G_AddEvent(ent, EV_BUILD_REPAIRED, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 57
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
ADDRGP4 $771
JUMPV
LABELV $770
line 1945
;1944:      else
;1945:      {
line 1946
;1946:        G_AddEvent(ent, EV_BUILD_REPAIR, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1947
;1947:      }
LABELV $771
line 1948
;1948:    }
LABELV $755
line 1949
;1949:  }
LABELV $743
line 1950
;1950:}
LABELV $742
endproc G_healFriend 156 28
bss
align 4
LABELV zaps
skip 2304
align 4
LABELV muzzle
skip 12
align 4
LABELV up
skip 12
align 4
LABELV right
skip 12
align 4
LABELV forward
skip 12
import G_deleteWhite
import G_adminWhitelistGlobal
import G_adminGlobal
import G_whitelistCheck
import G_globalCheck
import G_globalBanCheck
import G_deleteGlobal
import getGlobalTypeString
import G_globalInit
import G_globalAdd
import G_getLongerWhiteName
import G_isValidIpAddress
import G_globalExit
import G_isPlayerConnected
import botSelectEnemy
import botCanSeeEnemy
import botForgetEnemy
import G_BotAimAt
import G_printVector
import G_doorInRange
import G_itemInRange
import G_playerInRange
import g_comboPrint
import g_comboClear
import modString
import director_debug
import ace_botsFile
import ace_spSkill
import ace_attackEnemies
import ace_pickShortRangeGoal
import ace_pickLongRangeGoal
import ace_showPath
import ace_showLinks
import ace_showNodes
import ace_debug
import AngleBetweenVectors
import G_KillStructuresSurvival
import spawnItem
import G_itemUse
import G_itemThink
import syrinxSpawn
import selectBetterWay
import drawRedBall
import G_FindRadius
import G_ProjectSource
import pointBehindWall
import spawnGridNode
import convertGridToWorld
import convertWorldToGrid
import fillGrid
import WallInFront
import trap_mysql_reconnect
import trap_mysql_fetchfieldbyName
import trap_mysql_fetchfieldbyID
import trap_mysql_fetchrow
import trap_mysql_finishquery
import trap_mysql_runquery
import trap_SendGameStat
import trap_SnapVector
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_antispawncamp
import mega_wave
import ROTACAK_ambush_kills
import ROTACAK_ambush_stage
import ROTACAK_ambush_rebuild_time_temp
import g_bot_lcannon
import g_bot_flamer
import g_bot_prifle
import g_bot_chaingun
import g_bot_mdriver
import g_bot_lasgun
import g_bot_psaw
import g_bot_shotgun
import g_bot_mgun
import g_bot
import g_ambush_turnangle
import g_ambush_range
import g_ambush_att_buildables
import g_ambush_kill_spawns
import g_ambush
import g_ambush_no_egg_ffoff
import g_ambush_stage_suicide
import g_ambush_sec_to_start
import g_ambush_rebuild_time
import g_ambush_dodge_random
import g_ambush_dodge
import g_ambush_tyrants_to_win
import g_ambush_dragon2_s8
import g_ambush_dragon_s7
import g_ambush_marauder2_s6
import g_ambush_marauder_s5
import g_ambush_basilisk2_s4
import g_ambush_basilisk_s3
import g_ambush_dretch_s2
import g_ambush_granger_s1
import g_buildLogMaxLength
import g_survival
import g_ctncapturetime
import g_ctnbuildlimit
import g_ctn
import g_msgTime
import g_msg
import g_mapvoteMaxTime
import g_voteMinTime
import g_devmapNoStructDmg
import g_devmapNoGod
import g_dretchPunt
import g_antiSpawnBlock
import g_myStats
import g_publicSayadmins
import g_decolourLogfiles
import g_privateMessages
import g_devmapKillerHP
import g_banNotice
import g_minLevelToSpecMM1
import g_forceAutoSelect
import g_minLevelToJoinTeam
import g_adminMapLog
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminSayFilter
import g_adminParseSay
import g_adminLog
import g_admin
import g_layoutAuto
import g_layouts
import g_mapConfigs
import g_shove
import g_floodMinTime
import g_floodMaxDemerits
import g_actionPrefix
import g_chatTeamPrefix
import g_initialMapRotation
import g_nextMap
import g_currentMap
import g_currentMapRotation
import g_debugMapRotation
import g_deconDead
import g_markDeconstruct
import g_disabledBuildables
import g_disabledClasses
import g_disabledEquipment
import g_unlagged
import g_teamImbalanceWarnings
import g_alienStage3Threshold
import g_alienStage2Threshold
import g_alienMaxStage
import g_alienKills
import g_alienStage
import g_humanStage3Threshold
import g_humanStage2Threshold
import g_humanMaxStage
import g_humanKills
import g_humanStage
import g_alienBuildPoints
import g_humanBuildPoints
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_allowShare
import g_rankings
import pmove_msec
import pmove_fixed
import g_clientUpgradeNotice
import g_smoothClients
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_designateVotes
import g_mapVotesPercent
import g_suddenDeathVoteDelay
import g_suddenDeathVotePercent
import g_voteLimit
import g_requireVoteReasons
import g_allowVote
import g_blood
import g_doWarmup
import g_warmupMode
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyBuildableFire
import g_friendlyFireMovementAttacks
import g_retribution
import g_friendlyFireAliens
import g_friendlyFireHumans
import g_friendlyFire
import g_layoutmaking
import g_suddenDeathMode
import g_suddenDeath
import g_suddenDeathTime
import g_timelimit
import g_enterString
import g_newbieNamePrefix
import g_newbieNumbering
import g_maxNameChanges
import g_minNameChangePeriod
import g_minCommandPeriod
import g_lockTeamsAtStart
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_entities
import level
import G_FindConnectionForCode
import G_ResetPTRConnections
import G_GenerateNewConnection
import G_UpdatePTRConnection
import G_GetCurrentMap
import G_MapExists
import G_InitMapRotations
import G_MapRotationActive
import G_StopMapRotation
import G_StartMapRotation
import G_AdvanceMapRotation
import G_PrintRotations
import G_WinBadge
import G_WriteSessionData
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_DefragmentMemory
import G_Free
import G_InitMemory
import G_Alloc
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import G_UnlaggedOff
import G_UnlaggedOn
import G_UnlaggedCalc
import G_UnlaggedClear
import G_UnlaggedStore
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_Flood_Limited
import CheckMsgTimer
import G_TimeTilSuddenDeath
import LogExit
import CheckTeamVote
import CheckVote
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_AdminsPrintf
import G_LogOnlyPrintf
import G_LogPrintfColoured
import G_LogPrintf
import G_RunThink
import FindIntermissionPoint
import CalculateRanks
import G_MapConfigs
import MoveClientToIntermission
import ScoreboardMessage
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import G_NextNewbieName
import SpotWouldTelefrag
import player_die
import ClientSpawn
import BeginIntermission
import respawn
import SpawnCorpse
import G_SelectHumanLockSpawnPoint
import G_SelectAlienLockSpawnPoint
import G_SelectSpawnPoint
import G_SelectTremulousSpawnPoint
import G_SetClientViewAngle
import TeamCount
import G_AddCreditToClient
import ShineTorch
import TeleportPlayer
import TeleportZombie
import G_Checktrigger_stages
import trigger_teleporter_touch
import manualTriggerSpectator
import Touch_DoorTrigger
import G_RunMover
import fire_dome
import fire_rocket
import fire_axe
import plant_mine
import launch_grenade_primary
import launch_grenade_secondary
import launch_bomb
import launch_grenade
import fire_hive
import fire_bounceBall
import fire_slowBlob
import fire_paraLockBlob
import fire_lockblob
import fire_luciferCannon
import fire_pulseRifle
import fire_flamer
import G_RunMissile
import G_InitDamageLocations
import AddScore
import body_die
import G_SelectiveRadiusDamage
import G_RadiusDamage
import G_SelectiveDamage
import G_Damage
import CanDamage
import G_ClosestEnt
import G_Visible
import Distance2d
import G_CloseMenus
import G_TriggerMenu
import G_ClientIsLagging
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_BroadcastEvent
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import G_ShaderIndex
import G_ParticleSystemIndex
import G_FindBuildLogName
import G_CountBuildLog
import G_LogBuild
import G_RevertCanFit
import G_CommitRevertedBuildable
import G_SpawnRevertedBuildable
import G_InstantBuild
import G_BaseSelfDestruct
import G_LayoutLoad
import G_LayoutSelect
import G_LayoutList
import G_LayoutSave
import G_CheckDBProtection
import FinishSpawningBuildable
import G_SpawnBuildable
import G_SetIdleBuildableAnim
import G_SetBuildableAnim
import G_BuildIfValid
import G_BuildingExists
import G_CanBuild
import G_ArmoryRange
import G_BuildableRange
import G_BuildableThink
import G_IsOvermindBuilt
import G_IsDCCBuilt
import G_IsPowered
import G_CheckSpawnPoint
import AHovel_Blocked
import G_Physics
import G_CP
import G_WordWrap
import Cmd_Builder_f
import Cmd_TeamVote_f
import Cmd_Donate_f
import Cmd_Share_f
import G_statsString
import G_PrivateMessage
import G_SanitiseString
import G_ChangeTeam
import G_LeaveTeam
import G_ParseEscapedString
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import G_Say
import G_ClientNumbersFromString
import G_MatchOnePlayer
import G_ToggleFollow
import G_FollowNewClient
import G_StopFollowing
import G_StopFromFollowing
import Cmd_Score_f
import botJump
import botCrouch
import botWalk
import botShootIfTargetInRange
import botGetDistanceBetweenPlayer
import botTargetInRange
import botFindClosestEnemy
import botAimAtTarget
import G_BotSpectatorThink
import G_BotThink
import G_BotCmd
import G_BotDel
import G_BotAdd
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import G_GetPosInSpawnQueue
import G_RemoveFromSpawnQueue
import G_PushSpawnQueue
import G_SearchSpawnQueue
import G_PeekSpawnQueue
import G_PopSpawnQueue
import G_GetSpawnQueueLength
import G_InitSpawnQueue
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_mystats
import G_admin_message
import G_badgelist
import G_badges
import G_adminWhiteAdd
import G_adminWhiteDelete
import G_adminWhiteList
import G_adminGlobalSync
import G_adminGlobalBan
import G_adminGlobalHandicap
import G_adminGlobalDenyBuild
import G_adminGlobalForcespec
import G_adminGlobalMute
import G_adminListGlobals
import G_adminDeleteGlobal
import G_setnextnode
import G_drawnodes
import G_reconnectdb
import G_switchnodes
import G_admin_botcmd
import G_admin_bot
import G_set_survival_stage
import G_admin_findpath
import G_admin_printpath
import G_admin_printgrid
import G_admin_switch
import G_admin_cp
import G_admin_designate
import G_admin_warn
import G_admin_putmespec
import G_admin_L1
import G_admin_L0
import G_admin_pause
import G_admin_revert
import G_admin_buildlog
import G_admin_info
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_register
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_denybuild
import G_admin_mute
import G_admin_layoutsave
import G_admin_maplog
import G_admin_maplog_update
import G_admin_devmap
import G_admin_map
import G_admin_listrotation
import G_admin_listmaps
import G_admin_listplayers
import G_admin_listlayouts
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_subnetban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_adminPrintName
import G_admin_set_adminname
import G_admin_level
import G_admin_maplog_result
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import BG_ClientListParse
import BG_ClientListString
import BG_ClientListRemove
import BG_ClientListAdd
import BG_ClientListTest
import BG_UpgradeClassAvailable
import BG_BuildableIsAllowed
import BG_ClassIsAllowed
import BG_UpgradeIsAllowed
import BG_WeaponIsAllowed
import BG_InitAllowedGameElements
import BG_ParseCSVBuildableList
import BG_ParseCSVClassList
import BG_ParseCSVEquipmentList
import atoi_neg
import atof_neg
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_FindTeamForUpgrade
import BG_FindUsableForUpgrade
import BG_FindPurchasableForUpgrade
import BG_FindIconForUpgrade
import BG_FindHumanNameForUpgrade
import BG_FindUpgradeNumForName
import BG_FindNameForUpgrade
import BG_FindSlotsForUpgrade
import BG_FindStagesForUpgrade
import BG_FindPriceForUpgrade
import BG_FindTeamForWeapon
import BG_FindBuildDelayForWeapon
import BG_FindLongRangedForWeapon
import BG_FindPurchasableForWeapon
import BG_FindZoomFovForWeapon
import BG_WeaponCanZoom
import BG_WeaponHasThirdMode
import BG_WeaponHasAltMode
import BG_FindKnockbackScaleForWeapon
import BG_FindReloadTimeForWeapon
import BG_FindRepeatRate3ForWeapon
import BG_FindRepeatRate2ForWeapon
import BG_FindRepeatRate1ForWeapon
import BG_FindUsesEnergyForWeapon
import BG_FindInfinteAmmoForWeapon
import BG_FindAmmoForWeapon
import BG_FindCrosshairSizeForWeapon
import BG_FindCrosshairForWeapon
import BG_FindIconForWeapon
import BG_FindModelsForWeapon
import BG_FindHumanNameForWeapon
import BG_FindWeaponNumForName
import BG_FindNameForWeapon
import BG_FindSlotsForWeapon
import BG_FindStagesForWeapon
import BG_FindPriceForWeapon
import BG_InitClassOverrides
import BG_FindValueOfClass
import BG_FindCostOfClass
import BG_ClassCanEvolveFromTo
import BG_FindBuildDistForClass
import BG_FindStartWeaponForClass
import BG_ClassHasAbility
import BG_FindSteptimeForClass
import BG_FindKnockbackScaleForClass
import BG_FindJumpMagnitudeForClass
import BG_FindStopSpeedForClass
import BG_FindFrictionForClass
import BG_FindAirAccelerationForClass
import BG_FindAccelerationForClass
import BG_FindSpeedForClass
import BG_FindBobCycleForClass
import BG_FindBobForClass
import BG_FindFovForClass
import BG_FindRegenRateForClass
import BG_FindFallDamageForClass
import BG_FindHealthForClass
import BG_FindViewheightForClass
import BG_FindZOffsetForClass
import BG_FindBBoxForClass
import BG_FindSpriteHeightForClass
import BG_FindStagesForClass
import BG_FindHudNameForClass
import BG_FindShadowScaleForClass
import BG_FindSkinNameForClass
import BG_FindModelScaleForClass
import BG_FindModelNameForClass
import BG_FindHumanNameForClassNum
import BG_FindNameForClassNum
import BG_FindClassNumForName
import BG_InitBuildableOverrides
import BG_FindTransparentTestForBuildable
import BG_FindReplaceableTestForBuildable
import BG_FindUniqueTestForBuildable
import BG_FindDCCTestForBuildable
import BG_FindCreepSizeForBuildable
import BG_FindCreepTestForBuildable
import BG_FindInvertNormalForBuildable
import BG_FindMinNormalForBuildable
import BG_FindProjTypeForBuildable
import BG_FindFireSpeedForBuildable
import BG_FindRangeForBuildable
import BG_FindUsableForBuildable
import BG_FindBuildTimeForBuildable
import BG_FindNextThinkForBuildable
import BG_FindAnimForBuildable
import BG_FindBuildWeaponForBuildable
import BG_FindTeamForBuildable
import BG_FindMODForBuildable
import BG_FindSplashRadiusForBuildable
import BG_FindSplashDamageForBuildable
import BG_FindStagesForBuildable
import BG_FindBuildPointsForBuildable
import BG_FindBounceForBuildable
import BG_FindTrajectoryForBuildable
import BG_FindRegenRateForBuildable
import BG_FindHealthForBuildable
import BG_FindZOffsetForBuildable
import BG_FindBBoxForBuildable
import BG_FindModelScaleForBuildable
import BG_FindModelsForBuildable
import BG_FindEntityNameForBuildable
import BG_FindHumanNameForBuildable
import BG_FindNameForBuildable
import BG_FindBuildNumForEntityName
import BG_FindBuildNumForName
import BG_GetValueOfEquipment
import BG_GetValueOfHuman
import BG_PositionBuildableRelativeToPlayer
import BG_RotateAxis
import BG_UpgradeIsActive
import BG_DeactivateUpgrade
import BG_ActivateUpgrade
import BG_InventoryContainsUpgrade
import BG_RemoveUpgradeFromInventory
import BG_AddUpgradeToInventory
import BG_InventoryContainsWeapon
import BG_RemoveWeaponFromInventory
import BG_AddWeaponToInventory
import BG_WeaponIsFull
import BG_PackAmmoArray
import BG_UnpackAmmoArray
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isintegral
import Q_isanumber
import Q_isdigit
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Com_HexStrToInt
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import DistanceBetweenLineSegments
import DistanceBetweenLineSegmentsSquared
import VectorMaxComponent
import VectorMinComponent
import pointToLineDistance
import VectorDistance
import ProjectPointOntoVector
import GetPerpendicularViewVector
import Q_isnan
import PerpendicularVector
import AngleVectors
import VectorMatrixMultiply
import MatrixMultiply
import MakeNormalVectors
import RotateAroundAxe
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AxisToAngles
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import rint
import pow
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $579
byte 1 108
byte 1 101
byte 1 118
byte 1 50
byte 1 122
byte 1 97
byte 1 112
byte 1 99
byte 1 104
byte 1 97
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $538
byte 1 112
byte 1 111
byte 1 105
byte 1 115
byte 1 111
byte 1 110
byte 1 99
byte 1 108
byte 1 111
byte 1 117
byte 1 100
byte 1 0
align 1
LABELV $424
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 99
byte 1 97
byte 1 110
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 32
byte 1 109
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 49
byte 1 32
byte 1 68
byte 1 111
byte 1 109
byte 1 101
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $421
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 94
byte 1 50
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 110
byte 1 101
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 105
byte 1 99
byte 1 107
byte 1 117
byte 1 112
byte 1 32
byte 1 97
byte 1 32
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 97
byte 1 108
byte 1 32
byte 1 115
byte 1 117
byte 1 112
byte 1 112
byte 1 108
byte 1 121
byte 1 46
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $315
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 34
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 99
byte 1 97
byte 1 110
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 32
byte 1 109
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 50
byte 1 32
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 46
byte 1 10
byte 1 34
byte 1 0
